// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4ops.proto

#ifndef PROTOBUF_playlist4ops_2eproto__INCLUDED
#define PROTOBUF_playlist4ops_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "playlist4content.pb.h"
#include "playlist4meta.pb.h"
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playlist4ops_2eproto();
void protobuf_AssignDesc_playlist4ops_2eproto();
void protobuf_ShutdownFile_playlist4ops_2eproto();

class Add;
class Rem;
class Mov;
class ItemAttributesPartialState;
class ListAttributesPartialState;
class UpdateItemAttributes;
class UpdateListAttributes;
class Op;
class OpList;

enum Op_Kind {
  Op_Kind_KIND_UNKNOWN = 0,
  Op_Kind_ADD = 2,
  Op_Kind_REM = 3,
  Op_Kind_MOV = 4,
  Op_Kind_UPDATE_ITEM_ATTRIBUTES = 5,
  Op_Kind_UPDATE_LIST_ATTRIBUTES = 6
};
bool Op_Kind_IsValid(int value);
const Op_Kind Op_Kind_Kind_MIN = Op_Kind_KIND_UNKNOWN;
const Op_Kind Op_Kind_Kind_MAX = Op_Kind_UPDATE_LIST_ATTRIBUTES;
const int Op_Kind_Kind_ARRAYSIZE = Op_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Op_Kind_descriptor();
inline const ::std::string& Op_Kind_Name(Op_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Op_Kind_descriptor(), value);
}
inline bool Op_Kind_Parse(
    const ::std::string& name, Op_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Op_Kind>(
    Op_Kind_descriptor(), name, value);
}
// ===================================================================

class Add : public ::google::protobuf::Message {
 public:
  Add();
  virtual ~Add();

  Add(const Add& from);

  inline Add& operator=(const Add& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Add& default_instance();

  void Swap(Add* other);

  // implements Message ----------------------------------------------

  Add* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Add& from);
  void MergeFrom(const Add& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fromIndex = 1;
  inline bool has_fromindex() const;
  inline void clear_fromindex();
  static const int kFromIndexFieldNumber = 1;
  inline ::google::protobuf::int32 fromindex() const;
  inline void set_fromindex(::google::protobuf::int32 value);

  // repeated .spotify.playlist4.proto.Item items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::spotify::playlist4::proto::Item& items(int index) const;
  inline ::spotify::playlist4::proto::Item* mutable_items(int index);
  inline ::spotify::playlist4::proto::Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >*
      mutable_items();

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
  inline bool has_list_checksum() const;
  inline void clear_list_checksum();
  static const int kListChecksumFieldNumber = 3;
  inline const ::spotify::playlist4::proto::ListChecksum& list_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_list_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_list_checksum();
  inline void set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum);

  // optional bool addLast = 4;
  inline bool has_addlast() const;
  inline void clear_addlast();
  static const int kAddLastFieldNumber = 4;
  inline bool addlast() const;
  inline void set_addlast(bool value);

  // optional bool addFirst = 5;
  inline bool has_addfirst() const;
  inline void clear_addfirst();
  static const int kAddFirstFieldNumber = 5;
  inline bool addfirst() const;
  inline void set_addfirst(bool value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Add)
 private:
  inline void set_has_fromindex();
  inline void clear_has_fromindex();
  inline void set_has_list_checksum();
  inline void clear_has_list_checksum();
  inline void set_has_addlast();
  inline void clear_has_addlast();
  inline void set_has_addfirst();
  inline void clear_has_addfirst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item > items_;
  ::spotify::playlist4::proto::ListChecksum* list_checksum_;
  ::google::protobuf::int32 fromindex_;
  bool addlast_;
  bool addfirst_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static Add* default_instance_;
};
// -------------------------------------------------------------------

class Rem : public ::google::protobuf::Message {
 public:
  Rem();
  virtual ~Rem();

  Rem(const Rem& from);

  inline Rem& operator=(const Rem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rem& default_instance();

  void Swap(Rem* other);

  // implements Message ----------------------------------------------

  Rem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rem& from);
  void MergeFrom(const Rem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fromIndex = 1;
  inline bool has_fromindex() const;
  inline void clear_fromindex();
  static const int kFromIndexFieldNumber = 1;
  inline ::google::protobuf::int32 fromindex() const;
  inline void set_fromindex(::google::protobuf::int32 value);

  // optional int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .spotify.playlist4.proto.Item items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::spotify::playlist4::proto::Item& items(int index) const;
  inline ::spotify::playlist4::proto::Item* mutable_items(int index);
  inline ::spotify::playlist4::proto::Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >*
      mutable_items();

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  inline bool has_list_checksum() const;
  inline void clear_list_checksum();
  static const int kListChecksumFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ListChecksum& list_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_list_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_list_checksum();
  inline void set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum);

  // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
  inline bool has_items_checksum() const;
  inline void clear_items_checksum();
  static const int kItemsChecksumFieldNumber = 5;
  inline const ::spotify::playlist4::proto::ListChecksum& items_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_items_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_items_checksum();
  inline void set_allocated_items_checksum(::spotify::playlist4::proto::ListChecksum* items_checksum);

  // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
  inline bool has_uris_checksum() const;
  inline void clear_uris_checksum();
  static const int kUrisChecksumFieldNumber = 6;
  inline const ::spotify::playlist4::proto::ListChecksum& uris_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_uris_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_uris_checksum();
  inline void set_allocated_uris_checksum(::spotify::playlist4::proto::ListChecksum* uris_checksum);

  // optional bool itemsAsKey = 7;
  inline bool has_itemsaskey() const;
  inline void clear_itemsaskey();
  static const int kItemsAsKeyFieldNumber = 7;
  inline bool itemsaskey() const;
  inline void set_itemsaskey(bool value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Rem)
 private:
  inline void set_has_fromindex();
  inline void clear_has_fromindex();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_list_checksum();
  inline void clear_has_list_checksum();
  inline void set_has_items_checksum();
  inline void clear_has_items_checksum();
  inline void set_has_uris_checksum();
  inline void clear_has_uris_checksum();
  inline void set_has_itemsaskey();
  inline void clear_has_itemsaskey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fromindex_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item > items_;
  ::spotify::playlist4::proto::ListChecksum* list_checksum_;
  ::spotify::playlist4::proto::ListChecksum* items_checksum_;
  ::spotify::playlist4::proto::ListChecksum* uris_checksum_;
  bool itemsaskey_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static Rem* default_instance_;
};
// -------------------------------------------------------------------

class Mov : public ::google::protobuf::Message {
 public:
  Mov();
  virtual ~Mov();

  Mov(const Mov& from);

  inline Mov& operator=(const Mov& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mov& default_instance();

  void Swap(Mov* other);

  // implements Message ----------------------------------------------

  Mov* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mov& from);
  void MergeFrom(const Mov& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fromIndex = 1;
  inline bool has_fromindex() const;
  inline void clear_fromindex();
  static const int kFromIndexFieldNumber = 1;
  inline ::google::protobuf::int32 fromindex() const;
  inline void set_fromindex(::google::protobuf::int32 value);

  // required int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // required int32 toIndex = 3;
  inline bool has_toindex() const;
  inline void clear_toindex();
  static const int kToIndexFieldNumber = 3;
  inline ::google::protobuf::int32 toindex() const;
  inline void set_toindex(::google::protobuf::int32 value);

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  inline bool has_list_checksum() const;
  inline void clear_list_checksum();
  static const int kListChecksumFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ListChecksum& list_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_list_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_list_checksum();
  inline void set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum);

  // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
  inline bool has_items_checksum() const;
  inline void clear_items_checksum();
  static const int kItemsChecksumFieldNumber = 5;
  inline const ::spotify::playlist4::proto::ListChecksum& items_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_items_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_items_checksum();
  inline void set_allocated_items_checksum(::spotify::playlist4::proto::ListChecksum* items_checksum);

  // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
  inline bool has_uris_checksum() const;
  inline void clear_uris_checksum();
  static const int kUrisChecksumFieldNumber = 6;
  inline const ::spotify::playlist4::proto::ListChecksum& uris_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_uris_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_uris_checksum();
  inline void set_allocated_uris_checksum(::spotify::playlist4::proto::ListChecksum* uris_checksum);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Mov)
 private:
  inline void set_has_fromindex();
  inline void clear_has_fromindex();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_toindex();
  inline void clear_has_toindex();
  inline void set_has_list_checksum();
  inline void clear_has_list_checksum();
  inline void set_has_items_checksum();
  inline void clear_has_items_checksum();
  inline void set_has_uris_checksum();
  inline void clear_has_uris_checksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fromindex_;
  ::google::protobuf::int32 length_;
  ::spotify::playlist4::proto::ListChecksum* list_checksum_;
  ::spotify::playlist4::proto::ListChecksum* items_checksum_;
  ::spotify::playlist4::proto::ListChecksum* uris_checksum_;
  ::google::protobuf::int32 toindex_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static Mov* default_instance_;
};
// -------------------------------------------------------------------

class ItemAttributesPartialState : public ::google::protobuf::Message {
 public:
  ItemAttributesPartialState();
  virtual ~ItemAttributesPartialState();

  ItemAttributesPartialState(const ItemAttributesPartialState& from);

  inline ItemAttributesPartialState& operator=(const ItemAttributesPartialState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemAttributesPartialState& default_instance();

  void Swap(ItemAttributesPartialState* other);

  // implements Message ----------------------------------------------

  ItemAttributesPartialState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemAttributesPartialState& from);
  void MergeFrom(const ItemAttributesPartialState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .spotify.playlist4.proto.ItemAttributes values = 1;
  inline bool has_values() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::spotify::playlist4::proto::ItemAttributes& values() const;
  inline ::spotify::playlist4::proto::ItemAttributes* mutable_values();
  inline ::spotify::playlist4::proto::ItemAttributes* release_values();
  inline void set_allocated_values(::spotify::playlist4::proto::ItemAttributes* values);

  // repeated .spotify.playlist4.proto.ItemAttributeKind no_value = 2;
  inline int no_value_size() const;
  inline void clear_no_value();
  static const int kNoValueFieldNumber = 2;
  inline ::spotify::playlist4::proto::ItemAttributeKind no_value(int index) const;
  inline void set_no_value(int index, ::spotify::playlist4::proto::ItemAttributeKind value);
  inline void add_no_value(::spotify::playlist4::proto::ItemAttributeKind value);
  inline const ::google::protobuf::RepeatedField<int>& no_value() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_no_value();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ItemAttributesPartialState)
 private:
  inline void set_has_values();
  inline void clear_has_values();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::ItemAttributes* values_;
  ::google::protobuf::RepeatedField<int> no_value_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static ItemAttributesPartialState* default_instance_;
};
// -------------------------------------------------------------------

class ListAttributesPartialState : public ::google::protobuf::Message {
 public:
  ListAttributesPartialState();
  virtual ~ListAttributesPartialState();

  ListAttributesPartialState(const ListAttributesPartialState& from);

  inline ListAttributesPartialState& operator=(const ListAttributesPartialState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAttributesPartialState& default_instance();

  void Swap(ListAttributesPartialState* other);

  // implements Message ----------------------------------------------

  ListAttributesPartialState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListAttributesPartialState& from);
  void MergeFrom(const ListAttributesPartialState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .spotify.playlist4.proto.ListAttributes values = 1;
  inline bool has_values() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::spotify::playlist4::proto::ListAttributes& values() const;
  inline ::spotify::playlist4::proto::ListAttributes* mutable_values();
  inline ::spotify::playlist4::proto::ListAttributes* release_values();
  inline void set_allocated_values(::spotify::playlist4::proto::ListAttributes* values);

  // repeated .spotify.playlist4.proto.ListAttributeKind no_value = 2;
  inline int no_value_size() const;
  inline void clear_no_value();
  static const int kNoValueFieldNumber = 2;
  inline ::spotify::playlist4::proto::ListAttributeKind no_value(int index) const;
  inline void set_no_value(int index, ::spotify::playlist4::proto::ListAttributeKind value);
  inline void add_no_value(::spotify::playlist4::proto::ListAttributeKind value);
  inline const ::google::protobuf::RepeatedField<int>& no_value() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_no_value();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ListAttributesPartialState)
 private:
  inline void set_has_values();
  inline void clear_has_values();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::ListAttributes* values_;
  ::google::protobuf::RepeatedField<int> no_value_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static ListAttributesPartialState* default_instance_;
};
// -------------------------------------------------------------------

class UpdateItemAttributes : public ::google::protobuf::Message {
 public:
  UpdateItemAttributes();
  virtual ~UpdateItemAttributes();

  UpdateItemAttributes(const UpdateItemAttributes& from);

  inline UpdateItemAttributes& operator=(const UpdateItemAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateItemAttributes& default_instance();

  void Swap(UpdateItemAttributes* other);

  // implements Message ----------------------------------------------

  UpdateItemAttributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateItemAttributes& from);
  void MergeFrom(const UpdateItemAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required .spotify.playlist4.proto.ItemAttributesPartialState new_attributes = 2;
  inline bool has_new_attributes() const;
  inline void clear_new_attributes();
  static const int kNewAttributesFieldNumber = 2;
  inline const ::spotify::playlist4::proto::ItemAttributesPartialState& new_attributes() const;
  inline ::spotify::playlist4::proto::ItemAttributesPartialState* mutable_new_attributes();
  inline ::spotify::playlist4::proto::ItemAttributesPartialState* release_new_attributes();
  inline void set_allocated_new_attributes(::spotify::playlist4::proto::ItemAttributesPartialState* new_attributes);

  // optional .spotify.playlist4.proto.ItemAttributesPartialState old_attributes = 3;
  inline bool has_old_attributes() const;
  inline void clear_old_attributes();
  static const int kOldAttributesFieldNumber = 3;
  inline const ::spotify::playlist4::proto::ItemAttributesPartialState& old_attributes() const;
  inline ::spotify::playlist4::proto::ItemAttributesPartialState* mutable_old_attributes();
  inline ::spotify::playlist4::proto::ItemAttributesPartialState* release_old_attributes();
  inline void set_allocated_old_attributes(::spotify::playlist4::proto::ItemAttributesPartialState* old_attributes);

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  inline bool has_list_checksum() const;
  inline void clear_list_checksum();
  static const int kListChecksumFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ListChecksum& list_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_list_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_list_checksum();
  inline void set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum);

  // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 5;
  inline bool has_old_attributes_checksum() const;
  inline void clear_old_attributes_checksum();
  static const int kOldAttributesChecksumFieldNumber = 5;
  inline const ::spotify::playlist4::proto::ListChecksum& old_attributes_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_old_attributes_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_old_attributes_checksum();
  inline void set_allocated_old_attributes_checksum(::spotify::playlist4::proto::ListChecksum* old_attributes_checksum);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.UpdateItemAttributes)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_new_attributes();
  inline void clear_has_new_attributes();
  inline void set_has_old_attributes();
  inline void clear_has_old_attributes();
  inline void set_has_list_checksum();
  inline void clear_has_list_checksum();
  inline void set_has_old_attributes_checksum();
  inline void clear_has_old_attributes_checksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::ItemAttributesPartialState* new_attributes_;
  ::spotify::playlist4::proto::ItemAttributesPartialState* old_attributes_;
  ::spotify::playlist4::proto::ListChecksum* list_checksum_;
  ::spotify::playlist4::proto::ListChecksum* old_attributes_checksum_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static UpdateItemAttributes* default_instance_;
};
// -------------------------------------------------------------------

class UpdateListAttributes : public ::google::protobuf::Message {
 public:
  UpdateListAttributes();
  virtual ~UpdateListAttributes();

  UpdateListAttributes(const UpdateListAttributes& from);

  inline UpdateListAttributes& operator=(const UpdateListAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateListAttributes& default_instance();

  void Swap(UpdateListAttributes* other);

  // implements Message ----------------------------------------------

  UpdateListAttributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateListAttributes& from);
  void MergeFrom(const UpdateListAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .spotify.playlist4.proto.ListAttributesPartialState new_attributes = 1;
  inline bool has_new_attributes() const;
  inline void clear_new_attributes();
  static const int kNewAttributesFieldNumber = 1;
  inline const ::spotify::playlist4::proto::ListAttributesPartialState& new_attributes() const;
  inline ::spotify::playlist4::proto::ListAttributesPartialState* mutable_new_attributes();
  inline ::spotify::playlist4::proto::ListAttributesPartialState* release_new_attributes();
  inline void set_allocated_new_attributes(::spotify::playlist4::proto::ListAttributesPartialState* new_attributes);

  // optional .spotify.playlist4.proto.ListAttributesPartialState old_attributes = 2;
  inline bool has_old_attributes() const;
  inline void clear_old_attributes();
  static const int kOldAttributesFieldNumber = 2;
  inline const ::spotify::playlist4::proto::ListAttributesPartialState& old_attributes() const;
  inline ::spotify::playlist4::proto::ListAttributesPartialState* mutable_old_attributes();
  inline ::spotify::playlist4::proto::ListAttributesPartialState* release_old_attributes();
  inline void set_allocated_old_attributes(::spotify::playlist4::proto::ListAttributesPartialState* old_attributes);

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
  inline bool has_list_checksum() const;
  inline void clear_list_checksum();
  static const int kListChecksumFieldNumber = 3;
  inline const ::spotify::playlist4::proto::ListChecksum& list_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_list_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_list_checksum();
  inline void set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum);

  // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 4;
  inline bool has_old_attributes_checksum() const;
  inline void clear_old_attributes_checksum();
  static const int kOldAttributesChecksumFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ListChecksum& old_attributes_checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_old_attributes_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_old_attributes_checksum();
  inline void set_allocated_old_attributes_checksum(::spotify::playlist4::proto::ListChecksum* old_attributes_checksum);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.UpdateListAttributes)
 private:
  inline void set_has_new_attributes();
  inline void clear_has_new_attributes();
  inline void set_has_old_attributes();
  inline void clear_has_old_attributes();
  inline void set_has_list_checksum();
  inline void clear_has_list_checksum();
  inline void set_has_old_attributes_checksum();
  inline void clear_has_old_attributes_checksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::ListAttributesPartialState* new_attributes_;
  ::spotify::playlist4::proto::ListAttributesPartialState* old_attributes_;
  ::spotify::playlist4::proto::ListChecksum* list_checksum_;
  ::spotify::playlist4::proto::ListChecksum* old_attributes_checksum_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static UpdateListAttributes* default_instance_;
};
// -------------------------------------------------------------------

class Op : public ::google::protobuf::Message {
 public:
  Op();
  virtual ~Op();

  Op(const Op& from);

  inline Op& operator=(const Op& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Op& default_instance();

  void Swap(Op* other);

  // implements Message ----------------------------------------------

  Op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Op& from);
  void MergeFrom(const Op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Op_Kind Kind;
  static const Kind KIND_UNKNOWN = Op_Kind_KIND_UNKNOWN;
  static const Kind ADD = Op_Kind_ADD;
  static const Kind REM = Op_Kind_REM;
  static const Kind MOV = Op_Kind_MOV;
  static const Kind UPDATE_ITEM_ATTRIBUTES = Op_Kind_UPDATE_ITEM_ATTRIBUTES;
  static const Kind UPDATE_LIST_ATTRIBUTES = Op_Kind_UPDATE_LIST_ATTRIBUTES;
  static inline bool Kind_IsValid(int value) {
    return Op_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Op_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Op_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Op_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Op_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Op_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Op_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .spotify.playlist4.proto.Op.Kind kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::spotify::playlist4::proto::Op_Kind kind() const;
  inline void set_kind(::spotify::playlist4::proto::Op_Kind value);

  // optional .spotify.playlist4.proto.Add add = 2;
  inline bool has_add() const;
  inline void clear_add();
  static const int kAddFieldNumber = 2;
  inline const ::spotify::playlist4::proto::Add& add() const;
  inline ::spotify::playlist4::proto::Add* mutable_add();
  inline ::spotify::playlist4::proto::Add* release_add();
  inline void set_allocated_add(::spotify::playlist4::proto::Add* add);

  // optional .spotify.playlist4.proto.Rem rem = 3;
  inline bool has_rem() const;
  inline void clear_rem();
  static const int kRemFieldNumber = 3;
  inline const ::spotify::playlist4::proto::Rem& rem() const;
  inline ::spotify::playlist4::proto::Rem* mutable_rem();
  inline ::spotify::playlist4::proto::Rem* release_rem();
  inline void set_allocated_rem(::spotify::playlist4::proto::Rem* rem);

  // optional .spotify.playlist4.proto.Mov mov = 4;
  inline bool has_mov() const;
  inline void clear_mov();
  static const int kMovFieldNumber = 4;
  inline const ::spotify::playlist4::proto::Mov& mov() const;
  inline ::spotify::playlist4::proto::Mov* mutable_mov();
  inline ::spotify::playlist4::proto::Mov* release_mov();
  inline void set_allocated_mov(::spotify::playlist4::proto::Mov* mov);

  // optional .spotify.playlist4.proto.UpdateItemAttributes update_item_attributes = 5;
  inline bool has_update_item_attributes() const;
  inline void clear_update_item_attributes();
  static const int kUpdateItemAttributesFieldNumber = 5;
  inline const ::spotify::playlist4::proto::UpdateItemAttributes& update_item_attributes() const;
  inline ::spotify::playlist4::proto::UpdateItemAttributes* mutable_update_item_attributes();
  inline ::spotify::playlist4::proto::UpdateItemAttributes* release_update_item_attributes();
  inline void set_allocated_update_item_attributes(::spotify::playlist4::proto::UpdateItemAttributes* update_item_attributes);

  // optional .spotify.playlist4.proto.UpdateListAttributes update_list_attributes = 6;
  inline bool has_update_list_attributes() const;
  inline void clear_update_list_attributes();
  static const int kUpdateListAttributesFieldNumber = 6;
  inline const ::spotify::playlist4::proto::UpdateListAttributes& update_list_attributes() const;
  inline ::spotify::playlist4::proto::UpdateListAttributes* mutable_update_list_attributes();
  inline ::spotify::playlist4::proto::UpdateListAttributes* release_update_list_attributes();
  inline void set_allocated_update_list_attributes(::spotify::playlist4::proto::UpdateListAttributes* update_list_attributes);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Op)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_add();
  inline void clear_has_add();
  inline void set_has_rem();
  inline void clear_has_rem();
  inline void set_has_mov();
  inline void clear_has_mov();
  inline void set_has_update_item_attributes();
  inline void clear_has_update_item_attributes();
  inline void set_has_update_list_attributes();
  inline void clear_has_update_list_attributes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::Add* add_;
  ::spotify::playlist4::proto::Rem* rem_;
  ::spotify::playlist4::proto::Mov* mov_;
  ::spotify::playlist4::proto::UpdateItemAttributes* update_item_attributes_;
  ::spotify::playlist4::proto::UpdateListAttributes* update_list_attributes_;
  int kind_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static Op* default_instance_;
};
// -------------------------------------------------------------------

class OpList : public ::google::protobuf::Message {
 public:
  OpList();
  virtual ~OpList();

  OpList(const OpList& from);

  inline OpList& operator=(const OpList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpList& default_instance();

  void Swap(OpList* other);

  // implements Message ----------------------------------------------

  OpList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpList& from);
  void MergeFrom(const OpList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .spotify.playlist4.proto.Op ops = 1;
  inline int ops_size() const;
  inline void clear_ops();
  static const int kOpsFieldNumber = 1;
  inline const ::spotify::playlist4::proto::Op& ops(int index) const;
  inline ::spotify::playlist4::proto::Op* mutable_ops(int index);
  inline ::spotify::playlist4::proto::Op* add_ops();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >&
      ops() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >*
      mutable_ops();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.OpList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op > ops_;
  friend void  protobuf_AddDesc_playlist4ops_2eproto();
  friend void protobuf_AssignDesc_playlist4ops_2eproto();
  friend void protobuf_ShutdownFile_playlist4ops_2eproto();

  void InitAsDefaultInstance();
  static OpList* default_instance_;
};
// ===================================================================


// ===================================================================

// Add

// optional int32 fromIndex = 1;
inline bool Add::has_fromindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Add::set_has_fromindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Add::clear_has_fromindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Add::clear_fromindex() {
  fromindex_ = 0;
  clear_has_fromindex();
}
inline ::google::protobuf::int32 Add::fromindex() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Add.fromIndex)
  return fromindex_;
}
inline void Add::set_fromindex(::google::protobuf::int32 value) {
  set_has_fromindex();
  fromindex_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Add.fromIndex)
}

// repeated .spotify.playlist4.proto.Item items = 2;
inline int Add::items_size() const {
  return items_.size();
}
inline void Add::clear_items() {
  items_.Clear();
}
inline const ::spotify::playlist4::proto::Item& Add::items(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Add.items)
  return items_.Get(index);
}
inline ::spotify::playlist4::proto::Item* Add::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Add.items)
  return items_.Mutable(index);
}
inline ::spotify::playlist4::proto::Item* Add::add_items() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.Add.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >&
Add::items() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.Add.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >*
Add::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.Add.items)
  return &items_;
}

// optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
inline bool Add::has_list_checksum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Add::set_has_list_checksum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Add::clear_has_list_checksum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Add::clear_list_checksum() {
  if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_list_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& Add::list_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Add.list_checksum)
  return list_checksum_ != NULL ? *list_checksum_ : *default_instance_->list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Add::mutable_list_checksum() {
  set_has_list_checksum();
  if (list_checksum_ == NULL) list_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Add.list_checksum)
  return list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Add::release_list_checksum() {
  clear_has_list_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = list_checksum_;
  list_checksum_ = NULL;
  return temp;
}
inline void Add::set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum) {
  delete list_checksum_;
  list_checksum_ = list_checksum;
  if (list_checksum) {
    set_has_list_checksum();
  } else {
    clear_has_list_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Add.list_checksum)
}

// optional bool addLast = 4;
inline bool Add::has_addlast() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Add::set_has_addlast() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Add::clear_has_addlast() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Add::clear_addlast() {
  addlast_ = false;
  clear_has_addlast();
}
inline bool Add::addlast() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Add.addLast)
  return addlast_;
}
inline void Add::set_addlast(bool value) {
  set_has_addlast();
  addlast_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Add.addLast)
}

// optional bool addFirst = 5;
inline bool Add::has_addfirst() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Add::set_has_addfirst() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Add::clear_has_addfirst() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Add::clear_addfirst() {
  addfirst_ = false;
  clear_has_addfirst();
}
inline bool Add::addfirst() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Add.addFirst)
  return addfirst_;
}
inline void Add::set_addfirst(bool value) {
  set_has_addfirst();
  addfirst_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Add.addFirst)
}

// -------------------------------------------------------------------

// Rem

// optional int32 fromIndex = 1;
inline bool Rem::has_fromindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rem::set_has_fromindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rem::clear_has_fromindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rem::clear_fromindex() {
  fromindex_ = 0;
  clear_has_fromindex();
}
inline ::google::protobuf::int32 Rem::fromindex() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Rem.fromIndex)
  return fromindex_;
}
inline void Rem::set_fromindex(::google::protobuf::int32 value) {
  set_has_fromindex();
  fromindex_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Rem.fromIndex)
}

// optional int32 length = 2;
inline bool Rem::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rem::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rem::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rem::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 Rem::length() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Rem.length)
  return length_;
}
inline void Rem::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Rem.length)
}

// repeated .spotify.playlist4.proto.Item items = 3;
inline int Rem::items_size() const {
  return items_.size();
}
inline void Rem::clear_items() {
  items_.Clear();
}
inline const ::spotify::playlist4::proto::Item& Rem::items(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Rem.items)
  return items_.Get(index);
}
inline ::spotify::playlist4::proto::Item* Rem::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Rem.items)
  return items_.Mutable(index);
}
inline ::spotify::playlist4::proto::Item* Rem::add_items() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.Rem.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >&
Rem::items() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.Rem.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >*
Rem::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.Rem.items)
  return &items_;
}

// optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
inline bool Rem::has_list_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rem::set_has_list_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rem::clear_has_list_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rem::clear_list_checksum() {
  if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_list_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& Rem::list_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Rem.list_checksum)
  return list_checksum_ != NULL ? *list_checksum_ : *default_instance_->list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Rem::mutable_list_checksum() {
  set_has_list_checksum();
  if (list_checksum_ == NULL) list_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Rem.list_checksum)
  return list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Rem::release_list_checksum() {
  clear_has_list_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = list_checksum_;
  list_checksum_ = NULL;
  return temp;
}
inline void Rem::set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum) {
  delete list_checksum_;
  list_checksum_ = list_checksum;
  if (list_checksum) {
    set_has_list_checksum();
  } else {
    clear_has_list_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Rem.list_checksum)
}

// optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
inline bool Rem::has_items_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Rem::set_has_items_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Rem::clear_has_items_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Rem::clear_items_checksum() {
  if (items_checksum_ != NULL) items_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_items_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& Rem::items_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Rem.items_checksum)
  return items_checksum_ != NULL ? *items_checksum_ : *default_instance_->items_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Rem::mutable_items_checksum() {
  set_has_items_checksum();
  if (items_checksum_ == NULL) items_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Rem.items_checksum)
  return items_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Rem::release_items_checksum() {
  clear_has_items_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = items_checksum_;
  items_checksum_ = NULL;
  return temp;
}
inline void Rem::set_allocated_items_checksum(::spotify::playlist4::proto::ListChecksum* items_checksum) {
  delete items_checksum_;
  items_checksum_ = items_checksum;
  if (items_checksum) {
    set_has_items_checksum();
  } else {
    clear_has_items_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Rem.items_checksum)
}

// optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
inline bool Rem::has_uris_checksum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Rem::set_has_uris_checksum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Rem::clear_has_uris_checksum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Rem::clear_uris_checksum() {
  if (uris_checksum_ != NULL) uris_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_uris_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& Rem::uris_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Rem.uris_checksum)
  return uris_checksum_ != NULL ? *uris_checksum_ : *default_instance_->uris_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Rem::mutable_uris_checksum() {
  set_has_uris_checksum();
  if (uris_checksum_ == NULL) uris_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Rem.uris_checksum)
  return uris_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Rem::release_uris_checksum() {
  clear_has_uris_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = uris_checksum_;
  uris_checksum_ = NULL;
  return temp;
}
inline void Rem::set_allocated_uris_checksum(::spotify::playlist4::proto::ListChecksum* uris_checksum) {
  delete uris_checksum_;
  uris_checksum_ = uris_checksum;
  if (uris_checksum) {
    set_has_uris_checksum();
  } else {
    clear_has_uris_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Rem.uris_checksum)
}

// optional bool itemsAsKey = 7;
inline bool Rem::has_itemsaskey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Rem::set_has_itemsaskey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Rem::clear_has_itemsaskey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Rem::clear_itemsaskey() {
  itemsaskey_ = false;
  clear_has_itemsaskey();
}
inline bool Rem::itemsaskey() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Rem.itemsAsKey)
  return itemsaskey_;
}
inline void Rem::set_itemsaskey(bool value) {
  set_has_itemsaskey();
  itemsaskey_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Rem.itemsAsKey)
}

// -------------------------------------------------------------------

// Mov

// required int32 fromIndex = 1;
inline bool Mov::has_fromindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mov::set_has_fromindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mov::clear_has_fromindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mov::clear_fromindex() {
  fromindex_ = 0;
  clear_has_fromindex();
}
inline ::google::protobuf::int32 Mov::fromindex() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Mov.fromIndex)
  return fromindex_;
}
inline void Mov::set_fromindex(::google::protobuf::int32 value) {
  set_has_fromindex();
  fromindex_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Mov.fromIndex)
}

// required int32 length = 2;
inline bool Mov::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mov::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mov::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mov::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 Mov::length() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Mov.length)
  return length_;
}
inline void Mov::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Mov.length)
}

// required int32 toIndex = 3;
inline bool Mov::has_toindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mov::set_has_toindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mov::clear_has_toindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mov::clear_toindex() {
  toindex_ = 0;
  clear_has_toindex();
}
inline ::google::protobuf::int32 Mov::toindex() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Mov.toIndex)
  return toindex_;
}
inline void Mov::set_toindex(::google::protobuf::int32 value) {
  set_has_toindex();
  toindex_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Mov.toIndex)
}

// optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
inline bool Mov::has_list_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mov::set_has_list_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mov::clear_has_list_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mov::clear_list_checksum() {
  if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_list_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& Mov::list_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Mov.list_checksum)
  return list_checksum_ != NULL ? *list_checksum_ : *default_instance_->list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Mov::mutable_list_checksum() {
  set_has_list_checksum();
  if (list_checksum_ == NULL) list_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Mov.list_checksum)
  return list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Mov::release_list_checksum() {
  clear_has_list_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = list_checksum_;
  list_checksum_ = NULL;
  return temp;
}
inline void Mov::set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum) {
  delete list_checksum_;
  list_checksum_ = list_checksum;
  if (list_checksum) {
    set_has_list_checksum();
  } else {
    clear_has_list_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Mov.list_checksum)
}

// optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
inline bool Mov::has_items_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mov::set_has_items_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mov::clear_has_items_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mov::clear_items_checksum() {
  if (items_checksum_ != NULL) items_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_items_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& Mov::items_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Mov.items_checksum)
  return items_checksum_ != NULL ? *items_checksum_ : *default_instance_->items_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Mov::mutable_items_checksum() {
  set_has_items_checksum();
  if (items_checksum_ == NULL) items_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Mov.items_checksum)
  return items_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Mov::release_items_checksum() {
  clear_has_items_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = items_checksum_;
  items_checksum_ = NULL;
  return temp;
}
inline void Mov::set_allocated_items_checksum(::spotify::playlist4::proto::ListChecksum* items_checksum) {
  delete items_checksum_;
  items_checksum_ = items_checksum;
  if (items_checksum) {
    set_has_items_checksum();
  } else {
    clear_has_items_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Mov.items_checksum)
}

// optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
inline bool Mov::has_uris_checksum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mov::set_has_uris_checksum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mov::clear_has_uris_checksum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mov::clear_uris_checksum() {
  if (uris_checksum_ != NULL) uris_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_uris_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& Mov::uris_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Mov.uris_checksum)
  return uris_checksum_ != NULL ? *uris_checksum_ : *default_instance_->uris_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Mov::mutable_uris_checksum() {
  set_has_uris_checksum();
  if (uris_checksum_ == NULL) uris_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Mov.uris_checksum)
  return uris_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* Mov::release_uris_checksum() {
  clear_has_uris_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = uris_checksum_;
  uris_checksum_ = NULL;
  return temp;
}
inline void Mov::set_allocated_uris_checksum(::spotify::playlist4::proto::ListChecksum* uris_checksum) {
  delete uris_checksum_;
  uris_checksum_ = uris_checksum;
  if (uris_checksum) {
    set_has_uris_checksum();
  } else {
    clear_has_uris_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Mov.uris_checksum)
}

// -------------------------------------------------------------------

// ItemAttributesPartialState

// required .spotify.playlist4.proto.ItemAttributes values = 1;
inline bool ItemAttributesPartialState::has_values() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemAttributesPartialState::set_has_values() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemAttributesPartialState::clear_has_values() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemAttributesPartialState::clear_values() {
  if (values_ != NULL) values_->::spotify::playlist4::proto::ItemAttributes::Clear();
  clear_has_values();
}
inline const ::spotify::playlist4::proto::ItemAttributes& ItemAttributesPartialState::values() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ItemAttributesPartialState.values)
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
inline ::spotify::playlist4::proto::ItemAttributes* ItemAttributesPartialState::mutable_values() {
  set_has_values();
  if (values_ == NULL) values_ = new ::spotify::playlist4::proto::ItemAttributes;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ItemAttributesPartialState.values)
  return values_;
}
inline ::spotify::playlist4::proto::ItemAttributes* ItemAttributesPartialState::release_values() {
  clear_has_values();
  ::spotify::playlist4::proto::ItemAttributes* temp = values_;
  values_ = NULL;
  return temp;
}
inline void ItemAttributesPartialState::set_allocated_values(::spotify::playlist4::proto::ItemAttributes* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ItemAttributesPartialState.values)
}

// repeated .spotify.playlist4.proto.ItemAttributeKind no_value = 2;
inline int ItemAttributesPartialState::no_value_size() const {
  return no_value_.size();
}
inline void ItemAttributesPartialState::clear_no_value() {
  no_value_.Clear();
}
inline ::spotify::playlist4::proto::ItemAttributeKind ItemAttributesPartialState::no_value(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ItemAttributesPartialState.no_value)
  return static_cast< ::spotify::playlist4::proto::ItemAttributeKind >(no_value_.Get(index));
}
inline void ItemAttributesPartialState::set_no_value(int index, ::spotify::playlist4::proto::ItemAttributeKind value) {
  assert(::spotify::playlist4::proto::ItemAttributeKind_IsValid(value));
  no_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ItemAttributesPartialState.no_value)
}
inline void ItemAttributesPartialState::add_no_value(::spotify::playlist4::proto::ItemAttributeKind value) {
  assert(::spotify::playlist4::proto::ItemAttributeKind_IsValid(value));
  no_value_.Add(value);
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.ItemAttributesPartialState.no_value)
}
inline const ::google::protobuf::RepeatedField<int>&
ItemAttributesPartialState::no_value() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.ItemAttributesPartialState.no_value)
  return no_value_;
}
inline ::google::protobuf::RepeatedField<int>*
ItemAttributesPartialState::mutable_no_value() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.ItemAttributesPartialState.no_value)
  return &no_value_;
}

// -------------------------------------------------------------------

// ListAttributesPartialState

// required .spotify.playlist4.proto.ListAttributes values = 1;
inline bool ListAttributesPartialState::has_values() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListAttributesPartialState::set_has_values() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListAttributesPartialState::clear_has_values() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListAttributesPartialState::clear_values() {
  if (values_ != NULL) values_->::spotify::playlist4::proto::ListAttributes::Clear();
  clear_has_values();
}
inline const ::spotify::playlist4::proto::ListAttributes& ListAttributesPartialState::values() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributesPartialState.values)
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
inline ::spotify::playlist4::proto::ListAttributes* ListAttributesPartialState::mutable_values() {
  set_has_values();
  if (values_ == NULL) values_ = new ::spotify::playlist4::proto::ListAttributes;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListAttributesPartialState.values)
  return values_;
}
inline ::spotify::playlist4::proto::ListAttributes* ListAttributesPartialState::release_values() {
  clear_has_values();
  ::spotify::playlist4::proto::ListAttributes* temp = values_;
  values_ = NULL;
  return temp;
}
inline void ListAttributesPartialState::set_allocated_values(::spotify::playlist4::proto::ListAttributes* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListAttributesPartialState.values)
}

// repeated .spotify.playlist4.proto.ListAttributeKind no_value = 2;
inline int ListAttributesPartialState::no_value_size() const {
  return no_value_.size();
}
inline void ListAttributesPartialState::clear_no_value() {
  no_value_.Clear();
}
inline ::spotify::playlist4::proto::ListAttributeKind ListAttributesPartialState::no_value(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributesPartialState.no_value)
  return static_cast< ::spotify::playlist4::proto::ListAttributeKind >(no_value_.Get(index));
}
inline void ListAttributesPartialState::set_no_value(int index, ::spotify::playlist4::proto::ListAttributeKind value) {
  assert(::spotify::playlist4::proto::ListAttributeKind_IsValid(value));
  no_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListAttributesPartialState.no_value)
}
inline void ListAttributesPartialState::add_no_value(::spotify::playlist4::proto::ListAttributeKind value) {
  assert(::spotify::playlist4::proto::ListAttributeKind_IsValid(value));
  no_value_.Add(value);
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.ListAttributesPartialState.no_value)
}
inline const ::google::protobuf::RepeatedField<int>&
ListAttributesPartialState::no_value() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.ListAttributesPartialState.no_value)
  return no_value_;
}
inline ::google::protobuf::RepeatedField<int>*
ListAttributesPartialState::mutable_no_value() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.ListAttributesPartialState.no_value)
  return &no_value_;
}

// -------------------------------------------------------------------

// UpdateItemAttributes

// required int32 index = 1;
inline bool UpdateItemAttributes::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateItemAttributes::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateItemAttributes::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateItemAttributes::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 UpdateItemAttributes::index() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateItemAttributes.index)
  return index_;
}
inline void UpdateItemAttributes::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.UpdateItemAttributes.index)
}

// required .spotify.playlist4.proto.ItemAttributesPartialState new_attributes = 2;
inline bool UpdateItemAttributes::has_new_attributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateItemAttributes::set_has_new_attributes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateItemAttributes::clear_has_new_attributes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateItemAttributes::clear_new_attributes() {
  if (new_attributes_ != NULL) new_attributes_->::spotify::playlist4::proto::ItemAttributesPartialState::Clear();
  clear_has_new_attributes();
}
inline const ::spotify::playlist4::proto::ItemAttributesPartialState& UpdateItemAttributes::new_attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateItemAttributes.new_attributes)
  return new_attributes_ != NULL ? *new_attributes_ : *default_instance_->new_attributes_;
}
inline ::spotify::playlist4::proto::ItemAttributesPartialState* UpdateItemAttributes::mutable_new_attributes() {
  set_has_new_attributes();
  if (new_attributes_ == NULL) new_attributes_ = new ::spotify::playlist4::proto::ItemAttributesPartialState;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdateItemAttributes.new_attributes)
  return new_attributes_;
}
inline ::spotify::playlist4::proto::ItemAttributesPartialState* UpdateItemAttributes::release_new_attributes() {
  clear_has_new_attributes();
  ::spotify::playlist4::proto::ItemAttributesPartialState* temp = new_attributes_;
  new_attributes_ = NULL;
  return temp;
}
inline void UpdateItemAttributes::set_allocated_new_attributes(::spotify::playlist4::proto::ItemAttributesPartialState* new_attributes) {
  delete new_attributes_;
  new_attributes_ = new_attributes;
  if (new_attributes) {
    set_has_new_attributes();
  } else {
    clear_has_new_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdateItemAttributes.new_attributes)
}

// optional .spotify.playlist4.proto.ItemAttributesPartialState old_attributes = 3;
inline bool UpdateItemAttributes::has_old_attributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateItemAttributes::set_has_old_attributes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateItemAttributes::clear_has_old_attributes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateItemAttributes::clear_old_attributes() {
  if (old_attributes_ != NULL) old_attributes_->::spotify::playlist4::proto::ItemAttributesPartialState::Clear();
  clear_has_old_attributes();
}
inline const ::spotify::playlist4::proto::ItemAttributesPartialState& UpdateItemAttributes::old_attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateItemAttributes.old_attributes)
  return old_attributes_ != NULL ? *old_attributes_ : *default_instance_->old_attributes_;
}
inline ::spotify::playlist4::proto::ItemAttributesPartialState* UpdateItemAttributes::mutable_old_attributes() {
  set_has_old_attributes();
  if (old_attributes_ == NULL) old_attributes_ = new ::spotify::playlist4::proto::ItemAttributesPartialState;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdateItemAttributes.old_attributes)
  return old_attributes_;
}
inline ::spotify::playlist4::proto::ItemAttributesPartialState* UpdateItemAttributes::release_old_attributes() {
  clear_has_old_attributes();
  ::spotify::playlist4::proto::ItemAttributesPartialState* temp = old_attributes_;
  old_attributes_ = NULL;
  return temp;
}
inline void UpdateItemAttributes::set_allocated_old_attributes(::spotify::playlist4::proto::ItemAttributesPartialState* old_attributes) {
  delete old_attributes_;
  old_attributes_ = old_attributes;
  if (old_attributes) {
    set_has_old_attributes();
  } else {
    clear_has_old_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdateItemAttributes.old_attributes)
}

// optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
inline bool UpdateItemAttributes::has_list_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateItemAttributes::set_has_list_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateItemAttributes::clear_has_list_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateItemAttributes::clear_list_checksum() {
  if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_list_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& UpdateItemAttributes::list_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateItemAttributes.list_checksum)
  return list_checksum_ != NULL ? *list_checksum_ : *default_instance_->list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* UpdateItemAttributes::mutable_list_checksum() {
  set_has_list_checksum();
  if (list_checksum_ == NULL) list_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdateItemAttributes.list_checksum)
  return list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* UpdateItemAttributes::release_list_checksum() {
  clear_has_list_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = list_checksum_;
  list_checksum_ = NULL;
  return temp;
}
inline void UpdateItemAttributes::set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum) {
  delete list_checksum_;
  list_checksum_ = list_checksum;
  if (list_checksum) {
    set_has_list_checksum();
  } else {
    clear_has_list_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdateItemAttributes.list_checksum)
}

// optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 5;
inline bool UpdateItemAttributes::has_old_attributes_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateItemAttributes::set_has_old_attributes_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateItemAttributes::clear_has_old_attributes_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateItemAttributes::clear_old_attributes_checksum() {
  if (old_attributes_checksum_ != NULL) old_attributes_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_old_attributes_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& UpdateItemAttributes::old_attributes_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateItemAttributes.old_attributes_checksum)
  return old_attributes_checksum_ != NULL ? *old_attributes_checksum_ : *default_instance_->old_attributes_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* UpdateItemAttributes::mutable_old_attributes_checksum() {
  set_has_old_attributes_checksum();
  if (old_attributes_checksum_ == NULL) old_attributes_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdateItemAttributes.old_attributes_checksum)
  return old_attributes_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* UpdateItemAttributes::release_old_attributes_checksum() {
  clear_has_old_attributes_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = old_attributes_checksum_;
  old_attributes_checksum_ = NULL;
  return temp;
}
inline void UpdateItemAttributes::set_allocated_old_attributes_checksum(::spotify::playlist4::proto::ListChecksum* old_attributes_checksum) {
  delete old_attributes_checksum_;
  old_attributes_checksum_ = old_attributes_checksum;
  if (old_attributes_checksum) {
    set_has_old_attributes_checksum();
  } else {
    clear_has_old_attributes_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdateItemAttributes.old_attributes_checksum)
}

// -------------------------------------------------------------------

// UpdateListAttributes

// required .spotify.playlist4.proto.ListAttributesPartialState new_attributes = 1;
inline bool UpdateListAttributes::has_new_attributes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateListAttributes::set_has_new_attributes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateListAttributes::clear_has_new_attributes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateListAttributes::clear_new_attributes() {
  if (new_attributes_ != NULL) new_attributes_->::spotify::playlist4::proto::ListAttributesPartialState::Clear();
  clear_has_new_attributes();
}
inline const ::spotify::playlist4::proto::ListAttributesPartialState& UpdateListAttributes::new_attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateListAttributes.new_attributes)
  return new_attributes_ != NULL ? *new_attributes_ : *default_instance_->new_attributes_;
}
inline ::spotify::playlist4::proto::ListAttributesPartialState* UpdateListAttributes::mutable_new_attributes() {
  set_has_new_attributes();
  if (new_attributes_ == NULL) new_attributes_ = new ::spotify::playlist4::proto::ListAttributesPartialState;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdateListAttributes.new_attributes)
  return new_attributes_;
}
inline ::spotify::playlist4::proto::ListAttributesPartialState* UpdateListAttributes::release_new_attributes() {
  clear_has_new_attributes();
  ::spotify::playlist4::proto::ListAttributesPartialState* temp = new_attributes_;
  new_attributes_ = NULL;
  return temp;
}
inline void UpdateListAttributes::set_allocated_new_attributes(::spotify::playlist4::proto::ListAttributesPartialState* new_attributes) {
  delete new_attributes_;
  new_attributes_ = new_attributes;
  if (new_attributes) {
    set_has_new_attributes();
  } else {
    clear_has_new_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdateListAttributes.new_attributes)
}

// optional .spotify.playlist4.proto.ListAttributesPartialState old_attributes = 2;
inline bool UpdateListAttributes::has_old_attributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateListAttributes::set_has_old_attributes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateListAttributes::clear_has_old_attributes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateListAttributes::clear_old_attributes() {
  if (old_attributes_ != NULL) old_attributes_->::spotify::playlist4::proto::ListAttributesPartialState::Clear();
  clear_has_old_attributes();
}
inline const ::spotify::playlist4::proto::ListAttributesPartialState& UpdateListAttributes::old_attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateListAttributes.old_attributes)
  return old_attributes_ != NULL ? *old_attributes_ : *default_instance_->old_attributes_;
}
inline ::spotify::playlist4::proto::ListAttributesPartialState* UpdateListAttributes::mutable_old_attributes() {
  set_has_old_attributes();
  if (old_attributes_ == NULL) old_attributes_ = new ::spotify::playlist4::proto::ListAttributesPartialState;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdateListAttributes.old_attributes)
  return old_attributes_;
}
inline ::spotify::playlist4::proto::ListAttributesPartialState* UpdateListAttributes::release_old_attributes() {
  clear_has_old_attributes();
  ::spotify::playlist4::proto::ListAttributesPartialState* temp = old_attributes_;
  old_attributes_ = NULL;
  return temp;
}
inline void UpdateListAttributes::set_allocated_old_attributes(::spotify::playlist4::proto::ListAttributesPartialState* old_attributes) {
  delete old_attributes_;
  old_attributes_ = old_attributes;
  if (old_attributes) {
    set_has_old_attributes();
  } else {
    clear_has_old_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdateListAttributes.old_attributes)
}

// optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
inline bool UpdateListAttributes::has_list_checksum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateListAttributes::set_has_list_checksum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateListAttributes::clear_has_list_checksum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateListAttributes::clear_list_checksum() {
  if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_list_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& UpdateListAttributes::list_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateListAttributes.list_checksum)
  return list_checksum_ != NULL ? *list_checksum_ : *default_instance_->list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* UpdateListAttributes::mutable_list_checksum() {
  set_has_list_checksum();
  if (list_checksum_ == NULL) list_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdateListAttributes.list_checksum)
  return list_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* UpdateListAttributes::release_list_checksum() {
  clear_has_list_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = list_checksum_;
  list_checksum_ = NULL;
  return temp;
}
inline void UpdateListAttributes::set_allocated_list_checksum(::spotify::playlist4::proto::ListChecksum* list_checksum) {
  delete list_checksum_;
  list_checksum_ = list_checksum;
  if (list_checksum) {
    set_has_list_checksum();
  } else {
    clear_has_list_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdateListAttributes.list_checksum)
}

// optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 4;
inline bool UpdateListAttributes::has_old_attributes_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateListAttributes::set_has_old_attributes_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateListAttributes::clear_has_old_attributes_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateListAttributes::clear_old_attributes_checksum() {
  if (old_attributes_checksum_ != NULL) old_attributes_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_old_attributes_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& UpdateListAttributes::old_attributes_checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdateListAttributes.old_attributes_checksum)
  return old_attributes_checksum_ != NULL ? *old_attributes_checksum_ : *default_instance_->old_attributes_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* UpdateListAttributes::mutable_old_attributes_checksum() {
  set_has_old_attributes_checksum();
  if (old_attributes_checksum_ == NULL) old_attributes_checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdateListAttributes.old_attributes_checksum)
  return old_attributes_checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* UpdateListAttributes::release_old_attributes_checksum() {
  clear_has_old_attributes_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = old_attributes_checksum_;
  old_attributes_checksum_ = NULL;
  return temp;
}
inline void UpdateListAttributes::set_allocated_old_attributes_checksum(::spotify::playlist4::proto::ListChecksum* old_attributes_checksum) {
  delete old_attributes_checksum_;
  old_attributes_checksum_ = old_attributes_checksum;
  if (old_attributes_checksum) {
    set_has_old_attributes_checksum();
  } else {
    clear_has_old_attributes_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdateListAttributes.old_attributes_checksum)
}

// -------------------------------------------------------------------

// Op

// required .spotify.playlist4.proto.Op.Kind kind = 1;
inline bool Op::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Op::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Op::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Op::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::spotify::playlist4::proto::Op_Kind Op::kind() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Op.kind)
  return static_cast< ::spotify::playlist4::proto::Op_Kind >(kind_);
}
inline void Op::set_kind(::spotify::playlist4::proto::Op_Kind value) {
  assert(::spotify::playlist4::proto::Op_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Op.kind)
}

// optional .spotify.playlist4.proto.Add add = 2;
inline bool Op::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Op::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Op::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Op::clear_add() {
  if (add_ != NULL) add_->::spotify::playlist4::proto::Add::Clear();
  clear_has_add();
}
inline const ::spotify::playlist4::proto::Add& Op::add() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Op.add)
  return add_ != NULL ? *add_ : *default_instance_->add_;
}
inline ::spotify::playlist4::proto::Add* Op::mutable_add() {
  set_has_add();
  if (add_ == NULL) add_ = new ::spotify::playlist4::proto::Add;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Op.add)
  return add_;
}
inline ::spotify::playlist4::proto::Add* Op::release_add() {
  clear_has_add();
  ::spotify::playlist4::proto::Add* temp = add_;
  add_ = NULL;
  return temp;
}
inline void Op::set_allocated_add(::spotify::playlist4::proto::Add* add) {
  delete add_;
  add_ = add;
  if (add) {
    set_has_add();
  } else {
    clear_has_add();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Op.add)
}

// optional .spotify.playlist4.proto.Rem rem = 3;
inline bool Op::has_rem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Op::set_has_rem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Op::clear_has_rem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Op::clear_rem() {
  if (rem_ != NULL) rem_->::spotify::playlist4::proto::Rem::Clear();
  clear_has_rem();
}
inline const ::spotify::playlist4::proto::Rem& Op::rem() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Op.rem)
  return rem_ != NULL ? *rem_ : *default_instance_->rem_;
}
inline ::spotify::playlist4::proto::Rem* Op::mutable_rem() {
  set_has_rem();
  if (rem_ == NULL) rem_ = new ::spotify::playlist4::proto::Rem;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Op.rem)
  return rem_;
}
inline ::spotify::playlist4::proto::Rem* Op::release_rem() {
  clear_has_rem();
  ::spotify::playlist4::proto::Rem* temp = rem_;
  rem_ = NULL;
  return temp;
}
inline void Op::set_allocated_rem(::spotify::playlist4::proto::Rem* rem) {
  delete rem_;
  rem_ = rem;
  if (rem) {
    set_has_rem();
  } else {
    clear_has_rem();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Op.rem)
}

// optional .spotify.playlist4.proto.Mov mov = 4;
inline bool Op::has_mov() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Op::set_has_mov() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Op::clear_has_mov() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Op::clear_mov() {
  if (mov_ != NULL) mov_->::spotify::playlist4::proto::Mov::Clear();
  clear_has_mov();
}
inline const ::spotify::playlist4::proto::Mov& Op::mov() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Op.mov)
  return mov_ != NULL ? *mov_ : *default_instance_->mov_;
}
inline ::spotify::playlist4::proto::Mov* Op::mutable_mov() {
  set_has_mov();
  if (mov_ == NULL) mov_ = new ::spotify::playlist4::proto::Mov;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Op.mov)
  return mov_;
}
inline ::spotify::playlist4::proto::Mov* Op::release_mov() {
  clear_has_mov();
  ::spotify::playlist4::proto::Mov* temp = mov_;
  mov_ = NULL;
  return temp;
}
inline void Op::set_allocated_mov(::spotify::playlist4::proto::Mov* mov) {
  delete mov_;
  mov_ = mov;
  if (mov) {
    set_has_mov();
  } else {
    clear_has_mov();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Op.mov)
}

// optional .spotify.playlist4.proto.UpdateItemAttributes update_item_attributes = 5;
inline bool Op::has_update_item_attributes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Op::set_has_update_item_attributes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Op::clear_has_update_item_attributes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Op::clear_update_item_attributes() {
  if (update_item_attributes_ != NULL) update_item_attributes_->::spotify::playlist4::proto::UpdateItemAttributes::Clear();
  clear_has_update_item_attributes();
}
inline const ::spotify::playlist4::proto::UpdateItemAttributes& Op::update_item_attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Op.update_item_attributes)
  return update_item_attributes_ != NULL ? *update_item_attributes_ : *default_instance_->update_item_attributes_;
}
inline ::spotify::playlist4::proto::UpdateItemAttributes* Op::mutable_update_item_attributes() {
  set_has_update_item_attributes();
  if (update_item_attributes_ == NULL) update_item_attributes_ = new ::spotify::playlist4::proto::UpdateItemAttributes;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Op.update_item_attributes)
  return update_item_attributes_;
}
inline ::spotify::playlist4::proto::UpdateItemAttributes* Op::release_update_item_attributes() {
  clear_has_update_item_attributes();
  ::spotify::playlist4::proto::UpdateItemAttributes* temp = update_item_attributes_;
  update_item_attributes_ = NULL;
  return temp;
}
inline void Op::set_allocated_update_item_attributes(::spotify::playlist4::proto::UpdateItemAttributes* update_item_attributes) {
  delete update_item_attributes_;
  update_item_attributes_ = update_item_attributes;
  if (update_item_attributes) {
    set_has_update_item_attributes();
  } else {
    clear_has_update_item_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Op.update_item_attributes)
}

// optional .spotify.playlist4.proto.UpdateListAttributes update_list_attributes = 6;
inline bool Op::has_update_list_attributes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Op::set_has_update_list_attributes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Op::clear_has_update_list_attributes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Op::clear_update_list_attributes() {
  if (update_list_attributes_ != NULL) update_list_attributes_->::spotify::playlist4::proto::UpdateListAttributes::Clear();
  clear_has_update_list_attributes();
}
inline const ::spotify::playlist4::proto::UpdateListAttributes& Op::update_list_attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Op.update_list_attributes)
  return update_list_attributes_ != NULL ? *update_list_attributes_ : *default_instance_->update_list_attributes_;
}
inline ::spotify::playlist4::proto::UpdateListAttributes* Op::mutable_update_list_attributes() {
  set_has_update_list_attributes();
  if (update_list_attributes_ == NULL) update_list_attributes_ = new ::spotify::playlist4::proto::UpdateListAttributes;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Op.update_list_attributes)
  return update_list_attributes_;
}
inline ::spotify::playlist4::proto::UpdateListAttributes* Op::release_update_list_attributes() {
  clear_has_update_list_attributes();
  ::spotify::playlist4::proto::UpdateListAttributes* temp = update_list_attributes_;
  update_list_attributes_ = NULL;
  return temp;
}
inline void Op::set_allocated_update_list_attributes(::spotify::playlist4::proto::UpdateListAttributes* update_list_attributes) {
  delete update_list_attributes_;
  update_list_attributes_ = update_list_attributes;
  if (update_list_attributes) {
    set_has_update_list_attributes();
  } else {
    clear_has_update_list_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Op.update_list_attributes)
}

// -------------------------------------------------------------------

// OpList

// repeated .spotify.playlist4.proto.Op ops = 1;
inline int OpList::ops_size() const {
  return ops_.size();
}
inline void OpList::clear_ops() {
  ops_.Clear();
}
inline const ::spotify::playlist4::proto::Op& OpList::ops(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.OpList.ops)
  return ops_.Get(index);
}
inline ::spotify::playlist4::proto::Op* OpList::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.OpList.ops)
  return ops_.Mutable(index);
}
inline ::spotify::playlist4::proto::Op* OpList::add_ops() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.OpList.ops)
  return ops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >&
OpList::ops() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.OpList.ops)
  return ops_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >*
OpList::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.OpList.ops)
  return &ops_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spotify::playlist4::proto::Op_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::Op_Kind>() {
  return ::spotify::playlist4::proto::Op_Kind_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playlist4ops_2eproto__INCLUDED
