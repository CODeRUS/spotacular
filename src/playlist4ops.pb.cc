// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4ops.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playlist4ops.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Add_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Add_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mov_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mov_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemAttributesPartialState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemAttributesPartialState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListAttributesPartialState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListAttributesPartialState_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateItemAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateItemAttributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateListAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateListAttributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Op_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Op_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Op_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OpList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_playlist4ops_2eproto() {
  protobuf_AddDesc_playlist4ops_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playlist4ops.proto");
  GOOGLE_CHECK(file != NULL);
  Add_descriptor_ = file->message_type(0);
  static const int Add_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Add, fromindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Add, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Add, list_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Add, addlast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Add, addfirst_),
  };
  Add_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Add_descriptor_,
      Add::default_instance_,
      Add_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Add, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Add, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Add));
  Rem_descriptor_ = file->message_type(1);
  static const int Rem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, fromindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, list_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, items_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, uris_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, itemsaskey_),
  };
  Rem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rem_descriptor_,
      Rem::default_instance_,
      Rem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rem));
  Mov_descriptor_ = file->message_type(2);
  static const int Mov_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mov, fromindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mov, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mov, toindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mov, list_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mov, items_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mov, uris_checksum_),
  };
  Mov_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mov_descriptor_,
      Mov::default_instance_,
      Mov_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mov, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mov, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mov));
  ItemAttributesPartialState_descriptor_ = file->message_type(3);
  static const int ItemAttributesPartialState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAttributesPartialState, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAttributesPartialState, no_value_),
  };
  ItemAttributesPartialState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemAttributesPartialState_descriptor_,
      ItemAttributesPartialState::default_instance_,
      ItemAttributesPartialState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAttributesPartialState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAttributesPartialState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemAttributesPartialState));
  ListAttributesPartialState_descriptor_ = file->message_type(4);
  static const int ListAttributesPartialState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAttributesPartialState, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAttributesPartialState, no_value_),
  };
  ListAttributesPartialState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListAttributesPartialState_descriptor_,
      ListAttributesPartialState::default_instance_,
      ListAttributesPartialState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAttributesPartialState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAttributesPartialState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListAttributesPartialState));
  UpdateItemAttributes_descriptor_ = file->message_type(5);
  static const int UpdateItemAttributes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemAttributes, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemAttributes, new_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemAttributes, old_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemAttributes, list_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemAttributes, old_attributes_checksum_),
  };
  UpdateItemAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateItemAttributes_descriptor_,
      UpdateItemAttributes::default_instance_,
      UpdateItemAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateItemAttributes));
  UpdateListAttributes_descriptor_ = file->message_type(6);
  static const int UpdateListAttributes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateListAttributes, new_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateListAttributes, old_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateListAttributes, list_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateListAttributes, old_attributes_checksum_),
  };
  UpdateListAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateListAttributes_descriptor_,
      UpdateListAttributes::default_instance_,
      UpdateListAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateListAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateListAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateListAttributes));
  Op_descriptor_ = file->message_type(7);
  static const int Op_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, rem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, mov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, update_item_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, update_list_attributes_),
  };
  Op_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Op_descriptor_,
      Op::default_instance_,
      Op_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Op));
  Op_Kind_descriptor_ = Op_descriptor_->enum_type(0);
  OpList_descriptor_ = file->message_type(8);
  static const int OpList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpList, ops_),
  };
  OpList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpList_descriptor_,
      OpList::default_instance_,
      OpList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playlist4ops_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Add_descriptor_, &Add::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rem_descriptor_, &Rem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mov_descriptor_, &Mov::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemAttributesPartialState_descriptor_, &ItemAttributesPartialState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListAttributesPartialState_descriptor_, &ListAttributesPartialState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateItemAttributes_descriptor_, &UpdateItemAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateListAttributes_descriptor_, &UpdateListAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Op_descriptor_, &Op::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpList_descriptor_, &OpList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playlist4ops_2eproto() {
  delete Add::default_instance_;
  delete Add_reflection_;
  delete Rem::default_instance_;
  delete Rem_reflection_;
  delete Mov::default_instance_;
  delete Mov_reflection_;
  delete ItemAttributesPartialState::default_instance_;
  delete ItemAttributesPartialState_reflection_;
  delete ListAttributesPartialState::default_instance_;
  delete ListAttributesPartialState_reflection_;
  delete UpdateItemAttributes::default_instance_;
  delete UpdateItemAttributes_reflection_;
  delete UpdateListAttributes::default_instance_;
  delete UpdateListAttributes_reflection_;
  delete Op::default_instance_;
  delete Op_reflection_;
  delete OpList::default_instance_;
  delete OpList_reflection_;
}

void protobuf_AddDesc_playlist4ops_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::spotify::playlist4::proto::protobuf_AddDesc_playlist4content_2eproto();
  ::spotify::playlist4::proto::protobuf_AddDesc_playlist4meta_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022playlist4ops.proto\022\027spotify.playlist4."
    "proto\032\026playlist4content.proto\032\023playlist4"
    "meta.proto\"\247\001\n\003Add\022\021\n\tfromIndex\030\001 \001(\005\022,\n"
    "\005items\030\002 \003(\0132\035.spotify.playlist4.proto.I"
    "tem\022<\n\rlist_checksum\030\003 \001(\0132%.spotify.pla"
    "ylist4.proto.ListChecksum\022\017\n\007addLast\030\004 \001"
    "(\010\022\020\n\010addFirst\030\005 \001(\010\"\245\002\n\003Rem\022\021\n\tfromInde"
    "x\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\022,\n\005items\030\003 \003(\0132\035"
    ".spotify.playlist4.proto.Item\022<\n\rlist_ch"
    "ecksum\030\004 \001(\0132%.spotify.playlist4.proto.L"
    "istChecksum\022=\n\016items_checksum\030\005 \001(\0132%.sp"
    "otify.playlist4.proto.ListChecksum\022<\n\rur"
    "is_checksum\030\006 \001(\0132%.spotify.playlist4.pr"
    "oto.ListChecksum\022\022\n\nitemsAsKey\030\007 \001(\010\"\364\001\n"
    "\003Mov\022\021\n\tfromIndex\030\001 \002(\005\022\016\n\006length\030\002 \002(\005\022"
    "\017\n\007toIndex\030\003 \002(\005\022<\n\rlist_checksum\030\004 \001(\0132"
    "%.spotify.playlist4.proto.ListChecksum\022="
    "\n\016items_checksum\030\005 \001(\0132%.spotify.playlis"
    "t4.proto.ListChecksum\022<\n\ruris_checksum\030\006"
    " \001(\0132%.spotify.playlist4.proto.ListCheck"
    "sum\"\223\001\n\032ItemAttributesPartialState\0227\n\006va"
    "lues\030\001 \002(\0132\'.spotify.playlist4.proto.Ite"
    "mAttributes\022<\n\010no_value\030\002 \003(\0162*.spotify."
    "playlist4.proto.ItemAttributeKind\"\223\001\n\032Li"
    "stAttributesPartialState\0227\n\006values\030\001 \002(\013"
    "2\'.spotify.playlist4.proto.ListAttribute"
    "s\022<\n\010no_value\030\002 \003(\0162*.spotify.playlist4."
    "proto.ListAttributeKind\"\305\002\n\024UpdateItemAt"
    "tributes\022\r\n\005index\030\001 \002(\005\022K\n\016new_attribute"
    "s\030\002 \002(\01323.spotify.playlist4.proto.ItemAt"
    "tributesPartialState\022K\n\016old_attributes\030\003"
    " \001(\01323.spotify.playlist4.proto.ItemAttri"
    "butesPartialState\022<\n\rlist_checksum\030\004 \001(\013"
    "2%.spotify.playlist4.proto.ListChecksum\022"
    "F\n\027old_attributes_checksum\030\005 \001(\0132%.spoti"
    "fy.playlist4.proto.ListChecksum\"\266\002\n\024Upda"
    "teListAttributes\022K\n\016new_attributes\030\001 \002(\013"
    "23.spotify.playlist4.proto.ListAttribute"
    "sPartialState\022K\n\016old_attributes\030\002 \001(\01323."
    "spotify.playlist4.proto.ListAttributesPa"
    "rtialState\022<\n\rlist_checksum\030\003 \001(\0132%.spot"
    "ify.playlist4.proto.ListChecksum\022F\n\027old_"
    "attributes_checksum\030\004 \001(\0132%.spotify.play"
    "list4.proto.ListChecksum\"\300\003\n\002Op\022.\n\004kind\030"
    "\001 \002(\0162 .spotify.playlist4.proto.Op.Kind\022"
    ")\n\003add\030\002 \001(\0132\034.spotify.playlist4.proto.A"
    "dd\022)\n\003rem\030\003 \001(\0132\034.spotify.playlist4.prot"
    "o.Rem\022)\n\003mov\030\004 \001(\0132\034.spotify.playlist4.p"
    "roto.Mov\022M\n\026update_item_attributes\030\005 \001(\013"
    "2-.spotify.playlist4.proto.UpdateItemAtt"
    "ributes\022M\n\026update_list_attributes\030\006 \001(\0132"
    "-.spotify.playlist4.proto.UpdateListAttr"
    "ibutes\"k\n\004Kind\022\020\n\014KIND_UNKNOWN\020\000\022\007\n\003ADD\020"
    "\002\022\007\n\003REM\020\003\022\007\n\003MOV\020\004\022\032\n\026UPDATE_ITEM_ATTRI"
    "BUTES\020\005\022\032\n\026UPDATE_LIST_ATTRIBUTES\020\006\"2\n\006O"
    "pList\022(\n\003ops\030\001 \003(\0132\033.spotify.playlist4.p"
    "roto.OpB\037\n\033com.spotify.playlist4.protoH\001", 2280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playlist4ops.proto", &protobuf_RegisterTypes);
  Add::default_instance_ = new Add();
  Rem::default_instance_ = new Rem();
  Mov::default_instance_ = new Mov();
  ItemAttributesPartialState::default_instance_ = new ItemAttributesPartialState();
  ListAttributesPartialState::default_instance_ = new ListAttributesPartialState();
  UpdateItemAttributes::default_instance_ = new UpdateItemAttributes();
  UpdateListAttributes::default_instance_ = new UpdateListAttributes();
  Op::default_instance_ = new Op();
  OpList::default_instance_ = new OpList();
  Add::default_instance_->InitAsDefaultInstance();
  Rem::default_instance_->InitAsDefaultInstance();
  Mov::default_instance_->InitAsDefaultInstance();
  ItemAttributesPartialState::default_instance_->InitAsDefaultInstance();
  ListAttributesPartialState::default_instance_->InitAsDefaultInstance();
  UpdateItemAttributes::default_instance_->InitAsDefaultInstance();
  UpdateListAttributes::default_instance_->InitAsDefaultInstance();
  Op::default_instance_->InitAsDefaultInstance();
  OpList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playlist4ops_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playlist4ops_2eproto {
  StaticDescriptorInitializer_playlist4ops_2eproto() {
    protobuf_AddDesc_playlist4ops_2eproto();
  }
} static_descriptor_initializer_playlist4ops_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Add::kFromIndexFieldNumber;
const int Add::kItemsFieldNumber;
const int Add::kListChecksumFieldNumber;
const int Add::kAddLastFieldNumber;
const int Add::kAddFirstFieldNumber;
#endif  // !_MSC_VER

Add::Add()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.Add)
}

void Add::InitAsDefaultInstance() {
  list_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
}

Add::Add(const Add& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.Add)
}

void Add::SharedCtor() {
  _cached_size_ = 0;
  fromindex_ = 0;
  list_checksum_ = NULL;
  addlast_ = false;
  addfirst_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Add::~Add() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.Add)
  SharedDtor();
}

void Add::SharedDtor() {
  if (this != default_instance_) {
    delete list_checksum_;
  }
}

void Add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Add::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Add_descriptor_;
}

const Add& Add::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

Add* Add::default_instance_ = NULL;

Add* Add::New() const {
  return new Add;
}

void Add::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Add*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(fromindex_, addfirst_);
    if (has_list_checksum()) {
      if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.Add)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fromIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromindex_)));
          set_has_fromindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .spotify.playlist4.proto.Item items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(26)) goto parse_list_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
      case 3: {
        if (tag == 26) {
         parse_list_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_addLast;
        break;
      }

      // optional bool addLast = 4;
      case 4: {
        if (tag == 32) {
         parse_addLast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addlast_)));
          set_has_addlast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_addFirst;
        break;
      }

      // optional bool addFirst = 5;
      case 5: {
        if (tag == 40) {
         parse_addFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addfirst_)));
          set_has_addfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.Add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.Add)
  return false;
#undef DO_
}

void Add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.Add)
  // optional int32 fromIndex = 1;
  if (has_fromindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromindex(), output);
  }

  // repeated .spotify.playlist4.proto.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
  if (has_list_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_checksum(), output);
  }

  // optional bool addLast = 4;
  if (has_addlast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->addlast(), output);
  }

  // optional bool addFirst = 5;
  if (has_addfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->addfirst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.Add)
}

::google::protobuf::uint8* Add::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.Add)
  // optional int32 fromIndex = 1;
  if (has_fromindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fromindex(), target);
  }

  // repeated .spotify.playlist4.proto.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
  if (has_list_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_checksum(), target);
  }

  // optional bool addLast = 4;
  if (has_addlast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->addlast(), target);
  }

  // optional bool addFirst = 5;
  if (has_addfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->addfirst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.Add)
  return target;
}

int Add::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fromIndex = 1;
    if (has_fromindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromindex());
    }

    // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
    if (has_list_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_checksum());
    }

    // optional bool addLast = 4;
    if (has_addlast()) {
      total_size += 1 + 1;
    }

    // optional bool addFirst = 5;
    if (has_addfirst()) {
      total_size += 1 + 1;
    }

  }
  // repeated .spotify.playlist4.proto.Item items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Add::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Add* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Add*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Add::MergeFrom(const Add& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromindex()) {
      set_fromindex(from.fromindex());
    }
    if (from.has_list_checksum()) {
      mutable_list_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.list_checksum());
    }
    if (from.has_addlast()) {
      set_addlast(from.addlast());
    }
    if (from.has_addfirst()) {
      set_addfirst(from.addfirst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Add::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Add::CopyFrom(const Add& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Add::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (has_list_checksum()) {
    if (!this->list_checksum().IsInitialized()) return false;
  }
  return true;
}

void Add::Swap(Add* other) {
  if (other != this) {
    std::swap(fromindex_, other->fromindex_);
    items_.Swap(&other->items_);
    std::swap(list_checksum_, other->list_checksum_);
    std::swap(addlast_, other->addlast_);
    std::swap(addfirst_, other->addfirst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Add::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Add_descriptor_;
  metadata.reflection = Add_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rem::kFromIndexFieldNumber;
const int Rem::kLengthFieldNumber;
const int Rem::kItemsFieldNumber;
const int Rem::kListChecksumFieldNumber;
const int Rem::kItemsChecksumFieldNumber;
const int Rem::kUrisChecksumFieldNumber;
const int Rem::kItemsAsKeyFieldNumber;
#endif  // !_MSC_VER

Rem::Rem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.Rem)
}

void Rem::InitAsDefaultInstance() {
  list_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
  items_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
  uris_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
}

Rem::Rem(const Rem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.Rem)
}

void Rem::SharedCtor() {
  _cached_size_ = 0;
  fromindex_ = 0;
  length_ = 0;
  list_checksum_ = NULL;
  items_checksum_ = NULL;
  uris_checksum_ = NULL;
  itemsaskey_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rem::~Rem() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.Rem)
  SharedDtor();
}

void Rem::SharedDtor() {
  if (this != default_instance_) {
    delete list_checksum_;
    delete items_checksum_;
    delete uris_checksum_;
  }
}

void Rem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rem_descriptor_;
}

const Rem& Rem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

Rem* Rem::default_instance_ = NULL;

Rem* Rem::New() const {
  return new Rem;
}

void Rem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Rem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(fromindex_, length_);
    if (has_list_checksum()) {
      if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    if (has_items_checksum()) {
      if (items_checksum_ != NULL) items_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    if (has_uris_checksum()) {
      if (uris_checksum_ != NULL) uris_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    itemsaskey_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.Rem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fromIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromindex_)));
          set_has_fromindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .spotify.playlist4.proto.Item items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(34)) goto parse_list_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
      case 4: {
        if (tag == 34) {
         parse_list_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
      case 5: {
        if (tag == 42) {
         parse_items_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_uris_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
      case 6: {
        if (tag == 50) {
         parse_uris_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uris_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_itemsAsKey;
        break;
      }

      // optional bool itemsAsKey = 7;
      case 7: {
        if (tag == 56) {
         parse_itemsAsKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &itemsaskey_)));
          set_has_itemsaskey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.Rem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.Rem)
  return false;
#undef DO_
}

void Rem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.Rem)
  // optional int32 fromIndex = 1;
  if (has_fromindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromindex(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // repeated .spotify.playlist4.proto.Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  if (has_list_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_checksum(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
  if (has_items_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items_checksum(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
  if (has_uris_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->uris_checksum(), output);
  }

  // optional bool itemsAsKey = 7;
  if (has_itemsaskey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->itemsaskey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.Rem)
}

::google::protobuf::uint8* Rem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.Rem)
  // optional int32 fromIndex = 1;
  if (has_fromindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fromindex(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // repeated .spotify.playlist4.proto.Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  if (has_list_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_checksum(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
  if (has_items_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items_checksum(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
  if (has_uris_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->uris_checksum(), target);
  }

  // optional bool itemsAsKey = 7;
  if (has_itemsaskey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->itemsaskey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.Rem)
  return target;
}

int Rem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fromIndex = 1;
    if (has_fromindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromindex());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
    if (has_list_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_checksum());
    }

    // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
    if (has_items_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items_checksum());
    }

    // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
    if (has_uris_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uris_checksum());
    }

    // optional bool itemsAsKey = 7;
    if (has_itemsaskey()) {
      total_size += 1 + 1;
    }

  }
  // repeated .spotify.playlist4.proto.Item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rem::MergeFrom(const Rem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromindex()) {
      set_fromindex(from.fromindex());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_list_checksum()) {
      mutable_list_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.list_checksum());
    }
    if (from.has_items_checksum()) {
      mutable_items_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.items_checksum());
    }
    if (from.has_uris_checksum()) {
      mutable_uris_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.uris_checksum());
    }
    if (from.has_itemsaskey()) {
      set_itemsaskey(from.itemsaskey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rem::CopyFrom(const Rem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (has_list_checksum()) {
    if (!this->list_checksum().IsInitialized()) return false;
  }
  if (has_items_checksum()) {
    if (!this->items_checksum().IsInitialized()) return false;
  }
  if (has_uris_checksum()) {
    if (!this->uris_checksum().IsInitialized()) return false;
  }
  return true;
}

void Rem::Swap(Rem* other) {
  if (other != this) {
    std::swap(fromindex_, other->fromindex_);
    std::swap(length_, other->length_);
    items_.Swap(&other->items_);
    std::swap(list_checksum_, other->list_checksum_);
    std::swap(items_checksum_, other->items_checksum_);
    std::swap(uris_checksum_, other->uris_checksum_);
    std::swap(itemsaskey_, other->itemsaskey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rem_descriptor_;
  metadata.reflection = Rem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mov::kFromIndexFieldNumber;
const int Mov::kLengthFieldNumber;
const int Mov::kToIndexFieldNumber;
const int Mov::kListChecksumFieldNumber;
const int Mov::kItemsChecksumFieldNumber;
const int Mov::kUrisChecksumFieldNumber;
#endif  // !_MSC_VER

Mov::Mov()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.Mov)
}

void Mov::InitAsDefaultInstance() {
  list_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
  items_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
  uris_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
}

Mov::Mov(const Mov& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.Mov)
}

void Mov::SharedCtor() {
  _cached_size_ = 0;
  fromindex_ = 0;
  length_ = 0;
  toindex_ = 0;
  list_checksum_ = NULL;
  items_checksum_ = NULL;
  uris_checksum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mov::~Mov() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.Mov)
  SharedDtor();
}

void Mov::SharedDtor() {
  if (this != default_instance_) {
    delete list_checksum_;
    delete items_checksum_;
    delete uris_checksum_;
  }
}

void Mov::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mov::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mov_descriptor_;
}

const Mov& Mov::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

Mov* Mov::default_instance_ = NULL;

Mov* Mov::New() const {
  return new Mov;
}

void Mov::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Mov*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(fromindex_, length_);
    toindex_ = 0;
    if (has_list_checksum()) {
      if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    if (has_items_checksum()) {
      if (items_checksum_ != NULL) items_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    if (has_uris_checksum()) {
      if (uris_checksum_ != NULL) uris_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mov::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.Mov)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fromIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromindex_)));
          set_has_fromindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_toIndex;
        break;
      }

      // required int32 toIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_toIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toindex_)));
          set_has_toindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
      case 4: {
        if (tag == 34) {
         parse_list_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
      case 5: {
        if (tag == 42) {
         parse_items_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_uris_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
      case 6: {
        if (tag == 50) {
         parse_uris_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uris_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.Mov)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.Mov)
  return false;
#undef DO_
}

void Mov::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.Mov)
  // required int32 fromIndex = 1;
  if (has_fromindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromindex(), output);
  }

  // required int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // required int32 toIndex = 3;
  if (has_toindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toindex(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  if (has_list_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_checksum(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
  if (has_items_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items_checksum(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
  if (has_uris_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->uris_checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.Mov)
}

::google::protobuf::uint8* Mov::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.Mov)
  // required int32 fromIndex = 1;
  if (has_fromindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fromindex(), target);
  }

  // required int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // required int32 toIndex = 3;
  if (has_toindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toindex(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  if (has_list_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_checksum(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
  if (has_items_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items_checksum(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
  if (has_uris_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->uris_checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.Mov)
  return target;
}

int Mov::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fromIndex = 1;
    if (has_fromindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromindex());
    }

    // required int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // required int32 toIndex = 3;
    if (has_toindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toindex());
    }

    // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
    if (has_list_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_checksum());
    }

    // optional .spotify.playlist4.proto.ListChecksum items_checksum = 5;
    if (has_items_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items_checksum());
    }

    // optional .spotify.playlist4.proto.ListChecksum uris_checksum = 6;
    if (has_uris_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uris_checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mov::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mov* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mov*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mov::MergeFrom(const Mov& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromindex()) {
      set_fromindex(from.fromindex());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_toindex()) {
      set_toindex(from.toindex());
    }
    if (from.has_list_checksum()) {
      mutable_list_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.list_checksum());
    }
    if (from.has_items_checksum()) {
      mutable_items_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.items_checksum());
    }
    if (from.has_uris_checksum()) {
      mutable_uris_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.uris_checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mov::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mov::CopyFrom(const Mov& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mov::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_list_checksum()) {
    if (!this->list_checksum().IsInitialized()) return false;
  }
  if (has_items_checksum()) {
    if (!this->items_checksum().IsInitialized()) return false;
  }
  if (has_uris_checksum()) {
    if (!this->uris_checksum().IsInitialized()) return false;
  }
  return true;
}

void Mov::Swap(Mov* other) {
  if (other != this) {
    std::swap(fromindex_, other->fromindex_);
    std::swap(length_, other->length_);
    std::swap(toindex_, other->toindex_);
    std::swap(list_checksum_, other->list_checksum_);
    std::swap(items_checksum_, other->items_checksum_);
    std::swap(uris_checksum_, other->uris_checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mov::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mov_descriptor_;
  metadata.reflection = Mov_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemAttributesPartialState::kValuesFieldNumber;
const int ItemAttributesPartialState::kNoValueFieldNumber;
#endif  // !_MSC_VER

ItemAttributesPartialState::ItemAttributesPartialState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ItemAttributesPartialState)
}

void ItemAttributesPartialState::InitAsDefaultInstance() {
  values_ = const_cast< ::spotify::playlist4::proto::ItemAttributes*>(&::spotify::playlist4::proto::ItemAttributes::default_instance());
}

ItemAttributesPartialState::ItemAttributesPartialState(const ItemAttributesPartialState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ItemAttributesPartialState)
}

void ItemAttributesPartialState::SharedCtor() {
  _cached_size_ = 0;
  values_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemAttributesPartialState::~ItemAttributesPartialState() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ItemAttributesPartialState)
  SharedDtor();
}

void ItemAttributesPartialState::SharedDtor() {
  if (this != default_instance_) {
    delete values_;
  }
}

void ItemAttributesPartialState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemAttributesPartialState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemAttributesPartialState_descriptor_;
}

const ItemAttributesPartialState& ItemAttributesPartialState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

ItemAttributesPartialState* ItemAttributesPartialState::default_instance_ = NULL;

ItemAttributesPartialState* ItemAttributesPartialState::New() const {
  return new ItemAttributesPartialState;
}

void ItemAttributesPartialState::Clear() {
  if (has_values()) {
    if (values_ != NULL) values_->::spotify::playlist4::proto::ItemAttributes::Clear();
  }
  no_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemAttributesPartialState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ItemAttributesPartialState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .spotify.playlist4.proto.ItemAttributes values = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_no_value;
        break;
      }

      // repeated .spotify.playlist4.proto.ItemAttributeKind no_value = 2;
      case 2: {
        if (tag == 16) {
         parse_no_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::playlist4::proto::ItemAttributeKind_IsValid(value)) {
            add_no_value(static_cast< ::spotify::playlist4::proto::ItemAttributeKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::spotify::playlist4::proto::ItemAttributeKind_IsValid,
                 this->mutable_no_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_no_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ItemAttributesPartialState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ItemAttributesPartialState)
  return false;
#undef DO_
}

void ItemAttributesPartialState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ItemAttributesPartialState)
  // required .spotify.playlist4.proto.ItemAttributes values = 1;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(), output);
  }

  // repeated .spotify.playlist4.proto.ItemAttributeKind no_value = 2;
  for (int i = 0; i < this->no_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->no_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ItemAttributesPartialState)
}

::google::protobuf::uint8* ItemAttributesPartialState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ItemAttributesPartialState)
  // required .spotify.playlist4.proto.ItemAttributes values = 1;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(), target);
  }

  // repeated .spotify.playlist4.proto.ItemAttributeKind no_value = 2;
  for (int i = 0; i < this->no_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->no_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ItemAttributesPartialState)
  return target;
}

int ItemAttributesPartialState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .spotify.playlist4.proto.ItemAttributes values = 1;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values());
    }

  }
  // repeated .spotify.playlist4.proto.ItemAttributeKind no_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->no_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->no_value(i));
    }
    total_size += 1 * this->no_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemAttributesPartialState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemAttributesPartialState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemAttributesPartialState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemAttributesPartialState::MergeFrom(const ItemAttributesPartialState& from) {
  GOOGLE_CHECK_NE(&from, this);
  no_value_.MergeFrom(from.no_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_values()) {
      mutable_values()->::spotify::playlist4::proto::ItemAttributes::MergeFrom(from.values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemAttributesPartialState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemAttributesPartialState::CopyFrom(const ItemAttributesPartialState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemAttributesPartialState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_values()) {
    if (!this->values().IsInitialized()) return false;
  }
  return true;
}

void ItemAttributesPartialState::Swap(ItemAttributesPartialState* other) {
  if (other != this) {
    std::swap(values_, other->values_);
    no_value_.Swap(&other->no_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemAttributesPartialState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemAttributesPartialState_descriptor_;
  metadata.reflection = ItemAttributesPartialState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListAttributesPartialState::kValuesFieldNumber;
const int ListAttributesPartialState::kNoValueFieldNumber;
#endif  // !_MSC_VER

ListAttributesPartialState::ListAttributesPartialState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ListAttributesPartialState)
}

void ListAttributesPartialState::InitAsDefaultInstance() {
  values_ = const_cast< ::spotify::playlist4::proto::ListAttributes*>(&::spotify::playlist4::proto::ListAttributes::default_instance());
}

ListAttributesPartialState::ListAttributesPartialState(const ListAttributesPartialState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ListAttributesPartialState)
}

void ListAttributesPartialState::SharedCtor() {
  _cached_size_ = 0;
  values_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListAttributesPartialState::~ListAttributesPartialState() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ListAttributesPartialState)
  SharedDtor();
}

void ListAttributesPartialState::SharedDtor() {
  if (this != default_instance_) {
    delete values_;
  }
}

void ListAttributesPartialState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListAttributesPartialState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListAttributesPartialState_descriptor_;
}

const ListAttributesPartialState& ListAttributesPartialState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

ListAttributesPartialState* ListAttributesPartialState::default_instance_ = NULL;

ListAttributesPartialState* ListAttributesPartialState::New() const {
  return new ListAttributesPartialState;
}

void ListAttributesPartialState::Clear() {
  if (has_values()) {
    if (values_ != NULL) values_->::spotify::playlist4::proto::ListAttributes::Clear();
  }
  no_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListAttributesPartialState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ListAttributesPartialState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .spotify.playlist4.proto.ListAttributes values = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_no_value;
        break;
      }

      // repeated .spotify.playlist4.proto.ListAttributeKind no_value = 2;
      case 2: {
        if (tag == 16) {
         parse_no_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::playlist4::proto::ListAttributeKind_IsValid(value)) {
            add_no_value(static_cast< ::spotify::playlist4::proto::ListAttributeKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::spotify::playlist4::proto::ListAttributeKind_IsValid,
                 this->mutable_no_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_no_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ListAttributesPartialState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ListAttributesPartialState)
  return false;
#undef DO_
}

void ListAttributesPartialState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ListAttributesPartialState)
  // required .spotify.playlist4.proto.ListAttributes values = 1;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(), output);
  }

  // repeated .spotify.playlist4.proto.ListAttributeKind no_value = 2;
  for (int i = 0; i < this->no_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->no_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ListAttributesPartialState)
}

::google::protobuf::uint8* ListAttributesPartialState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ListAttributesPartialState)
  // required .spotify.playlist4.proto.ListAttributes values = 1;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(), target);
  }

  // repeated .spotify.playlist4.proto.ListAttributeKind no_value = 2;
  for (int i = 0; i < this->no_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->no_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ListAttributesPartialState)
  return target;
}

int ListAttributesPartialState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .spotify.playlist4.proto.ListAttributes values = 1;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values());
    }

  }
  // repeated .spotify.playlist4.proto.ListAttributeKind no_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->no_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->no_value(i));
    }
    total_size += 1 * this->no_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListAttributesPartialState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListAttributesPartialState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListAttributesPartialState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListAttributesPartialState::MergeFrom(const ListAttributesPartialState& from) {
  GOOGLE_CHECK_NE(&from, this);
  no_value_.MergeFrom(from.no_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_values()) {
      mutable_values()->::spotify::playlist4::proto::ListAttributes::MergeFrom(from.values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListAttributesPartialState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAttributesPartialState::CopyFrom(const ListAttributesPartialState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAttributesPartialState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListAttributesPartialState::Swap(ListAttributesPartialState* other) {
  if (other != this) {
    std::swap(values_, other->values_);
    no_value_.Swap(&other->no_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListAttributesPartialState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListAttributesPartialState_descriptor_;
  metadata.reflection = ListAttributesPartialState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateItemAttributes::kIndexFieldNumber;
const int UpdateItemAttributes::kNewAttributesFieldNumber;
const int UpdateItemAttributes::kOldAttributesFieldNumber;
const int UpdateItemAttributes::kListChecksumFieldNumber;
const int UpdateItemAttributes::kOldAttributesChecksumFieldNumber;
#endif  // !_MSC_VER

UpdateItemAttributes::UpdateItemAttributes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.UpdateItemAttributes)
}

void UpdateItemAttributes::InitAsDefaultInstance() {
  new_attributes_ = const_cast< ::spotify::playlist4::proto::ItemAttributesPartialState*>(&::spotify::playlist4::proto::ItemAttributesPartialState::default_instance());
  old_attributes_ = const_cast< ::spotify::playlist4::proto::ItemAttributesPartialState*>(&::spotify::playlist4::proto::ItemAttributesPartialState::default_instance());
  list_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
  old_attributes_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
}

UpdateItemAttributes::UpdateItemAttributes(const UpdateItemAttributes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.UpdateItemAttributes)
}

void UpdateItemAttributes::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  new_attributes_ = NULL;
  old_attributes_ = NULL;
  list_checksum_ = NULL;
  old_attributes_checksum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateItemAttributes::~UpdateItemAttributes() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.UpdateItemAttributes)
  SharedDtor();
}

void UpdateItemAttributes::SharedDtor() {
  if (this != default_instance_) {
    delete new_attributes_;
    delete old_attributes_;
    delete list_checksum_;
    delete old_attributes_checksum_;
  }
}

void UpdateItemAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateItemAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateItemAttributes_descriptor_;
}

const UpdateItemAttributes& UpdateItemAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

UpdateItemAttributes* UpdateItemAttributes::default_instance_ = NULL;

UpdateItemAttributes* UpdateItemAttributes::New() const {
  return new UpdateItemAttributes;
}

void UpdateItemAttributes::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    index_ = 0;
    if (has_new_attributes()) {
      if (new_attributes_ != NULL) new_attributes_->::spotify::playlist4::proto::ItemAttributesPartialState::Clear();
    }
    if (has_old_attributes()) {
      if (old_attributes_ != NULL) old_attributes_->::spotify::playlist4::proto::ItemAttributesPartialState::Clear();
    }
    if (has_list_checksum()) {
      if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    if (has_old_attributes_checksum()) {
      if (old_attributes_checksum_ != NULL) old_attributes_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateItemAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.UpdateItemAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_attributes;
        break;
      }

      // required .spotify.playlist4.proto.ItemAttributesPartialState new_attributes = 2;
      case 2: {
        if (tag == 18) {
         parse_new_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_old_attributes;
        break;
      }

      // optional .spotify.playlist4.proto.ItemAttributesPartialState old_attributes = 3;
      case 3: {
        if (tag == 26) {
         parse_old_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
      case 4: {
        if (tag == 34) {
         parse_list_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_old_attributes_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 5;
      case 5: {
        if (tag == 42) {
         parse_old_attributes_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_attributes_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.UpdateItemAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.UpdateItemAttributes)
  return false;
#undef DO_
}

void UpdateItemAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.UpdateItemAttributes)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .spotify.playlist4.proto.ItemAttributesPartialState new_attributes = 2;
  if (has_new_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_attributes(), output);
  }

  // optional .spotify.playlist4.proto.ItemAttributesPartialState old_attributes = 3;
  if (has_old_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_attributes(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  if (has_list_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_checksum(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 5;
  if (has_old_attributes_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->old_attributes_checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.UpdateItemAttributes)
}

::google::protobuf::uint8* UpdateItemAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.UpdateItemAttributes)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .spotify.playlist4.proto.ItemAttributesPartialState new_attributes = 2;
  if (has_new_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_attributes(), target);
  }

  // optional .spotify.playlist4.proto.ItemAttributesPartialState old_attributes = 3;
  if (has_old_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_attributes(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
  if (has_list_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_checksum(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 5;
  if (has_old_attributes_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->old_attributes_checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.UpdateItemAttributes)
  return target;
}

int UpdateItemAttributes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .spotify.playlist4.proto.ItemAttributesPartialState new_attributes = 2;
    if (has_new_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_attributes());
    }

    // optional .spotify.playlist4.proto.ItemAttributesPartialState old_attributes = 3;
    if (has_old_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_attributes());
    }

    // optional .spotify.playlist4.proto.ListChecksum list_checksum = 4;
    if (has_list_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_checksum());
    }

    // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 5;
    if (has_old_attributes_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_attributes_checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateItemAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateItemAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateItemAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateItemAttributes::MergeFrom(const UpdateItemAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_new_attributes()) {
      mutable_new_attributes()->::spotify::playlist4::proto::ItemAttributesPartialState::MergeFrom(from.new_attributes());
    }
    if (from.has_old_attributes()) {
      mutable_old_attributes()->::spotify::playlist4::proto::ItemAttributesPartialState::MergeFrom(from.old_attributes());
    }
    if (from.has_list_checksum()) {
      mutable_list_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.list_checksum());
    }
    if (from.has_old_attributes_checksum()) {
      mutable_old_attributes_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.old_attributes_checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateItemAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateItemAttributes::CopyFrom(const UpdateItemAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateItemAttributes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_new_attributes()) {
    if (!this->new_attributes().IsInitialized()) return false;
  }
  if (has_old_attributes()) {
    if (!this->old_attributes().IsInitialized()) return false;
  }
  if (has_list_checksum()) {
    if (!this->list_checksum().IsInitialized()) return false;
  }
  if (has_old_attributes_checksum()) {
    if (!this->old_attributes_checksum().IsInitialized()) return false;
  }
  return true;
}

void UpdateItemAttributes::Swap(UpdateItemAttributes* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(new_attributes_, other->new_attributes_);
    std::swap(old_attributes_, other->old_attributes_);
    std::swap(list_checksum_, other->list_checksum_);
    std::swap(old_attributes_checksum_, other->old_attributes_checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateItemAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateItemAttributes_descriptor_;
  metadata.reflection = UpdateItemAttributes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateListAttributes::kNewAttributesFieldNumber;
const int UpdateListAttributes::kOldAttributesFieldNumber;
const int UpdateListAttributes::kListChecksumFieldNumber;
const int UpdateListAttributes::kOldAttributesChecksumFieldNumber;
#endif  // !_MSC_VER

UpdateListAttributes::UpdateListAttributes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.UpdateListAttributes)
}

void UpdateListAttributes::InitAsDefaultInstance() {
  new_attributes_ = const_cast< ::spotify::playlist4::proto::ListAttributesPartialState*>(&::spotify::playlist4::proto::ListAttributesPartialState::default_instance());
  old_attributes_ = const_cast< ::spotify::playlist4::proto::ListAttributesPartialState*>(&::spotify::playlist4::proto::ListAttributesPartialState::default_instance());
  list_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
  old_attributes_checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
}

UpdateListAttributes::UpdateListAttributes(const UpdateListAttributes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.UpdateListAttributes)
}

void UpdateListAttributes::SharedCtor() {
  _cached_size_ = 0;
  new_attributes_ = NULL;
  old_attributes_ = NULL;
  list_checksum_ = NULL;
  old_attributes_checksum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateListAttributes::~UpdateListAttributes() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.UpdateListAttributes)
  SharedDtor();
}

void UpdateListAttributes::SharedDtor() {
  if (this != default_instance_) {
    delete new_attributes_;
    delete old_attributes_;
    delete list_checksum_;
    delete old_attributes_checksum_;
  }
}

void UpdateListAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateListAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateListAttributes_descriptor_;
}

const UpdateListAttributes& UpdateListAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

UpdateListAttributes* UpdateListAttributes::default_instance_ = NULL;

UpdateListAttributes* UpdateListAttributes::New() const {
  return new UpdateListAttributes;
}

void UpdateListAttributes::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_new_attributes()) {
      if (new_attributes_ != NULL) new_attributes_->::spotify::playlist4::proto::ListAttributesPartialState::Clear();
    }
    if (has_old_attributes()) {
      if (old_attributes_ != NULL) old_attributes_->::spotify::playlist4::proto::ListAttributesPartialState::Clear();
    }
    if (has_list_checksum()) {
      if (list_checksum_ != NULL) list_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    if (has_old_attributes_checksum()) {
      if (old_attributes_checksum_ != NULL) old_attributes_checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateListAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.UpdateListAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .spotify.playlist4.proto.ListAttributesPartialState new_attributes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_old_attributes;
        break;
      }

      // optional .spotify.playlist4.proto.ListAttributesPartialState old_attributes = 2;
      case 2: {
        if (tag == 18) {
         parse_old_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
      case 3: {
        if (tag == 26) {
         parse_list_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_old_attributes_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 4;
      case 4: {
        if (tag == 34) {
         parse_old_attributes_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_attributes_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.UpdateListAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.UpdateListAttributes)
  return false;
#undef DO_
}

void UpdateListAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.UpdateListAttributes)
  // required .spotify.playlist4.proto.ListAttributesPartialState new_attributes = 1;
  if (has_new_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->new_attributes(), output);
  }

  // optional .spotify.playlist4.proto.ListAttributesPartialState old_attributes = 2;
  if (has_old_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_attributes(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
  if (has_list_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_checksum(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 4;
  if (has_old_attributes_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_attributes_checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.UpdateListAttributes)
}

::google::protobuf::uint8* UpdateListAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.UpdateListAttributes)
  // required .spotify.playlist4.proto.ListAttributesPartialState new_attributes = 1;
  if (has_new_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->new_attributes(), target);
  }

  // optional .spotify.playlist4.proto.ListAttributesPartialState old_attributes = 2;
  if (has_old_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_attributes(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
  if (has_list_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_checksum(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 4;
  if (has_old_attributes_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_attributes_checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.UpdateListAttributes)
  return target;
}

int UpdateListAttributes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .spotify.playlist4.proto.ListAttributesPartialState new_attributes = 1;
    if (has_new_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_attributes());
    }

    // optional .spotify.playlist4.proto.ListAttributesPartialState old_attributes = 2;
    if (has_old_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_attributes());
    }

    // optional .spotify.playlist4.proto.ListChecksum list_checksum = 3;
    if (has_list_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_checksum());
    }

    // optional .spotify.playlist4.proto.ListChecksum old_attributes_checksum = 4;
    if (has_old_attributes_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_attributes_checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateListAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateListAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateListAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateListAttributes::MergeFrom(const UpdateListAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_attributes()) {
      mutable_new_attributes()->::spotify::playlist4::proto::ListAttributesPartialState::MergeFrom(from.new_attributes());
    }
    if (from.has_old_attributes()) {
      mutable_old_attributes()->::spotify::playlist4::proto::ListAttributesPartialState::MergeFrom(from.old_attributes());
    }
    if (from.has_list_checksum()) {
      mutable_list_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.list_checksum());
    }
    if (from.has_old_attributes_checksum()) {
      mutable_old_attributes_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.old_attributes_checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateListAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateListAttributes::CopyFrom(const UpdateListAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateListAttributes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_new_attributes()) {
    if (!this->new_attributes().IsInitialized()) return false;
  }
  if (has_old_attributes()) {
    if (!this->old_attributes().IsInitialized()) return false;
  }
  if (has_list_checksum()) {
    if (!this->list_checksum().IsInitialized()) return false;
  }
  if (has_old_attributes_checksum()) {
    if (!this->old_attributes_checksum().IsInitialized()) return false;
  }
  return true;
}

void UpdateListAttributes::Swap(UpdateListAttributes* other) {
  if (other != this) {
    std::swap(new_attributes_, other->new_attributes_);
    std::swap(old_attributes_, other->old_attributes_);
    std::swap(list_checksum_, other->list_checksum_);
    std::swap(old_attributes_checksum_, other->old_attributes_checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateListAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateListAttributes_descriptor_;
  metadata.reflection = UpdateListAttributes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Op_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_Kind_descriptor_;
}
bool Op_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Op_Kind Op::KIND_UNKNOWN;
const Op_Kind Op::ADD;
const Op_Kind Op::REM;
const Op_Kind Op::MOV;
const Op_Kind Op::UPDATE_ITEM_ATTRIBUTES;
const Op_Kind Op::UPDATE_LIST_ATTRIBUTES;
const Op_Kind Op::Kind_MIN;
const Op_Kind Op::Kind_MAX;
const int Op::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Op::kKindFieldNumber;
const int Op::kAddFieldNumber;
const int Op::kRemFieldNumber;
const int Op::kMovFieldNumber;
const int Op::kUpdateItemAttributesFieldNumber;
const int Op::kUpdateListAttributesFieldNumber;
#endif  // !_MSC_VER

Op::Op()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.Op)
}

void Op::InitAsDefaultInstance() {
  add_ = const_cast< ::spotify::playlist4::proto::Add*>(&::spotify::playlist4::proto::Add::default_instance());
  rem_ = const_cast< ::spotify::playlist4::proto::Rem*>(&::spotify::playlist4::proto::Rem::default_instance());
  mov_ = const_cast< ::spotify::playlist4::proto::Mov*>(&::spotify::playlist4::proto::Mov::default_instance());
  update_item_attributes_ = const_cast< ::spotify::playlist4::proto::UpdateItemAttributes*>(&::spotify::playlist4::proto::UpdateItemAttributes::default_instance());
  update_list_attributes_ = const_cast< ::spotify::playlist4::proto::UpdateListAttributes*>(&::spotify::playlist4::proto::UpdateListAttributes::default_instance());
}

Op::Op(const Op& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.Op)
}

void Op::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  add_ = NULL;
  rem_ = NULL;
  mov_ = NULL;
  update_item_attributes_ = NULL;
  update_list_attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Op::~Op() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.Op)
  SharedDtor();
}

void Op::SharedDtor() {
  if (this != default_instance_) {
    delete add_;
    delete rem_;
    delete mov_;
    delete update_item_attributes_;
    delete update_list_attributes_;
  }
}

void Op::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Op::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_descriptor_;
}

const Op& Op::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

Op* Op::default_instance_ = NULL;

Op* Op::New() const {
  return new Op;
}

void Op::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    kind_ = 0;
    if (has_add()) {
      if (add_ != NULL) add_->::spotify::playlist4::proto::Add::Clear();
    }
    if (has_rem()) {
      if (rem_ != NULL) rem_->::spotify::playlist4::proto::Rem::Clear();
    }
    if (has_mov()) {
      if (mov_ != NULL) mov_->::spotify::playlist4::proto::Mov::Clear();
    }
    if (has_update_item_attributes()) {
      if (update_item_attributes_ != NULL) update_item_attributes_->::spotify::playlist4::proto::UpdateItemAttributes::Clear();
    }
    if (has_update_list_attributes()) {
      if (update_list_attributes_ != NULL) update_list_attributes_->::spotify::playlist4::proto::UpdateListAttributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Op::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.Op)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .spotify.playlist4.proto.Op.Kind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::playlist4::proto::Op_Kind_IsValid(value)) {
            set_kind(static_cast< ::spotify::playlist4::proto::Op_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_add;
        break;
      }

      // optional .spotify.playlist4.proto.Add add = 2;
      case 2: {
        if (tag == 18) {
         parse_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rem;
        break;
      }

      // optional .spotify.playlist4.proto.Rem rem = 3;
      case 3: {
        if (tag == 26) {
         parse_rem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mov;
        break;
      }

      // optional .spotify.playlist4.proto.Mov mov = 4;
      case 4: {
        if (tag == 34) {
         parse_mov:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mov()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_update_item_attributes;
        break;
      }

      // optional .spotify.playlist4.proto.UpdateItemAttributes update_item_attributes = 5;
      case 5: {
        if (tag == 42) {
         parse_update_item_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_item_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_update_list_attributes;
        break;
      }

      // optional .spotify.playlist4.proto.UpdateListAttributes update_list_attributes = 6;
      case 6: {
        if (tag == 50) {
         parse_update_list_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_list_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.Op)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.Op)
  return false;
#undef DO_
}

void Op::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.Op)
  // required .spotify.playlist4.proto.Op.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional .spotify.playlist4.proto.Add add = 2;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->add(), output);
  }

  // optional .spotify.playlist4.proto.Rem rem = 3;
  if (has_rem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rem(), output);
  }

  // optional .spotify.playlist4.proto.Mov mov = 4;
  if (has_mov()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mov(), output);
  }

  // optional .spotify.playlist4.proto.UpdateItemAttributes update_item_attributes = 5;
  if (has_update_item_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->update_item_attributes(), output);
  }

  // optional .spotify.playlist4.proto.UpdateListAttributes update_list_attributes = 6;
  if (has_update_list_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->update_list_attributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.Op)
}

::google::protobuf::uint8* Op::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.Op)
  // required .spotify.playlist4.proto.Op.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional .spotify.playlist4.proto.Add add = 2;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->add(), target);
  }

  // optional .spotify.playlist4.proto.Rem rem = 3;
  if (has_rem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rem(), target);
  }

  // optional .spotify.playlist4.proto.Mov mov = 4;
  if (has_mov()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mov(), target);
  }

  // optional .spotify.playlist4.proto.UpdateItemAttributes update_item_attributes = 5;
  if (has_update_item_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->update_item_attributes(), target);
  }

  // optional .spotify.playlist4.proto.UpdateListAttributes update_list_attributes = 6;
  if (has_update_list_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->update_list_attributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.Op)
  return target;
}

int Op::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .spotify.playlist4.proto.Op.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional .spotify.playlist4.proto.Add add = 2;
    if (has_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add());
    }

    // optional .spotify.playlist4.proto.Rem rem = 3;
    if (has_rem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rem());
    }

    // optional .spotify.playlist4.proto.Mov mov = 4;
    if (has_mov()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mov());
    }

    // optional .spotify.playlist4.proto.UpdateItemAttributes update_item_attributes = 5;
    if (has_update_item_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_item_attributes());
    }

    // optional .spotify.playlist4.proto.UpdateListAttributes update_list_attributes = 6;
    if (has_update_list_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_list_attributes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Op::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Op* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Op*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Op::MergeFrom(const Op& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_add()) {
      mutable_add()->::spotify::playlist4::proto::Add::MergeFrom(from.add());
    }
    if (from.has_rem()) {
      mutable_rem()->::spotify::playlist4::proto::Rem::MergeFrom(from.rem());
    }
    if (from.has_mov()) {
      mutable_mov()->::spotify::playlist4::proto::Mov::MergeFrom(from.mov());
    }
    if (from.has_update_item_attributes()) {
      mutable_update_item_attributes()->::spotify::playlist4::proto::UpdateItemAttributes::MergeFrom(from.update_item_attributes());
    }
    if (from.has_update_list_attributes()) {
      mutable_update_list_attributes()->::spotify::playlist4::proto::UpdateListAttributes::MergeFrom(from.update_list_attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Op::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Op::CopyFrom(const Op& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Op::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_add()) {
    if (!this->add().IsInitialized()) return false;
  }
  if (has_rem()) {
    if (!this->rem().IsInitialized()) return false;
  }
  if (has_mov()) {
    if (!this->mov().IsInitialized()) return false;
  }
  if (has_update_item_attributes()) {
    if (!this->update_item_attributes().IsInitialized()) return false;
  }
  if (has_update_list_attributes()) {
    if (!this->update_list_attributes().IsInitialized()) return false;
  }
  return true;
}

void Op::Swap(Op* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(add_, other->add_);
    std::swap(rem_, other->rem_);
    std::swap(mov_, other->mov_);
    std::swap(update_item_attributes_, other->update_item_attributes_);
    std::swap(update_list_attributes_, other->update_list_attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Op::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Op_descriptor_;
  metadata.reflection = Op_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpList::kOpsFieldNumber;
#endif  // !_MSC_VER

OpList::OpList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.OpList)
}

void OpList::InitAsDefaultInstance() {
}

OpList::OpList(const OpList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.OpList)
}

void OpList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpList::~OpList() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.OpList)
  SharedDtor();
}

void OpList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpList_descriptor_;
}

const OpList& OpList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4ops_2eproto();
  return *default_instance_;
}

OpList* OpList::default_instance_ = NULL;

OpList* OpList::New() const {
  return new OpList;
}

void OpList::Clear() {
  ops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.OpList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spotify.playlist4.proto.Op ops = 1;
      case 1: {
        if (tag == 10) {
         parse_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ops;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.OpList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.OpList)
  return false;
#undef DO_
}

void OpList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.OpList)
  // repeated .spotify.playlist4.proto.Op ops = 1;
  for (int i = 0; i < this->ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.OpList)
}

::google::protobuf::uint8* OpList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.OpList)
  // repeated .spotify.playlist4.proto.Op ops = 1;
  for (int i = 0; i < this->ops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.OpList)
  return target;
}

int OpList::ByteSize() const {
  int total_size = 0;

  // repeated .spotify.playlist4.proto.Op ops = 1;
  total_size += 1 * this->ops_size();
  for (int i = 0; i < this->ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpList::MergeFrom(const OpList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ops_.MergeFrom(from.ops_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpList::CopyFrom(const OpList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ops())) return false;
  return true;
}

void OpList::Swap(OpList* other) {
  if (other != this) {
    ops_.Swap(&other->ops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpList_descriptor_;
  metadata.reflection = OpList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

// @@protoc_insertion_point(global_scope)
