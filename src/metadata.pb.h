// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#ifndef PROTOBUF_metadata_2eproto__INCLUDED
#define PROTOBUF_metadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace metadata {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_metadata_2eproto();
void protobuf_AssignDesc_metadata_2eproto();
void protobuf_ShutdownFile_metadata_2eproto();

class TopTracks;
class ActivityPeriod;
class Artist;
class AlbumGroup;
class Date;
class Album;
class Track;
class Image;
class ImageGroup;
class Biography;
class Disc;
class Copyright;
class Restriction;
class SalePeriod;
class ExternalId;
class AudioFile;

enum Album_Type {
  Album_Type_ALBUM = 1,
  Album_Type_SINGLE = 2,
  Album_Type_COMPILATION = 3
};
bool Album_Type_IsValid(int value);
const Album_Type Album_Type_Type_MIN = Album_Type_ALBUM;
const Album_Type Album_Type_Type_MAX = Album_Type_COMPILATION;
const int Album_Type_Type_ARRAYSIZE = Album_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Album_Type_descriptor();
inline const ::std::string& Album_Type_Name(Album_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Album_Type_descriptor(), value);
}
inline bool Album_Type_Parse(
    const ::std::string& name, Album_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Album_Type>(
    Album_Type_descriptor(), name, value);
}
enum Image_Size {
  Image_Size_DEFAULT = 0,
  Image_Size_SMALL = 1,
  Image_Size_LARGE = 2,
  Image_Size_XLARGE = 3
};
bool Image_Size_IsValid(int value);
const Image_Size Image_Size_Size_MIN = Image_Size_DEFAULT;
const Image_Size Image_Size_Size_MAX = Image_Size_XLARGE;
const int Image_Size_Size_ARRAYSIZE = Image_Size_Size_MAX + 1;

const ::google::protobuf::EnumDescriptor* Image_Size_descriptor();
inline const ::std::string& Image_Size_Name(Image_Size value) {
  return ::google::protobuf::internal::NameOfEnum(
    Image_Size_descriptor(), value);
}
inline bool Image_Size_Parse(
    const ::std::string& name, Image_Size* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Image_Size>(
    Image_Size_descriptor(), name, value);
}
enum Copyright_Type {
  Copyright_Type_P = 0,
  Copyright_Type_C = 1
};
bool Copyright_Type_IsValid(int value);
const Copyright_Type Copyright_Type_Type_MIN = Copyright_Type_P;
const Copyright_Type Copyright_Type_Type_MAX = Copyright_Type_C;
const int Copyright_Type_Type_ARRAYSIZE = Copyright_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Copyright_Type_descriptor();
inline const ::std::string& Copyright_Type_Name(Copyright_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Copyright_Type_descriptor(), value);
}
inline bool Copyright_Type_Parse(
    const ::std::string& name, Copyright_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Copyright_Type>(
    Copyright_Type_descriptor(), name, value);
}
enum Restriction_Catalogue {
  Restriction_Catalogue_AD = 0,
  Restriction_Catalogue_SUBSCRIPTION = 1,
  Restriction_Catalogue_SHUFFLE = 3
};
bool Restriction_Catalogue_IsValid(int value);
const Restriction_Catalogue Restriction_Catalogue_Catalogue_MIN = Restriction_Catalogue_AD;
const Restriction_Catalogue Restriction_Catalogue_Catalogue_MAX = Restriction_Catalogue_SHUFFLE;
const int Restriction_Catalogue_Catalogue_ARRAYSIZE = Restriction_Catalogue_Catalogue_MAX + 1;

const ::google::protobuf::EnumDescriptor* Restriction_Catalogue_descriptor();
inline const ::std::string& Restriction_Catalogue_Name(Restriction_Catalogue value) {
  return ::google::protobuf::internal::NameOfEnum(
    Restriction_Catalogue_descriptor(), value);
}
inline bool Restriction_Catalogue_Parse(
    const ::std::string& name, Restriction_Catalogue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Restriction_Catalogue>(
    Restriction_Catalogue_descriptor(), name, value);
}
enum Restriction_Type {
  Restriction_Type_STREAMING = 0
};
bool Restriction_Type_IsValid(int value);
const Restriction_Type Restriction_Type_Type_MIN = Restriction_Type_STREAMING;
const Restriction_Type Restriction_Type_Type_MAX = Restriction_Type_STREAMING;
const int Restriction_Type_Type_ARRAYSIZE = Restriction_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Restriction_Type_descriptor();
inline const ::std::string& Restriction_Type_Name(Restriction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Restriction_Type_descriptor(), value);
}
inline bool Restriction_Type_Parse(
    const ::std::string& name, Restriction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Restriction_Type>(
    Restriction_Type_descriptor(), name, value);
}
enum AudioFile_Format {
  AudioFile_Format_OGG_VORBIS_96 = 0,
  AudioFile_Format_OGG_VORBIS_160 = 1,
  AudioFile_Format_OGG_VORBIS_320 = 2,
  AudioFile_Format_MP3_256 = 3,
  AudioFile_Format_MP3_320 = 4,
  AudioFile_Format_MP3_160 = 5,
  AudioFile_Format_MP3_96 = 6
};
bool AudioFile_Format_IsValid(int value);
const AudioFile_Format AudioFile_Format_Format_MIN = AudioFile_Format_OGG_VORBIS_96;
const AudioFile_Format AudioFile_Format_Format_MAX = AudioFile_Format_MP3_96;
const int AudioFile_Format_Format_ARRAYSIZE = AudioFile_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioFile_Format_descriptor();
inline const ::std::string& AudioFile_Format_Name(AudioFile_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioFile_Format_descriptor(), value);
}
inline bool AudioFile_Format_Parse(
    const ::std::string& name, AudioFile_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioFile_Format>(
    AudioFile_Format_descriptor(), name, value);
}
// ===================================================================

class TopTracks : public ::google::protobuf::Message {
 public:
  TopTracks();
  virtual ~TopTracks();

  TopTracks(const TopTracks& from);

  inline TopTracks& operator=(const TopTracks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopTracks& default_instance();

  void Swap(TopTracks* other);

  // implements Message ----------------------------------------------

  TopTracks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopTracks& from);
  void MergeFrom(const TopTracks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // repeated .spotify.metadata.proto.Track track = 2;
  inline int track_size() const;
  inline void clear_track();
  static const int kTrackFieldNumber = 2;
  inline const ::spotify::metadata::proto::Track& track(int index) const;
  inline ::spotify::metadata::proto::Track* mutable_track(int index);
  inline ::spotify::metadata::proto::Track* add_track();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >&
      track() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >*
      mutable_track();

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.TopTracks)
 private:
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* country_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track > track_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static TopTracks* default_instance_;
};
// -------------------------------------------------------------------

class ActivityPeriod : public ::google::protobuf::Message {
 public:
  ActivityPeriod();
  virtual ~ActivityPeriod();

  ActivityPeriod(const ActivityPeriod& from);

  inline ActivityPeriod& operator=(const ActivityPeriod& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityPeriod& default_instance();

  void Swap(ActivityPeriod* other);

  // implements Message ----------------------------------------------

  ActivityPeriod* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityPeriod& from);
  void MergeFrom(const ActivityPeriod& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 start_year = 1;
  inline bool has_start_year() const;
  inline void clear_start_year();
  static const int kStartYearFieldNumber = 1;
  inline ::google::protobuf::int32 start_year() const;
  inline void set_start_year(::google::protobuf::int32 value);

  // optional sint32 end_year = 2;
  inline bool has_end_year() const;
  inline void clear_end_year();
  static const int kEndYearFieldNumber = 2;
  inline ::google::protobuf::int32 end_year() const;
  inline void set_end_year(::google::protobuf::int32 value);

  // optional sint32 decade = 3;
  inline bool has_decade() const;
  inline void clear_decade();
  static const int kDecadeFieldNumber = 3;
  inline ::google::protobuf::int32 decade() const;
  inline void set_decade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.ActivityPeriod)
 private:
  inline void set_has_start_year();
  inline void clear_has_start_year();
  inline void set_has_end_year();
  inline void clear_has_end_year();
  inline void set_has_decade();
  inline void clear_has_decade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 start_year_;
  ::google::protobuf::int32 end_year_;
  ::google::protobuf::int32 decade_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static ActivityPeriod* default_instance_;
};
// -------------------------------------------------------------------

class Artist : public ::google::protobuf::Message {
 public:
  Artist();
  virtual ~Artist();

  Artist(const Artist& from);

  inline Artist& operator=(const Artist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Artist& default_instance();

  void Swap(Artist* other);

  // implements Message ----------------------------------------------

  Artist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Artist& from);
  void MergeFrom(const Artist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const void* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional sint32 popularity = 3;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 3;
  inline ::google::protobuf::int32 popularity() const;
  inline void set_popularity(::google::protobuf::int32 value);

  // repeated .spotify.metadata.proto.TopTracks top_track = 4;
  inline int top_track_size() const;
  inline void clear_top_track();
  static const int kTopTrackFieldNumber = 4;
  inline const ::spotify::metadata::proto::TopTracks& top_track(int index) const;
  inline ::spotify::metadata::proto::TopTracks* mutable_top_track(int index);
  inline ::spotify::metadata::proto::TopTracks* add_top_track();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::TopTracks >&
      top_track() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::TopTracks >*
      mutable_top_track();

  // repeated .spotify.metadata.proto.AlbumGroup album_group = 5;
  inline int album_group_size() const;
  inline void clear_album_group();
  static const int kAlbumGroupFieldNumber = 5;
  inline const ::spotify::metadata::proto::AlbumGroup& album_group(int index) const;
  inline ::spotify::metadata::proto::AlbumGroup* mutable_album_group(int index);
  inline ::spotify::metadata::proto::AlbumGroup* add_album_group();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >&
      album_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >*
      mutable_album_group();

  // repeated .spotify.metadata.proto.AlbumGroup single_group = 6;
  inline int single_group_size() const;
  inline void clear_single_group();
  static const int kSingleGroupFieldNumber = 6;
  inline const ::spotify::metadata::proto::AlbumGroup& single_group(int index) const;
  inline ::spotify::metadata::proto::AlbumGroup* mutable_single_group(int index);
  inline ::spotify::metadata::proto::AlbumGroup* add_single_group();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >&
      single_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >*
      mutable_single_group();

  // repeated .spotify.metadata.proto.AlbumGroup compilation_group = 7;
  inline int compilation_group_size() const;
  inline void clear_compilation_group();
  static const int kCompilationGroupFieldNumber = 7;
  inline const ::spotify::metadata::proto::AlbumGroup& compilation_group(int index) const;
  inline ::spotify::metadata::proto::AlbumGroup* mutable_compilation_group(int index);
  inline ::spotify::metadata::proto::AlbumGroup* add_compilation_group();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >&
      compilation_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >*
      mutable_compilation_group();

  // repeated .spotify.metadata.proto.AlbumGroup appears_on_group = 8;
  inline int appears_on_group_size() const;
  inline void clear_appears_on_group();
  static const int kAppearsOnGroupFieldNumber = 8;
  inline const ::spotify::metadata::proto::AlbumGroup& appears_on_group(int index) const;
  inline ::spotify::metadata::proto::AlbumGroup* mutable_appears_on_group(int index);
  inline ::spotify::metadata::proto::AlbumGroup* add_appears_on_group();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >&
      appears_on_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >*
      mutable_appears_on_group();

  // repeated string genre = 9;
  inline int genre_size() const;
  inline void clear_genre();
  static const int kGenreFieldNumber = 9;
  inline const ::std::string& genre(int index) const;
  inline ::std::string* mutable_genre(int index);
  inline void set_genre(int index, const ::std::string& value);
  inline void set_genre(int index, const char* value);
  inline void set_genre(int index, const char* value, size_t size);
  inline ::std::string* add_genre();
  inline void add_genre(const ::std::string& value);
  inline void add_genre(const char* value);
  inline void add_genre(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& genre() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_genre();

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  inline int external_id_size() const;
  inline void clear_external_id();
  static const int kExternalIdFieldNumber = 10;
  inline const ::spotify::metadata::proto::ExternalId& external_id(int index) const;
  inline ::spotify::metadata::proto::ExternalId* mutable_external_id(int index);
  inline ::spotify::metadata::proto::ExternalId* add_external_id();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >&
      external_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >*
      mutable_external_id();

  // repeated .spotify.metadata.proto.Image portrait = 11;
  inline int portrait_size() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 11;
  inline const ::spotify::metadata::proto::Image& portrait(int index) const;
  inline ::spotify::metadata::proto::Image* mutable_portrait(int index);
  inline ::spotify::metadata::proto::Image* add_portrait();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >&
      portrait() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >*
      mutable_portrait();

  // repeated .spotify.metadata.proto.Biography biography = 12;
  inline int biography_size() const;
  inline void clear_biography();
  static const int kBiographyFieldNumber = 12;
  inline const ::spotify::metadata::proto::Biography& biography(int index) const;
  inline ::spotify::metadata::proto::Biography* mutable_biography(int index);
  inline ::spotify::metadata::proto::Biography* add_biography();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Biography >&
      biography() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Biography >*
      mutable_biography();

  // repeated .spotify.metadata.proto.ActivityPeriod activity_period = 13;
  inline int activity_period_size() const;
  inline void clear_activity_period();
  static const int kActivityPeriodFieldNumber = 13;
  inline const ::spotify::metadata::proto::ActivityPeriod& activity_period(int index) const;
  inline ::spotify::metadata::proto::ActivityPeriod* mutable_activity_period(int index);
  inline ::spotify::metadata::proto::ActivityPeriod* add_activity_period();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ActivityPeriod >&
      activity_period() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ActivityPeriod >*
      mutable_activity_period();

  // repeated .spotify.metadata.proto.Restriction restriction = 14;
  inline int restriction_size() const;
  inline void clear_restriction();
  static const int kRestrictionFieldNumber = 14;
  inline const ::spotify::metadata::proto::Restriction& restriction(int index) const;
  inline ::spotify::metadata::proto::Restriction* mutable_restriction(int index);
  inline ::spotify::metadata::proto::Restriction* add_restriction();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >&
      restriction() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >*
      mutable_restriction();

  // repeated .spotify.metadata.proto.Artist related = 15;
  inline int related_size() const;
  inline void clear_related();
  static const int kRelatedFieldNumber = 15;
  inline const ::spotify::metadata::proto::Artist& related(int index) const;
  inline ::spotify::metadata::proto::Artist* mutable_related(int index);
  inline ::spotify::metadata::proto::Artist* add_related();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >&
      related() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >*
      mutable_related();

  // optional bool is_portrait_album_cover = 16;
  inline bool has_is_portrait_album_cover() const;
  inline void clear_is_portrait_album_cover();
  static const int kIsPortraitAlbumCoverFieldNumber = 16;
  inline bool is_portrait_album_cover() const;
  inline void set_is_portrait_album_cover(bool value);

  // optional .spotify.metadata.proto.ImageGroup portrait_group = 17;
  inline bool has_portrait_group() const;
  inline void clear_portrait_group();
  static const int kPortraitGroupFieldNumber = 17;
  inline const ::spotify::metadata::proto::ImageGroup& portrait_group() const;
  inline ::spotify::metadata::proto::ImageGroup* mutable_portrait_group();
  inline ::spotify::metadata::proto::ImageGroup* release_portrait_group();
  inline void set_allocated_portrait_group(::spotify::metadata::proto::ImageGroup* portrait_group);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Artist)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_is_portrait_album_cover();
  inline void clear_has_is_portrait_album_cover();
  inline void set_has_portrait_group();
  inline void clear_has_portrait_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::TopTracks > top_track_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup > album_group_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup > single_group_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup > compilation_group_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup > appears_on_group_;
  ::google::protobuf::RepeatedPtrField< ::std::string> genre_;
  ::google::protobuf::int32 popularity_;
  bool is_portrait_album_cover_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId > external_id_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image > portrait_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Biography > biography_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ActivityPeriod > activity_period_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction > restriction_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist > related_;
  ::spotify::metadata::proto::ImageGroup* portrait_group_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Artist* default_instance_;
};
// -------------------------------------------------------------------

class AlbumGroup : public ::google::protobuf::Message {
 public:
  AlbumGroup();
  virtual ~AlbumGroup();

  AlbumGroup(const AlbumGroup& from);

  inline AlbumGroup& operator=(const AlbumGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlbumGroup& default_instance();

  void Swap(AlbumGroup* other);

  // implements Message ----------------------------------------------

  AlbumGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlbumGroup& from);
  void MergeFrom(const AlbumGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .spotify.metadata.proto.Album album = 1;
  inline int album_size() const;
  inline void clear_album();
  static const int kAlbumFieldNumber = 1;
  inline const ::spotify::metadata::proto::Album& album(int index) const;
  inline ::spotify::metadata::proto::Album* mutable_album(int index);
  inline ::spotify::metadata::proto::Album* add_album();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album >&
      album() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album >*
      mutable_album();

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.AlbumGroup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album > album_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static AlbumGroup* default_instance_;
};
// -------------------------------------------------------------------

class Date : public ::google::protobuf::Message {
 public:
  Date();
  virtual ~Date();

  Date(const Date& from);

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Date& default_instance();

  void Swap(Date* other);

  // implements Message ----------------------------------------------

  Date* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::int32 year() const;
  inline void set_year(::google::protobuf::int32 value);

  // optional sint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::int32 month() const;
  inline void set_month(::google::protobuf::int32 value);

  // optional sint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Date)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 day_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Date* default_instance_;
};
// -------------------------------------------------------------------

class Album : public ::google::protobuf::Message {
 public:
  Album();
  virtual ~Album();

  Album(const Album& from);

  inline Album& operator=(const Album& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Album& default_instance();

  void Swap(Album* other);

  // implements Message ----------------------------------------------

  Album* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Album& from);
  void MergeFrom(const Album& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Album_Type Type;
  static const Type ALBUM = Album_Type_ALBUM;
  static const Type SINGLE = Album_Type_SINGLE;
  static const Type COMPILATION = Album_Type_COMPILATION;
  static inline bool Type_IsValid(int value) {
    return Album_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Album_Type_Type_MIN;
  static const Type Type_MAX =
    Album_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Album_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Album_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Album_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Album_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const void* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .spotify.metadata.proto.Artist artist = 3;
  inline int artist_size() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 3;
  inline const ::spotify::metadata::proto::Artist& artist(int index) const;
  inline ::spotify::metadata::proto::Artist* mutable_artist(int index);
  inline ::spotify::metadata::proto::Artist* add_artist();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >&
      artist() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >*
      mutable_artist();

  // optional .spotify.metadata.proto.Album.Type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::spotify::metadata::proto::Album_Type type() const;
  inline void set_type(::spotify::metadata::proto::Album_Type value);

  // optional string label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // optional .spotify.metadata.proto.Date date = 6;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 6;
  inline const ::spotify::metadata::proto::Date& date() const;
  inline ::spotify::metadata::proto::Date* mutable_date();
  inline ::spotify::metadata::proto::Date* release_date();
  inline void set_allocated_date(::spotify::metadata::proto::Date* date);

  // optional sint32 popularity = 7;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 7;
  inline ::google::protobuf::int32 popularity() const;
  inline void set_popularity(::google::protobuf::int32 value);

  // repeated string genre = 8;
  inline int genre_size() const;
  inline void clear_genre();
  static const int kGenreFieldNumber = 8;
  inline const ::std::string& genre(int index) const;
  inline ::std::string* mutable_genre(int index);
  inline void set_genre(int index, const ::std::string& value);
  inline void set_genre(int index, const char* value);
  inline void set_genre(int index, const char* value, size_t size);
  inline ::std::string* add_genre();
  inline void add_genre(const ::std::string& value);
  inline void add_genre(const char* value);
  inline void add_genre(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& genre() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_genre();

  // repeated .spotify.metadata.proto.Image cover = 9;
  inline int cover_size() const;
  inline void clear_cover();
  static const int kCoverFieldNumber = 9;
  inline const ::spotify::metadata::proto::Image& cover(int index) const;
  inline ::spotify::metadata::proto::Image* mutable_cover(int index);
  inline ::spotify::metadata::proto::Image* add_cover();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >&
      cover() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >*
      mutable_cover();

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  inline int external_id_size() const;
  inline void clear_external_id();
  static const int kExternalIdFieldNumber = 10;
  inline const ::spotify::metadata::proto::ExternalId& external_id(int index) const;
  inline ::spotify::metadata::proto::ExternalId* mutable_external_id(int index);
  inline ::spotify::metadata::proto::ExternalId* add_external_id();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >&
      external_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >*
      mutable_external_id();

  // repeated .spotify.metadata.proto.Disc disc = 11;
  inline int disc_size() const;
  inline void clear_disc();
  static const int kDiscFieldNumber = 11;
  inline const ::spotify::metadata::proto::Disc& disc(int index) const;
  inline ::spotify::metadata::proto::Disc* mutable_disc(int index);
  inline ::spotify::metadata::proto::Disc* add_disc();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Disc >&
      disc() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Disc >*
      mutable_disc();

  // repeated string review = 12;
  inline int review_size() const;
  inline void clear_review();
  static const int kReviewFieldNumber = 12;
  inline const ::std::string& review(int index) const;
  inline ::std::string* mutable_review(int index);
  inline void set_review(int index, const ::std::string& value);
  inline void set_review(int index, const char* value);
  inline void set_review(int index, const char* value, size_t size);
  inline ::std::string* add_review();
  inline void add_review(const ::std::string& value);
  inline void add_review(const char* value);
  inline void add_review(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& review() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_review();

  // repeated .spotify.metadata.proto.Copyright copyright = 13;
  inline int copyright_size() const;
  inline void clear_copyright();
  static const int kCopyrightFieldNumber = 13;
  inline const ::spotify::metadata::proto::Copyright& copyright(int index) const;
  inline ::spotify::metadata::proto::Copyright* mutable_copyright(int index);
  inline ::spotify::metadata::proto::Copyright* add_copyright();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Copyright >&
      copyright() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Copyright >*
      mutable_copyright();

  // repeated .spotify.metadata.proto.Restriction restriction = 14;
  inline int restriction_size() const;
  inline void clear_restriction();
  static const int kRestrictionFieldNumber = 14;
  inline const ::spotify::metadata::proto::Restriction& restriction(int index) const;
  inline ::spotify::metadata::proto::Restriction* mutable_restriction(int index);
  inline ::spotify::metadata::proto::Restriction* add_restriction();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >&
      restriction() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >*
      mutable_restriction();

  // repeated .spotify.metadata.proto.Album related = 15;
  inline int related_size() const;
  inline void clear_related();
  static const int kRelatedFieldNumber = 15;
  inline const ::spotify::metadata::proto::Album& related(int index) const;
  inline ::spotify::metadata::proto::Album* mutable_related(int index);
  inline ::spotify::metadata::proto::Album* add_related();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album >&
      related() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album >*
      mutable_related();

  // repeated .spotify.metadata.proto.SalePeriod sale_period = 16;
  inline int sale_period_size() const;
  inline void clear_sale_period();
  static const int kSalePeriodFieldNumber = 16;
  inline const ::spotify::metadata::proto::SalePeriod& sale_period(int index) const;
  inline ::spotify::metadata::proto::SalePeriod* mutable_sale_period(int index);
  inline ::spotify::metadata::proto::SalePeriod* add_sale_period();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod >&
      sale_period() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod >*
      mutable_sale_period();

  // optional .spotify.metadata.proto.ImageGroup cover_group = 17;
  inline bool has_cover_group() const;
  inline void clear_cover_group();
  static const int kCoverGroupFieldNumber = 17;
  inline const ::spotify::metadata::proto::ImageGroup& cover_group() const;
  inline ::spotify::metadata::proto::ImageGroup* mutable_cover_group();
  inline ::spotify::metadata::proto::ImageGroup* release_cover_group();
  inline void set_allocated_cover_group(::spotify::metadata::proto::ImageGroup* cover_group);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Album)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_cover_group();
  inline void clear_has_cover_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist > artist_;
  ::std::string* label_;
  int type_;
  ::google::protobuf::int32 popularity_;
  ::spotify::metadata::proto::Date* date_;
  ::google::protobuf::RepeatedPtrField< ::std::string> genre_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image > cover_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId > external_id_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Disc > disc_;
  ::google::protobuf::RepeatedPtrField< ::std::string> review_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Copyright > copyright_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction > restriction_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album > related_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod > sale_period_;
  ::spotify::metadata::proto::ImageGroup* cover_group_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Album* default_instance_;
};
// -------------------------------------------------------------------

class Track : public ::google::protobuf::Message {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();

  void Swap(Track* other);

  // implements Message ----------------------------------------------

  Track* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const void* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .spotify.metadata.proto.Album album = 3;
  inline bool has_album() const;
  inline void clear_album();
  static const int kAlbumFieldNumber = 3;
  inline const ::spotify::metadata::proto::Album& album() const;
  inline ::spotify::metadata::proto::Album* mutable_album();
  inline ::spotify::metadata::proto::Album* release_album();
  inline void set_allocated_album(::spotify::metadata::proto::Album* album);

  // repeated .spotify.metadata.proto.Artist artist = 4;
  inline int artist_size() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 4;
  inline const ::spotify::metadata::proto::Artist& artist(int index) const;
  inline ::spotify::metadata::proto::Artist* mutable_artist(int index);
  inline ::spotify::metadata::proto::Artist* add_artist();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >&
      artist() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >*
      mutable_artist();

  // optional sint32 number = 5;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 5;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // optional sint32 disc_number = 6;
  inline bool has_disc_number() const;
  inline void clear_disc_number();
  static const int kDiscNumberFieldNumber = 6;
  inline ::google::protobuf::int32 disc_number() const;
  inline void set_disc_number(::google::protobuf::int32 value);

  // optional sint32 duration = 7;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 7;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // optional sint32 popularity = 8;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 8;
  inline ::google::protobuf::int32 popularity() const;
  inline void set_popularity(::google::protobuf::int32 value);

  // optional bool explicit = 9;
  inline bool has_explicit_() const;
  inline void clear_explicit_();
  static const int kExplicitFieldNumber = 9;
  inline bool explicit_() const;
  inline void set_explicit_(bool value);

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  inline int external_id_size() const;
  inline void clear_external_id();
  static const int kExternalIdFieldNumber = 10;
  inline const ::spotify::metadata::proto::ExternalId& external_id(int index) const;
  inline ::spotify::metadata::proto::ExternalId* mutable_external_id(int index);
  inline ::spotify::metadata::proto::ExternalId* add_external_id();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >&
      external_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >*
      mutable_external_id();

  // repeated .spotify.metadata.proto.Restriction restriction = 11;
  inline int restriction_size() const;
  inline void clear_restriction();
  static const int kRestrictionFieldNumber = 11;
  inline const ::spotify::metadata::proto::Restriction& restriction(int index) const;
  inline ::spotify::metadata::proto::Restriction* mutable_restriction(int index);
  inline ::spotify::metadata::proto::Restriction* add_restriction();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >&
      restriction() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >*
      mutable_restriction();

  // repeated .spotify.metadata.proto.AudioFile file = 12;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 12;
  inline const ::spotify::metadata::proto::AudioFile& file(int index) const;
  inline ::spotify::metadata::proto::AudioFile* mutable_file(int index);
  inline ::spotify::metadata::proto::AudioFile* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile >*
      mutable_file();

  // repeated .spotify.metadata.proto.Track alternative = 13;
  inline int alternative_size() const;
  inline void clear_alternative();
  static const int kAlternativeFieldNumber = 13;
  inline const ::spotify::metadata::proto::Track& alternative(int index) const;
  inline ::spotify::metadata::proto::Track* mutable_alternative(int index);
  inline ::spotify::metadata::proto::Track* add_alternative();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >&
      alternative() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >*
      mutable_alternative();

  // repeated .spotify.metadata.proto.SalePeriod sale_period = 14;
  inline int sale_period_size() const;
  inline void clear_sale_period();
  static const int kSalePeriodFieldNumber = 14;
  inline const ::spotify::metadata::proto::SalePeriod& sale_period(int index) const;
  inline ::spotify::metadata::proto::SalePeriod* mutable_sale_period(int index);
  inline ::spotify::metadata::proto::SalePeriod* add_sale_period();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod >&
      sale_period() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod >*
      mutable_sale_period();

  // repeated .spotify.metadata.proto.AudioFile preview = 15;
  inline int preview_size() const;
  inline void clear_preview();
  static const int kPreviewFieldNumber = 15;
  inline const ::spotify::metadata::proto::AudioFile& preview(int index) const;
  inline ::spotify::metadata::proto::AudioFile* mutable_preview(int index);
  inline ::spotify::metadata::proto::AudioFile* add_preview();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile >&
      preview() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile >*
      mutable_preview();

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Track)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_album();
  inline void clear_has_album();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_disc_number();
  inline void clear_has_disc_number();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_explicit_();
  inline void clear_has_explicit_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gid_;
  ::std::string* name_;
  ::spotify::metadata::proto::Album* album_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist > artist_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 disc_number_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 popularity_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId > external_id_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction > restriction_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile > file_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track > alternative_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod > sale_period_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile > preview_;
  bool explicit__;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Track* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Image_Size Size;
  static const Size DEFAULT = Image_Size_DEFAULT;
  static const Size SMALL = Image_Size_SMALL;
  static const Size LARGE = Image_Size_LARGE;
  static const Size XLARGE = Image_Size_XLARGE;
  static inline bool Size_IsValid(int value) {
    return Image_Size_IsValid(value);
  }
  static const Size Size_MIN =
    Image_Size_Size_MIN;
  static const Size Size_MAX =
    Image_Size_Size_MAX;
  static const int Size_ARRAYSIZE =
    Image_Size_Size_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Size_descriptor() {
    return Image_Size_descriptor();
  }
  static inline const ::std::string& Size_Name(Size value) {
    return Image_Size_Name(value);
  }
  static inline bool Size_Parse(const ::std::string& name,
      Size* value) {
    return Image_Size_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes file_id = 1;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  inline const ::std::string& file_id() const;
  inline void set_file_id(const ::std::string& value);
  inline void set_file_id(const char* value);
  inline void set_file_id(const void* value, size_t size);
  inline ::std::string* mutable_file_id();
  inline ::std::string* release_file_id();
  inline void set_allocated_file_id(::std::string* file_id);

  // optional .spotify.metadata.proto.Image.Size size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::spotify::metadata::proto::Image_Size size() const;
  inline void set_size(::spotify::metadata::proto::Image_Size value);

  // optional sint32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional sint32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Image)
 private:
  inline void set_has_file_id();
  inline void clear_has_file_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_id_;
  int size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class ImageGroup : public ::google::protobuf::Message {
 public:
  ImageGroup();
  virtual ~ImageGroup();

  ImageGroup(const ImageGroup& from);

  inline ImageGroup& operator=(const ImageGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageGroup& default_instance();

  void Swap(ImageGroup* other);

  // implements Message ----------------------------------------------

  ImageGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageGroup& from);
  void MergeFrom(const ImageGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .spotify.metadata.proto.Image image = 1;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline const ::spotify::metadata::proto::Image& image(int index) const;
  inline ::spotify::metadata::proto::Image* mutable_image(int index);
  inline ::spotify::metadata::proto::Image* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >*
      mutable_image();

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.ImageGroup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image > image_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static ImageGroup* default_instance_;
};
// -------------------------------------------------------------------

class Biography : public ::google::protobuf::Message {
 public:
  Biography();
  virtual ~Biography();

  Biography(const Biography& from);

  inline Biography& operator=(const Biography& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Biography& default_instance();

  void Swap(Biography* other);

  // implements Message ----------------------------------------------

  Biography* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Biography& from);
  void MergeFrom(const Biography& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // repeated .spotify.metadata.proto.Image portrait = 2;
  inline int portrait_size() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 2;
  inline const ::spotify::metadata::proto::Image& portrait(int index) const;
  inline ::spotify::metadata::proto::Image* mutable_portrait(int index);
  inline ::spotify::metadata::proto::Image* add_portrait();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >&
      portrait() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >*
      mutable_portrait();

  // repeated .spotify.metadata.proto.ImageGroup portrait_group = 3;
  inline int portrait_group_size() const;
  inline void clear_portrait_group();
  static const int kPortraitGroupFieldNumber = 3;
  inline const ::spotify::metadata::proto::ImageGroup& portrait_group(int index) const;
  inline ::spotify::metadata::proto::ImageGroup* mutable_portrait_group(int index);
  inline ::spotify::metadata::proto::ImageGroup* add_portrait_group();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ImageGroup >&
      portrait_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ImageGroup >*
      mutable_portrait_group();

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Biography)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image > portrait_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ImageGroup > portrait_group_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Biography* default_instance_;
};
// -------------------------------------------------------------------

class Disc : public ::google::protobuf::Message {
 public:
  Disc();
  virtual ~Disc();

  Disc(const Disc& from);

  inline Disc& operator=(const Disc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Disc& default_instance();

  void Swap(Disc* other);

  // implements Message ----------------------------------------------

  Disc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Disc& from);
  void MergeFrom(const Disc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .spotify.metadata.proto.Track track = 3;
  inline int track_size() const;
  inline void clear_track();
  static const int kTrackFieldNumber = 3;
  inline const ::spotify::metadata::proto::Track& track(int index) const;
  inline ::spotify::metadata::proto::Track* mutable_track(int index);
  inline ::spotify::metadata::proto::Track* add_track();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >&
      track() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >*
      mutable_track();

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Disc)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track > track_;
  ::google::protobuf::int32 number_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Disc* default_instance_;
};
// -------------------------------------------------------------------

class Copyright : public ::google::protobuf::Message {
 public:
  Copyright();
  virtual ~Copyright();

  Copyright(const Copyright& from);

  inline Copyright& operator=(const Copyright& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Copyright& default_instance();

  void Swap(Copyright* other);

  // implements Message ----------------------------------------------

  Copyright* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Copyright& from);
  void MergeFrom(const Copyright& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Copyright_Type Type;
  static const Type P = Copyright_Type_P;
  static const Type C = Copyright_Type_C;
  static inline bool Type_IsValid(int value) {
    return Copyright_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Copyright_Type_Type_MIN;
  static const Type Type_MAX =
    Copyright_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Copyright_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Copyright_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Copyright_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Copyright_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .spotify.metadata.proto.Copyright.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::spotify::metadata::proto::Copyright_Type type() const;
  inline void set_type(::spotify::metadata::proto::Copyright_Type value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Copyright)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  int type_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Copyright* default_instance_;
};
// -------------------------------------------------------------------

class Restriction : public ::google::protobuf::Message {
 public:
  Restriction();
  virtual ~Restriction();

  Restriction(const Restriction& from);

  inline Restriction& operator=(const Restriction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Restriction& default_instance();

  void Swap(Restriction* other);

  // implements Message ----------------------------------------------

  Restriction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Restriction& from);
  void MergeFrom(const Restriction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Restriction_Catalogue Catalogue;
  static const Catalogue AD = Restriction_Catalogue_AD;
  static const Catalogue SUBSCRIPTION = Restriction_Catalogue_SUBSCRIPTION;
  static const Catalogue SHUFFLE = Restriction_Catalogue_SHUFFLE;
  static inline bool Catalogue_IsValid(int value) {
    return Restriction_Catalogue_IsValid(value);
  }
  static const Catalogue Catalogue_MIN =
    Restriction_Catalogue_Catalogue_MIN;
  static const Catalogue Catalogue_MAX =
    Restriction_Catalogue_Catalogue_MAX;
  static const int Catalogue_ARRAYSIZE =
    Restriction_Catalogue_Catalogue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Catalogue_descriptor() {
    return Restriction_Catalogue_descriptor();
  }
  static inline const ::std::string& Catalogue_Name(Catalogue value) {
    return Restriction_Catalogue_Name(value);
  }
  static inline bool Catalogue_Parse(const ::std::string& name,
      Catalogue* value) {
    return Restriction_Catalogue_Parse(name, value);
  }

  typedef Restriction_Type Type;
  static const Type STREAMING = Restriction_Type_STREAMING;
  static inline bool Type_IsValid(int value) {
    return Restriction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Restriction_Type_Type_MIN;
  static const Type Type_MAX =
    Restriction_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Restriction_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Restriction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Restriction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Restriction_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .spotify.metadata.proto.Restriction.Catalogue catalogue = 1;
  inline int catalogue_size() const;
  inline void clear_catalogue();
  static const int kCatalogueFieldNumber = 1;
  inline ::spotify::metadata::proto::Restriction_Catalogue catalogue(int index) const;
  inline void set_catalogue(int index, ::spotify::metadata::proto::Restriction_Catalogue value);
  inline void add_catalogue(::spotify::metadata::proto::Restriction_Catalogue value);
  inline const ::google::protobuf::RepeatedField<int>& catalogue() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_catalogue();

  // optional string countries_allowed = 2;
  inline bool has_countries_allowed() const;
  inline void clear_countries_allowed();
  static const int kCountriesAllowedFieldNumber = 2;
  inline const ::std::string& countries_allowed() const;
  inline void set_countries_allowed(const ::std::string& value);
  inline void set_countries_allowed(const char* value);
  inline void set_countries_allowed(const char* value, size_t size);
  inline ::std::string* mutable_countries_allowed();
  inline ::std::string* release_countries_allowed();
  inline void set_allocated_countries_allowed(::std::string* countries_allowed);

  // optional string countries_forbidden = 3;
  inline bool has_countries_forbidden() const;
  inline void clear_countries_forbidden();
  static const int kCountriesForbiddenFieldNumber = 3;
  inline const ::std::string& countries_forbidden() const;
  inline void set_countries_forbidden(const ::std::string& value);
  inline void set_countries_forbidden(const char* value);
  inline void set_countries_forbidden(const char* value, size_t size);
  inline ::std::string* mutable_countries_forbidden();
  inline ::std::string* release_countries_forbidden();
  inline void set_allocated_countries_forbidden(::std::string* countries_forbidden);

  // optional .spotify.metadata.proto.Restriction.Type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::spotify::metadata::proto::Restriction_Type type() const;
  inline void set_type(::spotify::metadata::proto::Restriction_Type value);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.Restriction)
 private:
  inline void set_has_countries_allowed();
  inline void clear_has_countries_allowed();
  inline void set_has_countries_forbidden();
  inline void clear_has_countries_forbidden();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> catalogue_;
  ::std::string* countries_allowed_;
  ::std::string* countries_forbidden_;
  int type_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static Restriction* default_instance_;
};
// -------------------------------------------------------------------

class SalePeriod : public ::google::protobuf::Message {
 public:
  SalePeriod();
  virtual ~SalePeriod();

  SalePeriod(const SalePeriod& from);

  inline SalePeriod& operator=(const SalePeriod& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SalePeriod& default_instance();

  void Swap(SalePeriod* other);

  // implements Message ----------------------------------------------

  SalePeriod* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SalePeriod& from);
  void MergeFrom(const SalePeriod& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .spotify.metadata.proto.Restriction restriction = 1;
  inline int restriction_size() const;
  inline void clear_restriction();
  static const int kRestrictionFieldNumber = 1;
  inline const ::spotify::metadata::proto::Restriction& restriction(int index) const;
  inline ::spotify::metadata::proto::Restriction* mutable_restriction(int index);
  inline ::spotify::metadata::proto::Restriction* add_restriction();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >&
      restriction() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >*
      mutable_restriction();

  // optional .spotify.metadata.proto.Date start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline const ::spotify::metadata::proto::Date& start() const;
  inline ::spotify::metadata::proto::Date* mutable_start();
  inline ::spotify::metadata::proto::Date* release_start();
  inline void set_allocated_start(::spotify::metadata::proto::Date* start);

  // optional .spotify.metadata.proto.Date end = 3;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 3;
  inline const ::spotify::metadata::proto::Date& end() const;
  inline ::spotify::metadata::proto::Date* mutable_end();
  inline ::spotify::metadata::proto::Date* release_end();
  inline void set_allocated_end(::spotify::metadata::proto::Date* end);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.SalePeriod)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction > restriction_;
  ::spotify::metadata::proto::Date* start_;
  ::spotify::metadata::proto::Date* end_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static SalePeriod* default_instance_;
};
// -------------------------------------------------------------------

class ExternalId : public ::google::protobuf::Message {
 public:
  ExternalId();
  virtual ~ExternalId();

  ExternalId(const ExternalId& from);

  inline ExternalId& operator=(const ExternalId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalId& default_instance();

  void Swap(ExternalId* other);

  // implements Message ----------------------------------------------

  ExternalId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternalId& from);
  void MergeFrom(const ExternalId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.ExternalId)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* id_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static ExternalId* default_instance_;
};
// -------------------------------------------------------------------

class AudioFile : public ::google::protobuf::Message {
 public:
  AudioFile();
  virtual ~AudioFile();

  AudioFile(const AudioFile& from);

  inline AudioFile& operator=(const AudioFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioFile& default_instance();

  void Swap(AudioFile* other);

  // implements Message ----------------------------------------------

  AudioFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioFile& from);
  void MergeFrom(const AudioFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AudioFile_Format Format;
  static const Format OGG_VORBIS_96 = AudioFile_Format_OGG_VORBIS_96;
  static const Format OGG_VORBIS_160 = AudioFile_Format_OGG_VORBIS_160;
  static const Format OGG_VORBIS_320 = AudioFile_Format_OGG_VORBIS_320;
  static const Format MP3_256 = AudioFile_Format_MP3_256;
  static const Format MP3_320 = AudioFile_Format_MP3_320;
  static const Format MP3_160 = AudioFile_Format_MP3_160;
  static const Format MP3_96 = AudioFile_Format_MP3_96;
  static inline bool Format_IsValid(int value) {
    return AudioFile_Format_IsValid(value);
  }
  static const Format Format_MIN =
    AudioFile_Format_Format_MIN;
  static const Format Format_MAX =
    AudioFile_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    AudioFile_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return AudioFile_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return AudioFile_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return AudioFile_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes file_id = 1;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  inline const ::std::string& file_id() const;
  inline void set_file_id(const ::std::string& value);
  inline void set_file_id(const char* value);
  inline void set_file_id(const void* value, size_t size);
  inline ::std::string* mutable_file_id();
  inline ::std::string* release_file_id();
  inline void set_allocated_file_id(::std::string* file_id);

  // optional .spotify.metadata.proto.AudioFile.Format format = 2;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 2;
  inline ::spotify::metadata::proto::AudioFile_Format format() const;
  inline void set_format(::spotify::metadata::proto::AudioFile_Format value);

  // @@protoc_insertion_point(class_scope:spotify.metadata.proto.AudioFile)
 private:
  inline void set_has_file_id();
  inline void clear_has_file_id();
  inline void set_has_format();
  inline void clear_has_format();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_id_;
  int format_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();

  void InitAsDefaultInstance();
  static AudioFile* default_instance_;
};
// ===================================================================


// ===================================================================

// TopTracks

// optional string country = 1;
inline bool TopTracks::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopTracks::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopTracks::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopTracks::clear_country() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& TopTracks::country() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.TopTracks.country)
  return *country_;
}
inline void TopTracks::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.TopTracks.country)
}
inline void TopTracks::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.TopTracks.country)
}
inline void TopTracks::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.TopTracks.country)
}
inline ::std::string* TopTracks::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.TopTracks.country)
  return country_;
}
inline ::std::string* TopTracks::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TopTracks::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.TopTracks.country)
}

// repeated .spotify.metadata.proto.Track track = 2;
inline int TopTracks::track_size() const {
  return track_.size();
}
inline void TopTracks::clear_track() {
  track_.Clear();
}
inline const ::spotify::metadata::proto::Track& TopTracks::track(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.TopTracks.track)
  return track_.Get(index);
}
inline ::spotify::metadata::proto::Track* TopTracks::mutable_track(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.TopTracks.track)
  return track_.Mutable(index);
}
inline ::spotify::metadata::proto::Track* TopTracks::add_track() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.TopTracks.track)
  return track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >&
TopTracks::track() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.TopTracks.track)
  return track_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >*
TopTracks::mutable_track() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.TopTracks.track)
  return &track_;
}

// -------------------------------------------------------------------

// ActivityPeriod

// optional sint32 start_year = 1;
inline bool ActivityPeriod::has_start_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityPeriod::set_has_start_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityPeriod::clear_has_start_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityPeriod::clear_start_year() {
  start_year_ = 0;
  clear_has_start_year();
}
inline ::google::protobuf::int32 ActivityPeriod::start_year() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.ActivityPeriod.start_year)
  return start_year_;
}
inline void ActivityPeriod::set_start_year(::google::protobuf::int32 value) {
  set_has_start_year();
  start_year_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.ActivityPeriod.start_year)
}

// optional sint32 end_year = 2;
inline bool ActivityPeriod::has_end_year() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityPeriod::set_has_end_year() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityPeriod::clear_has_end_year() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityPeriod::clear_end_year() {
  end_year_ = 0;
  clear_has_end_year();
}
inline ::google::protobuf::int32 ActivityPeriod::end_year() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.ActivityPeriod.end_year)
  return end_year_;
}
inline void ActivityPeriod::set_end_year(::google::protobuf::int32 value) {
  set_has_end_year();
  end_year_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.ActivityPeriod.end_year)
}

// optional sint32 decade = 3;
inline bool ActivityPeriod::has_decade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityPeriod::set_has_decade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityPeriod::clear_has_decade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityPeriod::clear_decade() {
  decade_ = 0;
  clear_has_decade();
}
inline ::google::protobuf::int32 ActivityPeriod::decade() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.ActivityPeriod.decade)
  return decade_;
}
inline void ActivityPeriod::set_decade(::google::protobuf::int32 value) {
  set_has_decade();
  decade_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.ActivityPeriod.decade)
}

// -------------------------------------------------------------------

// Artist

// optional bytes gid = 1;
inline bool Artist::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Artist::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Artist::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Artist::clear_gid() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& Artist::gid() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.gid)
  return *gid_;
}
inline void Artist::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Artist.gid)
}
inline void Artist::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Artist.gid)
}
inline void Artist::set_gid(const void* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Artist.gid)
}
inline ::std::string* Artist::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.gid)
  return gid_;
}
inline ::std::string* Artist::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Artist::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Artist.gid)
}

// optional string name = 2;
inline bool Artist::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Artist::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Artist::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Artist::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Artist::name() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.name)
  return *name_;
}
inline void Artist::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Artist.name)
}
inline void Artist::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Artist.name)
}
inline void Artist::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Artist.name)
}
inline ::std::string* Artist::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.name)
  return name_;
}
inline ::std::string* Artist::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Artist::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Artist.name)
}

// optional sint32 popularity = 3;
inline bool Artist::has_popularity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Artist::set_has_popularity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Artist::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Artist::clear_popularity() {
  popularity_ = 0;
  clear_has_popularity();
}
inline ::google::protobuf::int32 Artist::popularity() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.popularity)
  return popularity_;
}
inline void Artist::set_popularity(::google::protobuf::int32 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Artist.popularity)
}

// repeated .spotify.metadata.proto.TopTracks top_track = 4;
inline int Artist::top_track_size() const {
  return top_track_.size();
}
inline void Artist::clear_top_track() {
  top_track_.Clear();
}
inline const ::spotify::metadata::proto::TopTracks& Artist::top_track(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.top_track)
  return top_track_.Get(index);
}
inline ::spotify::metadata::proto::TopTracks* Artist::mutable_top_track(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.top_track)
  return top_track_.Mutable(index);
}
inline ::spotify::metadata::proto::TopTracks* Artist::add_top_track() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.top_track)
  return top_track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::TopTracks >&
Artist::top_track() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.top_track)
  return top_track_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::TopTracks >*
Artist::mutable_top_track() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.top_track)
  return &top_track_;
}

// repeated .spotify.metadata.proto.AlbumGroup album_group = 5;
inline int Artist::album_group_size() const {
  return album_group_.size();
}
inline void Artist::clear_album_group() {
  album_group_.Clear();
}
inline const ::spotify::metadata::proto::AlbumGroup& Artist::album_group(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.album_group)
  return album_group_.Get(index);
}
inline ::spotify::metadata::proto::AlbumGroup* Artist::mutable_album_group(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.album_group)
  return album_group_.Mutable(index);
}
inline ::spotify::metadata::proto::AlbumGroup* Artist::add_album_group() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.album_group)
  return album_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >&
Artist::album_group() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.album_group)
  return album_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >*
Artist::mutable_album_group() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.album_group)
  return &album_group_;
}

// repeated .spotify.metadata.proto.AlbumGroup single_group = 6;
inline int Artist::single_group_size() const {
  return single_group_.size();
}
inline void Artist::clear_single_group() {
  single_group_.Clear();
}
inline const ::spotify::metadata::proto::AlbumGroup& Artist::single_group(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.single_group)
  return single_group_.Get(index);
}
inline ::spotify::metadata::proto::AlbumGroup* Artist::mutable_single_group(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.single_group)
  return single_group_.Mutable(index);
}
inline ::spotify::metadata::proto::AlbumGroup* Artist::add_single_group() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.single_group)
  return single_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >&
Artist::single_group() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.single_group)
  return single_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >*
Artist::mutable_single_group() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.single_group)
  return &single_group_;
}

// repeated .spotify.metadata.proto.AlbumGroup compilation_group = 7;
inline int Artist::compilation_group_size() const {
  return compilation_group_.size();
}
inline void Artist::clear_compilation_group() {
  compilation_group_.Clear();
}
inline const ::spotify::metadata::proto::AlbumGroup& Artist::compilation_group(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.compilation_group)
  return compilation_group_.Get(index);
}
inline ::spotify::metadata::proto::AlbumGroup* Artist::mutable_compilation_group(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.compilation_group)
  return compilation_group_.Mutable(index);
}
inline ::spotify::metadata::proto::AlbumGroup* Artist::add_compilation_group() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.compilation_group)
  return compilation_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >&
Artist::compilation_group() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.compilation_group)
  return compilation_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >*
Artist::mutable_compilation_group() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.compilation_group)
  return &compilation_group_;
}

// repeated .spotify.metadata.proto.AlbumGroup appears_on_group = 8;
inline int Artist::appears_on_group_size() const {
  return appears_on_group_.size();
}
inline void Artist::clear_appears_on_group() {
  appears_on_group_.Clear();
}
inline const ::spotify::metadata::proto::AlbumGroup& Artist::appears_on_group(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.appears_on_group)
  return appears_on_group_.Get(index);
}
inline ::spotify::metadata::proto::AlbumGroup* Artist::mutable_appears_on_group(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.appears_on_group)
  return appears_on_group_.Mutable(index);
}
inline ::spotify::metadata::proto::AlbumGroup* Artist::add_appears_on_group() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.appears_on_group)
  return appears_on_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >&
Artist::appears_on_group() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.appears_on_group)
  return appears_on_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AlbumGroup >*
Artist::mutable_appears_on_group() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.appears_on_group)
  return &appears_on_group_;
}

// repeated string genre = 9;
inline int Artist::genre_size() const {
  return genre_.size();
}
inline void Artist::clear_genre() {
  genre_.Clear();
}
inline const ::std::string& Artist::genre(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.genre)
  return genre_.Get(index);
}
inline ::std::string* Artist::mutable_genre(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.genre)
  return genre_.Mutable(index);
}
inline void Artist::set_genre(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Artist.genre)
  genre_.Mutable(index)->assign(value);
}
inline void Artist::set_genre(int index, const char* value) {
  genre_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Artist.genre)
}
inline void Artist::set_genre(int index, const char* value, size_t size) {
  genre_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Artist.genre)
}
inline ::std::string* Artist::add_genre() {
  return genre_.Add();
}
inline void Artist::add_genre(const ::std::string& value) {
  genre_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.genre)
}
inline void Artist::add_genre(const char* value) {
  genre_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spotify.metadata.proto.Artist.genre)
}
inline void Artist::add_genre(const char* value, size_t size) {
  genre_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spotify.metadata.proto.Artist.genre)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Artist::genre() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.genre)
  return genre_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Artist::mutable_genre() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.genre)
  return &genre_;
}

// repeated .spotify.metadata.proto.ExternalId external_id = 10;
inline int Artist::external_id_size() const {
  return external_id_.size();
}
inline void Artist::clear_external_id() {
  external_id_.Clear();
}
inline const ::spotify::metadata::proto::ExternalId& Artist::external_id(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.external_id)
  return external_id_.Get(index);
}
inline ::spotify::metadata::proto::ExternalId* Artist::mutable_external_id(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.external_id)
  return external_id_.Mutable(index);
}
inline ::spotify::metadata::proto::ExternalId* Artist::add_external_id() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.external_id)
  return external_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >&
Artist::external_id() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.external_id)
  return external_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >*
Artist::mutable_external_id() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.external_id)
  return &external_id_;
}

// repeated .spotify.metadata.proto.Image portrait = 11;
inline int Artist::portrait_size() const {
  return portrait_.size();
}
inline void Artist::clear_portrait() {
  portrait_.Clear();
}
inline const ::spotify::metadata::proto::Image& Artist::portrait(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.portrait)
  return portrait_.Get(index);
}
inline ::spotify::metadata::proto::Image* Artist::mutable_portrait(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.portrait)
  return portrait_.Mutable(index);
}
inline ::spotify::metadata::proto::Image* Artist::add_portrait() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.portrait)
  return portrait_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >&
Artist::portrait() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.portrait)
  return portrait_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >*
Artist::mutable_portrait() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.portrait)
  return &portrait_;
}

// repeated .spotify.metadata.proto.Biography biography = 12;
inline int Artist::biography_size() const {
  return biography_.size();
}
inline void Artist::clear_biography() {
  biography_.Clear();
}
inline const ::spotify::metadata::proto::Biography& Artist::biography(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.biography)
  return biography_.Get(index);
}
inline ::spotify::metadata::proto::Biography* Artist::mutable_biography(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.biography)
  return biography_.Mutable(index);
}
inline ::spotify::metadata::proto::Biography* Artist::add_biography() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.biography)
  return biography_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Biography >&
Artist::biography() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.biography)
  return biography_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Biography >*
Artist::mutable_biography() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.biography)
  return &biography_;
}

// repeated .spotify.metadata.proto.ActivityPeriod activity_period = 13;
inline int Artist::activity_period_size() const {
  return activity_period_.size();
}
inline void Artist::clear_activity_period() {
  activity_period_.Clear();
}
inline const ::spotify::metadata::proto::ActivityPeriod& Artist::activity_period(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.activity_period)
  return activity_period_.Get(index);
}
inline ::spotify::metadata::proto::ActivityPeriod* Artist::mutable_activity_period(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.activity_period)
  return activity_period_.Mutable(index);
}
inline ::spotify::metadata::proto::ActivityPeriod* Artist::add_activity_period() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.activity_period)
  return activity_period_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ActivityPeriod >&
Artist::activity_period() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.activity_period)
  return activity_period_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ActivityPeriod >*
Artist::mutable_activity_period() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.activity_period)
  return &activity_period_;
}

// repeated .spotify.metadata.proto.Restriction restriction = 14;
inline int Artist::restriction_size() const {
  return restriction_.size();
}
inline void Artist::clear_restriction() {
  restriction_.Clear();
}
inline const ::spotify::metadata::proto::Restriction& Artist::restriction(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.restriction)
  return restriction_.Get(index);
}
inline ::spotify::metadata::proto::Restriction* Artist::mutable_restriction(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.restriction)
  return restriction_.Mutable(index);
}
inline ::spotify::metadata::proto::Restriction* Artist::add_restriction() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.restriction)
  return restriction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >&
Artist::restriction() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.restriction)
  return restriction_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >*
Artist::mutable_restriction() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.restriction)
  return &restriction_;
}

// repeated .spotify.metadata.proto.Artist related = 15;
inline int Artist::related_size() const {
  return related_.size();
}
inline void Artist::clear_related() {
  related_.Clear();
}
inline const ::spotify::metadata::proto::Artist& Artist::related(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.related)
  return related_.Get(index);
}
inline ::spotify::metadata::proto::Artist* Artist::mutable_related(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.related)
  return related_.Mutable(index);
}
inline ::spotify::metadata::proto::Artist* Artist::add_related() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Artist.related)
  return related_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >&
Artist::related() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Artist.related)
  return related_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >*
Artist::mutable_related() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Artist.related)
  return &related_;
}

// optional bool is_portrait_album_cover = 16;
inline bool Artist::has_is_portrait_album_cover() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Artist::set_has_is_portrait_album_cover() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Artist::clear_has_is_portrait_album_cover() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Artist::clear_is_portrait_album_cover() {
  is_portrait_album_cover_ = false;
  clear_has_is_portrait_album_cover();
}
inline bool Artist::is_portrait_album_cover() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.is_portrait_album_cover)
  return is_portrait_album_cover_;
}
inline void Artist::set_is_portrait_album_cover(bool value) {
  set_has_is_portrait_album_cover();
  is_portrait_album_cover_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Artist.is_portrait_album_cover)
}

// optional .spotify.metadata.proto.ImageGroup portrait_group = 17;
inline bool Artist::has_portrait_group() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Artist::set_has_portrait_group() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Artist::clear_has_portrait_group() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Artist::clear_portrait_group() {
  if (portrait_group_ != NULL) portrait_group_->::spotify::metadata::proto::ImageGroup::Clear();
  clear_has_portrait_group();
}
inline const ::spotify::metadata::proto::ImageGroup& Artist::portrait_group() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Artist.portrait_group)
  return portrait_group_ != NULL ? *portrait_group_ : *default_instance_->portrait_group_;
}
inline ::spotify::metadata::proto::ImageGroup* Artist::mutable_portrait_group() {
  set_has_portrait_group();
  if (portrait_group_ == NULL) portrait_group_ = new ::spotify::metadata::proto::ImageGroup;
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Artist.portrait_group)
  return portrait_group_;
}
inline ::spotify::metadata::proto::ImageGroup* Artist::release_portrait_group() {
  clear_has_portrait_group();
  ::spotify::metadata::proto::ImageGroup* temp = portrait_group_;
  portrait_group_ = NULL;
  return temp;
}
inline void Artist::set_allocated_portrait_group(::spotify::metadata::proto::ImageGroup* portrait_group) {
  delete portrait_group_;
  portrait_group_ = portrait_group;
  if (portrait_group) {
    set_has_portrait_group();
  } else {
    clear_has_portrait_group();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Artist.portrait_group)
}

// -------------------------------------------------------------------

// AlbumGroup

// repeated .spotify.metadata.proto.Album album = 1;
inline int AlbumGroup::album_size() const {
  return album_.size();
}
inline void AlbumGroup::clear_album() {
  album_.Clear();
}
inline const ::spotify::metadata::proto::Album& AlbumGroup::album(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.AlbumGroup.album)
  return album_.Get(index);
}
inline ::spotify::metadata::proto::Album* AlbumGroup::mutable_album(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.AlbumGroup.album)
  return album_.Mutable(index);
}
inline ::spotify::metadata::proto::Album* AlbumGroup::add_album() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.AlbumGroup.album)
  return album_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album >&
AlbumGroup::album() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.AlbumGroup.album)
  return album_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album >*
AlbumGroup::mutable_album() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.AlbumGroup.album)
  return &album_;
}

// -------------------------------------------------------------------

// Date

// optional sint32 year = 1;
inline bool Date::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Date::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Date::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Date::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 Date::year() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Date.year)
  return year_;
}
inline void Date::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Date.year)
}

// optional sint32 month = 2;
inline bool Date::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Date::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Date::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Date::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 Date::month() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Date.month)
  return month_;
}
inline void Date::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Date.month)
}

// optional sint32 day = 3;
inline bool Date::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Date::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Date::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Date::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 Date::day() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Date.day)
  return day_;
}
inline void Date::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Date.day)
}

// -------------------------------------------------------------------

// Album

// optional bytes gid = 1;
inline bool Album::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Album::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Album::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Album::clear_gid() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& Album::gid() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.gid)
  return *gid_;
}
inline void Album::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Album.gid)
}
inline void Album::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Album.gid)
}
inline void Album::set_gid(const void* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Album.gid)
}
inline ::std::string* Album::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.gid)
  return gid_;
}
inline ::std::string* Album::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Album::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Album.gid)
}

// optional string name = 2;
inline bool Album::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Album::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Album::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Album::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Album::name() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.name)
  return *name_;
}
inline void Album::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Album.name)
}
inline void Album::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Album.name)
}
inline void Album::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Album.name)
}
inline ::std::string* Album::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.name)
  return name_;
}
inline ::std::string* Album::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Album::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Album.name)
}

// repeated .spotify.metadata.proto.Artist artist = 3;
inline int Album::artist_size() const {
  return artist_.size();
}
inline void Album::clear_artist() {
  artist_.Clear();
}
inline const ::spotify::metadata::proto::Artist& Album::artist(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.artist)
  return artist_.Get(index);
}
inline ::spotify::metadata::proto::Artist* Album::mutable_artist(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.artist)
  return artist_.Mutable(index);
}
inline ::spotify::metadata::proto::Artist* Album::add_artist() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.artist)
  return artist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >&
Album::artist() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.artist)
  return artist_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >*
Album::mutable_artist() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.artist)
  return &artist_;
}

// optional .spotify.metadata.proto.Album.Type type = 4;
inline bool Album::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Album::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Album::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Album::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::spotify::metadata::proto::Album_Type Album::type() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.type)
  return static_cast< ::spotify::metadata::proto::Album_Type >(type_);
}
inline void Album::set_type(::spotify::metadata::proto::Album_Type value) {
  assert(::spotify::metadata::proto::Album_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Album.type)
}

// optional string label = 5;
inline bool Album::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Album::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Album::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Album::clear_label() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Album::label() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.label)
  return *label_;
}
inline void Album::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Album.label)
}
inline void Album::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Album.label)
}
inline void Album::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Album.label)
}
inline ::std::string* Album::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.label)
  return label_;
}
inline ::std::string* Album::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Album::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Album.label)
}

// optional .spotify.metadata.proto.Date date = 6;
inline bool Album::has_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Album::set_has_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Album::clear_has_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Album::clear_date() {
  if (date_ != NULL) date_->::spotify::metadata::proto::Date::Clear();
  clear_has_date();
}
inline const ::spotify::metadata::proto::Date& Album::date() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.date)
  return date_ != NULL ? *date_ : *default_instance_->date_;
}
inline ::spotify::metadata::proto::Date* Album::mutable_date() {
  set_has_date();
  if (date_ == NULL) date_ = new ::spotify::metadata::proto::Date;
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.date)
  return date_;
}
inline ::spotify::metadata::proto::Date* Album::release_date() {
  clear_has_date();
  ::spotify::metadata::proto::Date* temp = date_;
  date_ = NULL;
  return temp;
}
inline void Album::set_allocated_date(::spotify::metadata::proto::Date* date) {
  delete date_;
  date_ = date;
  if (date) {
    set_has_date();
  } else {
    clear_has_date();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Album.date)
}

// optional sint32 popularity = 7;
inline bool Album::has_popularity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Album::set_has_popularity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Album::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Album::clear_popularity() {
  popularity_ = 0;
  clear_has_popularity();
}
inline ::google::protobuf::int32 Album::popularity() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.popularity)
  return popularity_;
}
inline void Album::set_popularity(::google::protobuf::int32 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Album.popularity)
}

// repeated string genre = 8;
inline int Album::genre_size() const {
  return genre_.size();
}
inline void Album::clear_genre() {
  genre_.Clear();
}
inline const ::std::string& Album::genre(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.genre)
  return genre_.Get(index);
}
inline ::std::string* Album::mutable_genre(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.genre)
  return genre_.Mutable(index);
}
inline void Album::set_genre(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Album.genre)
  genre_.Mutable(index)->assign(value);
}
inline void Album::set_genre(int index, const char* value) {
  genre_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Album.genre)
}
inline void Album::set_genre(int index, const char* value, size_t size) {
  genre_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Album.genre)
}
inline ::std::string* Album::add_genre() {
  return genre_.Add();
}
inline void Album::add_genre(const ::std::string& value) {
  genre_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.genre)
}
inline void Album::add_genre(const char* value) {
  genre_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spotify.metadata.proto.Album.genre)
}
inline void Album::add_genre(const char* value, size_t size) {
  genre_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spotify.metadata.proto.Album.genre)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Album::genre() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.genre)
  return genre_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Album::mutable_genre() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.genre)
  return &genre_;
}

// repeated .spotify.metadata.proto.Image cover = 9;
inline int Album::cover_size() const {
  return cover_.size();
}
inline void Album::clear_cover() {
  cover_.Clear();
}
inline const ::spotify::metadata::proto::Image& Album::cover(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.cover)
  return cover_.Get(index);
}
inline ::spotify::metadata::proto::Image* Album::mutable_cover(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.cover)
  return cover_.Mutable(index);
}
inline ::spotify::metadata::proto::Image* Album::add_cover() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.cover)
  return cover_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >&
Album::cover() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.cover)
  return cover_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >*
Album::mutable_cover() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.cover)
  return &cover_;
}

// repeated .spotify.metadata.proto.ExternalId external_id = 10;
inline int Album::external_id_size() const {
  return external_id_.size();
}
inline void Album::clear_external_id() {
  external_id_.Clear();
}
inline const ::spotify::metadata::proto::ExternalId& Album::external_id(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.external_id)
  return external_id_.Get(index);
}
inline ::spotify::metadata::proto::ExternalId* Album::mutable_external_id(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.external_id)
  return external_id_.Mutable(index);
}
inline ::spotify::metadata::proto::ExternalId* Album::add_external_id() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.external_id)
  return external_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >&
Album::external_id() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.external_id)
  return external_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >*
Album::mutable_external_id() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.external_id)
  return &external_id_;
}

// repeated .spotify.metadata.proto.Disc disc = 11;
inline int Album::disc_size() const {
  return disc_.size();
}
inline void Album::clear_disc() {
  disc_.Clear();
}
inline const ::spotify::metadata::proto::Disc& Album::disc(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.disc)
  return disc_.Get(index);
}
inline ::spotify::metadata::proto::Disc* Album::mutable_disc(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.disc)
  return disc_.Mutable(index);
}
inline ::spotify::metadata::proto::Disc* Album::add_disc() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.disc)
  return disc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Disc >&
Album::disc() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.disc)
  return disc_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Disc >*
Album::mutable_disc() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.disc)
  return &disc_;
}

// repeated string review = 12;
inline int Album::review_size() const {
  return review_.size();
}
inline void Album::clear_review() {
  review_.Clear();
}
inline const ::std::string& Album::review(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.review)
  return review_.Get(index);
}
inline ::std::string* Album::mutable_review(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.review)
  return review_.Mutable(index);
}
inline void Album::set_review(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Album.review)
  review_.Mutable(index)->assign(value);
}
inline void Album::set_review(int index, const char* value) {
  review_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Album.review)
}
inline void Album::set_review(int index, const char* value, size_t size) {
  review_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Album.review)
}
inline ::std::string* Album::add_review() {
  return review_.Add();
}
inline void Album::add_review(const ::std::string& value) {
  review_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.review)
}
inline void Album::add_review(const char* value) {
  review_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spotify.metadata.proto.Album.review)
}
inline void Album::add_review(const char* value, size_t size) {
  review_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spotify.metadata.proto.Album.review)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Album::review() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.review)
  return review_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Album::mutable_review() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.review)
  return &review_;
}

// repeated .spotify.metadata.proto.Copyright copyright = 13;
inline int Album::copyright_size() const {
  return copyright_.size();
}
inline void Album::clear_copyright() {
  copyright_.Clear();
}
inline const ::spotify::metadata::proto::Copyright& Album::copyright(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.copyright)
  return copyright_.Get(index);
}
inline ::spotify::metadata::proto::Copyright* Album::mutable_copyright(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.copyright)
  return copyright_.Mutable(index);
}
inline ::spotify::metadata::proto::Copyright* Album::add_copyright() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.copyright)
  return copyright_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Copyright >&
Album::copyright() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.copyright)
  return copyright_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Copyright >*
Album::mutable_copyright() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.copyright)
  return &copyright_;
}

// repeated .spotify.metadata.proto.Restriction restriction = 14;
inline int Album::restriction_size() const {
  return restriction_.size();
}
inline void Album::clear_restriction() {
  restriction_.Clear();
}
inline const ::spotify::metadata::proto::Restriction& Album::restriction(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.restriction)
  return restriction_.Get(index);
}
inline ::spotify::metadata::proto::Restriction* Album::mutable_restriction(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.restriction)
  return restriction_.Mutable(index);
}
inline ::spotify::metadata::proto::Restriction* Album::add_restriction() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.restriction)
  return restriction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >&
Album::restriction() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.restriction)
  return restriction_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >*
Album::mutable_restriction() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.restriction)
  return &restriction_;
}

// repeated .spotify.metadata.proto.Album related = 15;
inline int Album::related_size() const {
  return related_.size();
}
inline void Album::clear_related() {
  related_.Clear();
}
inline const ::spotify::metadata::proto::Album& Album::related(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.related)
  return related_.Get(index);
}
inline ::spotify::metadata::proto::Album* Album::mutable_related(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.related)
  return related_.Mutable(index);
}
inline ::spotify::metadata::proto::Album* Album::add_related() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.related)
  return related_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album >&
Album::related() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.related)
  return related_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Album >*
Album::mutable_related() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.related)
  return &related_;
}

// repeated .spotify.metadata.proto.SalePeriod sale_period = 16;
inline int Album::sale_period_size() const {
  return sale_period_.size();
}
inline void Album::clear_sale_period() {
  sale_period_.Clear();
}
inline const ::spotify::metadata::proto::SalePeriod& Album::sale_period(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.sale_period)
  return sale_period_.Get(index);
}
inline ::spotify::metadata::proto::SalePeriod* Album::mutable_sale_period(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.sale_period)
  return sale_period_.Mutable(index);
}
inline ::spotify::metadata::proto::SalePeriod* Album::add_sale_period() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Album.sale_period)
  return sale_period_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod >&
Album::sale_period() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Album.sale_period)
  return sale_period_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod >*
Album::mutable_sale_period() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Album.sale_period)
  return &sale_period_;
}

// optional .spotify.metadata.proto.ImageGroup cover_group = 17;
inline bool Album::has_cover_group() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Album::set_has_cover_group() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Album::clear_has_cover_group() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Album::clear_cover_group() {
  if (cover_group_ != NULL) cover_group_->::spotify::metadata::proto::ImageGroup::Clear();
  clear_has_cover_group();
}
inline const ::spotify::metadata::proto::ImageGroup& Album::cover_group() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Album.cover_group)
  return cover_group_ != NULL ? *cover_group_ : *default_instance_->cover_group_;
}
inline ::spotify::metadata::proto::ImageGroup* Album::mutable_cover_group() {
  set_has_cover_group();
  if (cover_group_ == NULL) cover_group_ = new ::spotify::metadata::proto::ImageGroup;
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Album.cover_group)
  return cover_group_;
}
inline ::spotify::metadata::proto::ImageGroup* Album::release_cover_group() {
  clear_has_cover_group();
  ::spotify::metadata::proto::ImageGroup* temp = cover_group_;
  cover_group_ = NULL;
  return temp;
}
inline void Album::set_allocated_cover_group(::spotify::metadata::proto::ImageGroup* cover_group) {
  delete cover_group_;
  cover_group_ = cover_group;
  if (cover_group) {
    set_has_cover_group();
  } else {
    clear_has_cover_group();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Album.cover_group)
}

// -------------------------------------------------------------------

// Track

// optional bytes gid = 1;
inline bool Track::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Track::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Track::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Track::clear_gid() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& Track::gid() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.gid)
  return *gid_;
}
inline void Track::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Track.gid)
}
inline void Track::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Track.gid)
}
inline void Track::set_gid(const void* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Track.gid)
}
inline ::std::string* Track::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.gid)
  return gid_;
}
inline ::std::string* Track::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Track::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Track.gid)
}

// optional string name = 2;
inline bool Track::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Track::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Track::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Track::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Track::name() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.name)
  return *name_;
}
inline void Track::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Track.name)
}
inline void Track::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Track.name)
}
inline void Track::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Track.name)
}
inline ::std::string* Track::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.name)
  return name_;
}
inline ::std::string* Track::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Track::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Track.name)
}

// optional .spotify.metadata.proto.Album album = 3;
inline bool Track::has_album() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Track::set_has_album() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Track::clear_has_album() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Track::clear_album() {
  if (album_ != NULL) album_->::spotify::metadata::proto::Album::Clear();
  clear_has_album();
}
inline const ::spotify::metadata::proto::Album& Track::album() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.album)
  return album_ != NULL ? *album_ : *default_instance_->album_;
}
inline ::spotify::metadata::proto::Album* Track::mutable_album() {
  set_has_album();
  if (album_ == NULL) album_ = new ::spotify::metadata::proto::Album;
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.album)
  return album_;
}
inline ::spotify::metadata::proto::Album* Track::release_album() {
  clear_has_album();
  ::spotify::metadata::proto::Album* temp = album_;
  album_ = NULL;
  return temp;
}
inline void Track::set_allocated_album(::spotify::metadata::proto::Album* album) {
  delete album_;
  album_ = album;
  if (album) {
    set_has_album();
  } else {
    clear_has_album();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Track.album)
}

// repeated .spotify.metadata.proto.Artist artist = 4;
inline int Track::artist_size() const {
  return artist_.size();
}
inline void Track::clear_artist() {
  artist_.Clear();
}
inline const ::spotify::metadata::proto::Artist& Track::artist(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.artist)
  return artist_.Get(index);
}
inline ::spotify::metadata::proto::Artist* Track::mutable_artist(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.artist)
  return artist_.Mutable(index);
}
inline ::spotify::metadata::proto::Artist* Track::add_artist() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Track.artist)
  return artist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >&
Track::artist() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Track.artist)
  return artist_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Artist >*
Track::mutable_artist() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Track.artist)
  return &artist_;
}

// optional sint32 number = 5;
inline bool Track::has_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Track::set_has_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Track::clear_has_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Track::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 Track::number() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.number)
  return number_;
}
inline void Track::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Track.number)
}

// optional sint32 disc_number = 6;
inline bool Track::has_disc_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Track::set_has_disc_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Track::clear_has_disc_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Track::clear_disc_number() {
  disc_number_ = 0;
  clear_has_disc_number();
}
inline ::google::protobuf::int32 Track::disc_number() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.disc_number)
  return disc_number_;
}
inline void Track::set_disc_number(::google::protobuf::int32 value) {
  set_has_disc_number();
  disc_number_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Track.disc_number)
}

// optional sint32 duration = 7;
inline bool Track::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Track::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Track::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Track::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 Track::duration() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.duration)
  return duration_;
}
inline void Track::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Track.duration)
}

// optional sint32 popularity = 8;
inline bool Track::has_popularity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Track::set_has_popularity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Track::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Track::clear_popularity() {
  popularity_ = 0;
  clear_has_popularity();
}
inline ::google::protobuf::int32 Track::popularity() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.popularity)
  return popularity_;
}
inline void Track::set_popularity(::google::protobuf::int32 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Track.popularity)
}

// optional bool explicit = 9;
inline bool Track::has_explicit_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Track::set_has_explicit_() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Track::clear_has_explicit_() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Track::clear_explicit_() {
  explicit__ = false;
  clear_has_explicit_();
}
inline bool Track::explicit_() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.explicit)
  return explicit__;
}
inline void Track::set_explicit_(bool value) {
  set_has_explicit_();
  explicit__ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Track.explicit)
}

// repeated .spotify.metadata.proto.ExternalId external_id = 10;
inline int Track::external_id_size() const {
  return external_id_.size();
}
inline void Track::clear_external_id() {
  external_id_.Clear();
}
inline const ::spotify::metadata::proto::ExternalId& Track::external_id(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.external_id)
  return external_id_.Get(index);
}
inline ::spotify::metadata::proto::ExternalId* Track::mutable_external_id(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.external_id)
  return external_id_.Mutable(index);
}
inline ::spotify::metadata::proto::ExternalId* Track::add_external_id() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Track.external_id)
  return external_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >&
Track::external_id() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Track.external_id)
  return external_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ExternalId >*
Track::mutable_external_id() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Track.external_id)
  return &external_id_;
}

// repeated .spotify.metadata.proto.Restriction restriction = 11;
inline int Track::restriction_size() const {
  return restriction_.size();
}
inline void Track::clear_restriction() {
  restriction_.Clear();
}
inline const ::spotify::metadata::proto::Restriction& Track::restriction(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.restriction)
  return restriction_.Get(index);
}
inline ::spotify::metadata::proto::Restriction* Track::mutable_restriction(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.restriction)
  return restriction_.Mutable(index);
}
inline ::spotify::metadata::proto::Restriction* Track::add_restriction() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Track.restriction)
  return restriction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >&
Track::restriction() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Track.restriction)
  return restriction_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >*
Track::mutable_restriction() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Track.restriction)
  return &restriction_;
}

// repeated .spotify.metadata.proto.AudioFile file = 12;
inline int Track::file_size() const {
  return file_.size();
}
inline void Track::clear_file() {
  file_.Clear();
}
inline const ::spotify::metadata::proto::AudioFile& Track::file(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.file)
  return file_.Get(index);
}
inline ::spotify::metadata::proto::AudioFile* Track::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.file)
  return file_.Mutable(index);
}
inline ::spotify::metadata::proto::AudioFile* Track::add_file() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Track.file)
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile >&
Track::file() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Track.file)
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile >*
Track::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Track.file)
  return &file_;
}

// repeated .spotify.metadata.proto.Track alternative = 13;
inline int Track::alternative_size() const {
  return alternative_.size();
}
inline void Track::clear_alternative() {
  alternative_.Clear();
}
inline const ::spotify::metadata::proto::Track& Track::alternative(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.alternative)
  return alternative_.Get(index);
}
inline ::spotify::metadata::proto::Track* Track::mutable_alternative(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.alternative)
  return alternative_.Mutable(index);
}
inline ::spotify::metadata::proto::Track* Track::add_alternative() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Track.alternative)
  return alternative_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >&
Track::alternative() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Track.alternative)
  return alternative_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >*
Track::mutable_alternative() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Track.alternative)
  return &alternative_;
}

// repeated .spotify.metadata.proto.SalePeriod sale_period = 14;
inline int Track::sale_period_size() const {
  return sale_period_.size();
}
inline void Track::clear_sale_period() {
  sale_period_.Clear();
}
inline const ::spotify::metadata::proto::SalePeriod& Track::sale_period(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.sale_period)
  return sale_period_.Get(index);
}
inline ::spotify::metadata::proto::SalePeriod* Track::mutable_sale_period(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.sale_period)
  return sale_period_.Mutable(index);
}
inline ::spotify::metadata::proto::SalePeriod* Track::add_sale_period() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Track.sale_period)
  return sale_period_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod >&
Track::sale_period() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Track.sale_period)
  return sale_period_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::SalePeriod >*
Track::mutable_sale_period() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Track.sale_period)
  return &sale_period_;
}

// repeated .spotify.metadata.proto.AudioFile preview = 15;
inline int Track::preview_size() const {
  return preview_.size();
}
inline void Track::clear_preview() {
  preview_.Clear();
}
inline const ::spotify::metadata::proto::AudioFile& Track::preview(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Track.preview)
  return preview_.Get(index);
}
inline ::spotify::metadata::proto::AudioFile* Track::mutable_preview(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Track.preview)
  return preview_.Mutable(index);
}
inline ::spotify::metadata::proto::AudioFile* Track::add_preview() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Track.preview)
  return preview_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile >&
Track::preview() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Track.preview)
  return preview_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::AudioFile >*
Track::mutable_preview() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Track.preview)
  return &preview_;
}

// -------------------------------------------------------------------

// Image

// optional bytes file_id = 1;
inline bool Image::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_file_id() {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_->clear();
  }
  clear_has_file_id();
}
inline const ::std::string& Image::file_id() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Image.file_id)
  return *file_id_;
}
inline void Image::set_file_id(const ::std::string& value) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Image.file_id)
}
inline void Image::set_file_id(const char* value) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Image.file_id)
}
inline void Image::set_file_id(const void* value, size_t size) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Image.file_id)
}
inline ::std::string* Image::mutable_file_id() {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Image.file_id)
  return file_id_;
}
inline ::std::string* Image::release_file_id() {
  clear_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_id_;
    file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Image::set_allocated_file_id(::std::string* file_id) {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_id_;
  }
  if (file_id) {
    set_has_file_id();
    file_id_ = file_id;
  } else {
    clear_has_file_id();
    file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Image.file_id)
}

// optional .spotify.metadata.proto.Image.Size size = 2;
inline bool Image::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::spotify::metadata::proto::Image_Size Image::size() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Image.size)
  return static_cast< ::spotify::metadata::proto::Image_Size >(size_);
}
inline void Image::set_size(::spotify::metadata::proto::Image_Size value) {
  assert(::spotify::metadata::proto::Image_Size_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Image.size)
}

// optional sint32 width = 3;
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Image.width)
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Image.width)
}

// optional sint32 height = 4;
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Image.height)
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Image.height)
}

// -------------------------------------------------------------------

// ImageGroup

// repeated .spotify.metadata.proto.Image image = 1;
inline int ImageGroup::image_size() const {
  return image_.size();
}
inline void ImageGroup::clear_image() {
  image_.Clear();
}
inline const ::spotify::metadata::proto::Image& ImageGroup::image(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.ImageGroup.image)
  return image_.Get(index);
}
inline ::spotify::metadata::proto::Image* ImageGroup::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.ImageGroup.image)
  return image_.Mutable(index);
}
inline ::spotify::metadata::proto::Image* ImageGroup::add_image() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.ImageGroup.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >&
ImageGroup::image() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.ImageGroup.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >*
ImageGroup::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.ImageGroup.image)
  return &image_;
}

// -------------------------------------------------------------------

// Biography

// optional string text = 1;
inline bool Biography::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Biography::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Biography::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Biography::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Biography::text() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Biography.text)
  return *text_;
}
inline void Biography::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Biography.text)
}
inline void Biography::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Biography.text)
}
inline void Biography::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Biography.text)
}
inline ::std::string* Biography::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Biography.text)
  return text_;
}
inline ::std::string* Biography::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Biography::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Biography.text)
}

// repeated .spotify.metadata.proto.Image portrait = 2;
inline int Biography::portrait_size() const {
  return portrait_.size();
}
inline void Biography::clear_portrait() {
  portrait_.Clear();
}
inline const ::spotify::metadata::proto::Image& Biography::portrait(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Biography.portrait)
  return portrait_.Get(index);
}
inline ::spotify::metadata::proto::Image* Biography::mutable_portrait(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Biography.portrait)
  return portrait_.Mutable(index);
}
inline ::spotify::metadata::proto::Image* Biography::add_portrait() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Biography.portrait)
  return portrait_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >&
Biography::portrait() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Biography.portrait)
  return portrait_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Image >*
Biography::mutable_portrait() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Biography.portrait)
  return &portrait_;
}

// repeated .spotify.metadata.proto.ImageGroup portrait_group = 3;
inline int Biography::portrait_group_size() const {
  return portrait_group_.size();
}
inline void Biography::clear_portrait_group() {
  portrait_group_.Clear();
}
inline const ::spotify::metadata::proto::ImageGroup& Biography::portrait_group(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Biography.portrait_group)
  return portrait_group_.Get(index);
}
inline ::spotify::metadata::proto::ImageGroup* Biography::mutable_portrait_group(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Biography.portrait_group)
  return portrait_group_.Mutable(index);
}
inline ::spotify::metadata::proto::ImageGroup* Biography::add_portrait_group() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Biography.portrait_group)
  return portrait_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ImageGroup >&
Biography::portrait_group() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Biography.portrait_group)
  return portrait_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::ImageGroup >*
Biography::mutable_portrait_group() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Biography.portrait_group)
  return &portrait_group_;
}

// -------------------------------------------------------------------

// Disc

// optional sint32 number = 1;
inline bool Disc::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Disc::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Disc::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Disc::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 Disc::number() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Disc.number)
  return number_;
}
inline void Disc::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Disc.number)
}

// optional string name = 2;
inline bool Disc::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Disc::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Disc::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Disc::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Disc::name() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Disc.name)
  return *name_;
}
inline void Disc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Disc.name)
}
inline void Disc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Disc.name)
}
inline void Disc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Disc.name)
}
inline ::std::string* Disc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Disc.name)
  return name_;
}
inline ::std::string* Disc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Disc::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Disc.name)
}

// repeated .spotify.metadata.proto.Track track = 3;
inline int Disc::track_size() const {
  return track_.size();
}
inline void Disc::clear_track() {
  track_.Clear();
}
inline const ::spotify::metadata::proto::Track& Disc::track(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Disc.track)
  return track_.Get(index);
}
inline ::spotify::metadata::proto::Track* Disc::mutable_track(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Disc.track)
  return track_.Mutable(index);
}
inline ::spotify::metadata::proto::Track* Disc::add_track() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Disc.track)
  return track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >&
Disc::track() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Disc.track)
  return track_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Track >*
Disc::mutable_track() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Disc.track)
  return &track_;
}

// -------------------------------------------------------------------

// Copyright

// optional .spotify.metadata.proto.Copyright.Type type = 1;
inline bool Copyright::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Copyright::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Copyright::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Copyright::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::spotify::metadata::proto::Copyright_Type Copyright::type() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Copyright.type)
  return static_cast< ::spotify::metadata::proto::Copyright_Type >(type_);
}
inline void Copyright::set_type(::spotify::metadata::proto::Copyright_Type value) {
  assert(::spotify::metadata::proto::Copyright_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Copyright.type)
}

// optional string text = 2;
inline bool Copyright::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Copyright::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Copyright::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Copyright::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Copyright::text() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Copyright.text)
  return *text_;
}
inline void Copyright::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Copyright.text)
}
inline void Copyright::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Copyright.text)
}
inline void Copyright::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Copyright.text)
}
inline ::std::string* Copyright::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Copyright.text)
  return text_;
}
inline ::std::string* Copyright::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Copyright::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Copyright.text)
}

// -------------------------------------------------------------------

// Restriction

// repeated .spotify.metadata.proto.Restriction.Catalogue catalogue = 1;
inline int Restriction::catalogue_size() const {
  return catalogue_.size();
}
inline void Restriction::clear_catalogue() {
  catalogue_.Clear();
}
inline ::spotify::metadata::proto::Restriction_Catalogue Restriction::catalogue(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Restriction.catalogue)
  return static_cast< ::spotify::metadata::proto::Restriction_Catalogue >(catalogue_.Get(index));
}
inline void Restriction::set_catalogue(int index, ::spotify::metadata::proto::Restriction_Catalogue value) {
  assert(::spotify::metadata::proto::Restriction_Catalogue_IsValid(value));
  catalogue_.Set(index, value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Restriction.catalogue)
}
inline void Restriction::add_catalogue(::spotify::metadata::proto::Restriction_Catalogue value) {
  assert(::spotify::metadata::proto::Restriction_Catalogue_IsValid(value));
  catalogue_.Add(value);
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.Restriction.catalogue)
}
inline const ::google::protobuf::RepeatedField<int>&
Restriction::catalogue() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.Restriction.catalogue)
  return catalogue_;
}
inline ::google::protobuf::RepeatedField<int>*
Restriction::mutable_catalogue() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.Restriction.catalogue)
  return &catalogue_;
}

// optional string countries_allowed = 2;
inline bool Restriction::has_countries_allowed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Restriction::set_has_countries_allowed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Restriction::clear_has_countries_allowed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Restriction::clear_countries_allowed() {
  if (countries_allowed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_allowed_->clear();
  }
  clear_has_countries_allowed();
}
inline const ::std::string& Restriction::countries_allowed() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Restriction.countries_allowed)
  return *countries_allowed_;
}
inline void Restriction::set_countries_allowed(const ::std::string& value) {
  set_has_countries_allowed();
  if (countries_allowed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_allowed_ = new ::std::string;
  }
  countries_allowed_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Restriction.countries_allowed)
}
inline void Restriction::set_countries_allowed(const char* value) {
  set_has_countries_allowed();
  if (countries_allowed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_allowed_ = new ::std::string;
  }
  countries_allowed_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Restriction.countries_allowed)
}
inline void Restriction::set_countries_allowed(const char* value, size_t size) {
  set_has_countries_allowed();
  if (countries_allowed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_allowed_ = new ::std::string;
  }
  countries_allowed_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Restriction.countries_allowed)
}
inline ::std::string* Restriction::mutable_countries_allowed() {
  set_has_countries_allowed();
  if (countries_allowed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_allowed_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Restriction.countries_allowed)
  return countries_allowed_;
}
inline ::std::string* Restriction::release_countries_allowed() {
  clear_has_countries_allowed();
  if (countries_allowed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = countries_allowed_;
    countries_allowed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Restriction::set_allocated_countries_allowed(::std::string* countries_allowed) {
  if (countries_allowed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countries_allowed_;
  }
  if (countries_allowed) {
    set_has_countries_allowed();
    countries_allowed_ = countries_allowed;
  } else {
    clear_has_countries_allowed();
    countries_allowed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Restriction.countries_allowed)
}

// optional string countries_forbidden = 3;
inline bool Restriction::has_countries_forbidden() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Restriction::set_has_countries_forbidden() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Restriction::clear_has_countries_forbidden() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Restriction::clear_countries_forbidden() {
  if (countries_forbidden_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_forbidden_->clear();
  }
  clear_has_countries_forbidden();
}
inline const ::std::string& Restriction::countries_forbidden() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Restriction.countries_forbidden)
  return *countries_forbidden_;
}
inline void Restriction::set_countries_forbidden(const ::std::string& value) {
  set_has_countries_forbidden();
  if (countries_forbidden_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_forbidden_ = new ::std::string;
  }
  countries_forbidden_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Restriction.countries_forbidden)
}
inline void Restriction::set_countries_forbidden(const char* value) {
  set_has_countries_forbidden();
  if (countries_forbidden_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_forbidden_ = new ::std::string;
  }
  countries_forbidden_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.Restriction.countries_forbidden)
}
inline void Restriction::set_countries_forbidden(const char* value, size_t size) {
  set_has_countries_forbidden();
  if (countries_forbidden_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_forbidden_ = new ::std::string;
  }
  countries_forbidden_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.Restriction.countries_forbidden)
}
inline ::std::string* Restriction::mutable_countries_forbidden() {
  set_has_countries_forbidden();
  if (countries_forbidden_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    countries_forbidden_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.Restriction.countries_forbidden)
  return countries_forbidden_;
}
inline ::std::string* Restriction::release_countries_forbidden() {
  clear_has_countries_forbidden();
  if (countries_forbidden_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = countries_forbidden_;
    countries_forbidden_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Restriction::set_allocated_countries_forbidden(::std::string* countries_forbidden) {
  if (countries_forbidden_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countries_forbidden_;
  }
  if (countries_forbidden) {
    set_has_countries_forbidden();
    countries_forbidden_ = countries_forbidden;
  } else {
    clear_has_countries_forbidden();
    countries_forbidden_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.Restriction.countries_forbidden)
}

// optional .spotify.metadata.proto.Restriction.Type type = 4;
inline bool Restriction::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Restriction::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Restriction::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Restriction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::spotify::metadata::proto::Restriction_Type Restriction::type() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.Restriction.type)
  return static_cast< ::spotify::metadata::proto::Restriction_Type >(type_);
}
inline void Restriction::set_type(::spotify::metadata::proto::Restriction_Type value) {
  assert(::spotify::metadata::proto::Restriction_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.Restriction.type)
}

// -------------------------------------------------------------------

// SalePeriod

// repeated .spotify.metadata.proto.Restriction restriction = 1;
inline int SalePeriod::restriction_size() const {
  return restriction_.size();
}
inline void SalePeriod::clear_restriction() {
  restriction_.Clear();
}
inline const ::spotify::metadata::proto::Restriction& SalePeriod::restriction(int index) const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.SalePeriod.restriction)
  return restriction_.Get(index);
}
inline ::spotify::metadata::proto::Restriction* SalePeriod::mutable_restriction(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.SalePeriod.restriction)
  return restriction_.Mutable(index);
}
inline ::spotify::metadata::proto::Restriction* SalePeriod::add_restriction() {
  // @@protoc_insertion_point(field_add:spotify.metadata.proto.SalePeriod.restriction)
  return restriction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >&
SalePeriod::restriction() const {
  // @@protoc_insertion_point(field_list:spotify.metadata.proto.SalePeriod.restriction)
  return restriction_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::metadata::proto::Restriction >*
SalePeriod::mutable_restriction() {
  // @@protoc_insertion_point(field_mutable_list:spotify.metadata.proto.SalePeriod.restriction)
  return &restriction_;
}

// optional .spotify.metadata.proto.Date start = 2;
inline bool SalePeriod::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SalePeriod::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SalePeriod::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SalePeriod::clear_start() {
  if (start_ != NULL) start_->::spotify::metadata::proto::Date::Clear();
  clear_has_start();
}
inline const ::spotify::metadata::proto::Date& SalePeriod::start() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.SalePeriod.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::spotify::metadata::proto::Date* SalePeriod::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::spotify::metadata::proto::Date;
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.SalePeriod.start)
  return start_;
}
inline ::spotify::metadata::proto::Date* SalePeriod::release_start() {
  clear_has_start();
  ::spotify::metadata::proto::Date* temp = start_;
  start_ = NULL;
  return temp;
}
inline void SalePeriod::set_allocated_start(::spotify::metadata::proto::Date* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.SalePeriod.start)
}

// optional .spotify.metadata.proto.Date end = 3;
inline bool SalePeriod::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SalePeriod::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SalePeriod::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SalePeriod::clear_end() {
  if (end_ != NULL) end_->::spotify::metadata::proto::Date::Clear();
  clear_has_end();
}
inline const ::spotify::metadata::proto::Date& SalePeriod::end() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.SalePeriod.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
inline ::spotify::metadata::proto::Date* SalePeriod::mutable_end() {
  set_has_end();
  if (end_ == NULL) end_ = new ::spotify::metadata::proto::Date;
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.SalePeriod.end)
  return end_;
}
inline ::spotify::metadata::proto::Date* SalePeriod::release_end() {
  clear_has_end();
  ::spotify::metadata::proto::Date* temp = end_;
  end_ = NULL;
  return temp;
}
inline void SalePeriod::set_allocated_end(::spotify::metadata::proto::Date* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.SalePeriod.end)
}

// -------------------------------------------------------------------

// ExternalId

// optional string type = 1;
inline bool ExternalId::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalId::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalId::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalId::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ExternalId::type() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.ExternalId.type)
  return *type_;
}
inline void ExternalId::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.ExternalId.type)
}
inline void ExternalId::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.ExternalId.type)
}
inline void ExternalId::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.ExternalId.type)
}
inline ::std::string* ExternalId::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.ExternalId.type)
  return type_;
}
inline ::std::string* ExternalId::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExternalId::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.ExternalId.type)
}

// optional string id = 2;
inline bool ExternalId::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternalId::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExternalId::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExternalId::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ExternalId::id() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.ExternalId.id)
  return *id_;
}
inline void ExternalId::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.ExternalId.id)
}
inline void ExternalId::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.ExternalId.id)
}
inline void ExternalId::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.ExternalId.id)
}
inline ::std::string* ExternalId::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.ExternalId.id)
  return id_;
}
inline ::std::string* ExternalId::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExternalId::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.ExternalId.id)
}

// -------------------------------------------------------------------

// AudioFile

// optional bytes file_id = 1;
inline bool AudioFile::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioFile::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioFile::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioFile::clear_file_id() {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_->clear();
  }
  clear_has_file_id();
}
inline const ::std::string& AudioFile::file_id() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.AudioFile.file_id)
  return *file_id_;
}
inline void AudioFile::set_file_id(const ::std::string& value) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.AudioFile.file_id)
}
inline void AudioFile::set_file_id(const char* value) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.metadata.proto.AudioFile.file_id)
}
inline void AudioFile::set_file_id(const void* value, size_t size) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.metadata.proto.AudioFile.file_id)
}
inline ::std::string* AudioFile::mutable_file_id() {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.metadata.proto.AudioFile.file_id)
  return file_id_;
}
inline ::std::string* AudioFile::release_file_id() {
  clear_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_id_;
    file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AudioFile::set_allocated_file_id(::std::string* file_id) {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_id_;
  }
  if (file_id) {
    set_has_file_id();
    file_id_ = file_id;
  } else {
    clear_has_file_id();
    file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.metadata.proto.AudioFile.file_id)
}

// optional .spotify.metadata.proto.AudioFile.Format format = 2;
inline bool AudioFile::has_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioFile::set_has_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioFile::clear_has_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioFile::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::spotify::metadata::proto::AudioFile_Format AudioFile::format() const {
  // @@protoc_insertion_point(field_get:spotify.metadata.proto.AudioFile.format)
  return static_cast< ::spotify::metadata::proto::AudioFile_Format >(format_);
}
inline void AudioFile::set_format(::spotify::metadata::proto::AudioFile_Format value) {
  assert(::spotify::metadata::proto::AudioFile_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:spotify.metadata.proto.AudioFile.format)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace metadata
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spotify::metadata::proto::Album_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::metadata::proto::Album_Type>() {
  return ::spotify::metadata::proto::Album_Type_descriptor();
}
template <> struct is_proto_enum< ::spotify::metadata::proto::Image_Size> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::metadata::proto::Image_Size>() {
  return ::spotify::metadata::proto::Image_Size_descriptor();
}
template <> struct is_proto_enum< ::spotify::metadata::proto::Copyright_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::metadata::proto::Copyright_Type>() {
  return ::spotify::metadata::proto::Copyright_Type_descriptor();
}
template <> struct is_proto_enum< ::spotify::metadata::proto::Restriction_Catalogue> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::metadata::proto::Restriction_Catalogue>() {
  return ::spotify::metadata::proto::Restriction_Catalogue_descriptor();
}
template <> struct is_proto_enum< ::spotify::metadata::proto::Restriction_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::metadata::proto::Restriction_Type>() {
  return ::spotify::metadata::proto::Restriction_Type_descriptor();
}
template <> struct is_proto_enum< ::spotify::metadata::proto::AudioFile_Format> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::metadata::proto::AudioFile_Format>() {
  return ::spotify::metadata::proto::AudioFile_Format_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metadata_2eproto__INCLUDED
