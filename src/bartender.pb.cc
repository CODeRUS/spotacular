// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bartender.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bartender.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace bartender {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* StoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Story_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Story_reflection_ = NULL;
const ::google::protobuf::Descriptor* RichText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RichText_reflection_ = NULL;
const ::google::protobuf::Descriptor* RichTextField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RichTextField_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reason_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reason_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpotifyLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpotifyLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpotifyAudioPreview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpotifyAudioPreview_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpotifyImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpotifyImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcertData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcertData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscoveredPlaylist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveredPlaylist_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscoverNux_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoverNux_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StoryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReasonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MetadataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScoreType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bartender_2eproto() {
  protobuf_AddDesc_bartender_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bartender.proto");
  GOOGLE_CHECK(file != NULL);
  StoryRequest_descriptor_ = file->message_type(0);
  static const int StoryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryRequest, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryRequest, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryRequest, device_),
  };
  StoryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoryRequest_descriptor_,
      StoryRequest::default_instance_,
      StoryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoryRequest));
  StoryList_descriptor_ = file->message_type(1);
  static const int StoryList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryList, stories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryList, has_fallback_),
  };
  StoryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoryList_descriptor_,
      StoryList::default_instance_,
      StoryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoryList));
  Story_descriptor_ = file->message_type(2);
  static const int Story_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, story_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, recommended_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, recommended_item_parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, hero_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, reason_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, reason_image_),
  };
  Story_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Story_descriptor_,
      Story::default_instance_,
      Story_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Story, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Story));
  RichText_descriptor_ = file->message_type(3);
  static const int RichText_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichText, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichText, fields_),
  };
  RichText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RichText_descriptor_,
      RichText::default_instance_,
      RichText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RichText));
  RichTextField_descriptor_ = file->message_type(4);
  static const int RichTextField_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextField, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextField, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextField, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextField, bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextField, italic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextField, underline_),
  };
  RichTextField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RichTextField_descriptor_,
      RichTextField::default_instance_,
      RichTextField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RichTextField));
  Reason_descriptor_ = file->message_type(5);
  static const int Reason_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reason, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reason, sample_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reason, criteria_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reason, reason_type_),
  };
  Reason_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reason_descriptor_,
      Reason::default_instance_,
      Reason_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reason, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reason, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reason));
  SpotifyLink_descriptor_ = file->message_type(6);
  static const int SpotifyLink_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyLink, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyLink, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyLink, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyLink, preview_),
  };
  SpotifyLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpotifyLink_descriptor_,
      SpotifyLink::default_instance_,
      SpotifyLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpotifyLink));
  SpotifyAudioPreview_descriptor_ = file->message_type(7);
  static const int SpotifyAudioPreview_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyAudioPreview, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyAudioPreview, file_id_),
  };
  SpotifyAudioPreview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpotifyAudioPreview_descriptor_,
      SpotifyAudioPreview::default_instance_,
      SpotifyAudioPreview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyAudioPreview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyAudioPreview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpotifyAudioPreview));
  SpotifyImage_descriptor_ = file->message_type(8);
  static const int SpotifyImage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyImage, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyImage, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyImage, height_),
  };
  SpotifyImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpotifyImage_descriptor_,
      SpotifyImage::default_instance_,
      SpotifyImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotifyImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpotifyImage));
  Metadata_descriptor_ = file->message_type(9);
  static const int Metadata_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, favicon_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, external_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, internal_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, dtpublished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, dtexpiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, score_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, concert_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, item_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, image_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
  ConcertData_descriptor_ = file->message_type(10);
  static const int ConcertData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcertData, dtstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcertData, dtend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcertData, location_),
  };
  ConcertData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcertData_descriptor_,
      ConcertData::default_instance_,
      ConcertData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcertData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcertData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcertData));
  Location_descriptor_ = file->message_type(11);
  static const int Location_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, lng_),
  };
  Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location));
  DiscoveredPlaylist_descriptor_ = file->message_type(12);
  static const int DiscoveredPlaylist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveredPlaylist, uri_),
  };
  DiscoveredPlaylist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoveredPlaylist_descriptor_,
      DiscoveredPlaylist::default_instance_,
      DiscoveredPlaylist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveredPlaylist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveredPlaylist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoveredPlaylist));
  DiscoverNux_descriptor_ = file->message_type(13);
  static const int DiscoverNux_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoverNux, seen_),
  };
  DiscoverNux_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoverNux_descriptor_,
      DiscoverNux::default_instance_,
      DiscoverNux_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoverNux, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoverNux, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoverNux));
  StoryType_descriptor_ = file->enum_type(0);
  ReasonType_descriptor_ = file->enum_type(1);
  MetadataType_descriptor_ = file->enum_type(2);
  ScoreType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bartender_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoryRequest_descriptor_, &StoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoryList_descriptor_, &StoryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Story_descriptor_, &Story::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RichText_descriptor_, &RichText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RichTextField_descriptor_, &RichTextField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reason_descriptor_, &Reason::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpotifyLink_descriptor_, &SpotifyLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpotifyAudioPreview_descriptor_, &SpotifyAudioPreview::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpotifyImage_descriptor_, &SpotifyImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcertData_descriptor_, &ConcertData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoveredPlaylist_descriptor_, &DiscoveredPlaylist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoverNux_descriptor_, &DiscoverNux::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bartender_2eproto() {
  delete StoryRequest::default_instance_;
  delete StoryRequest_reflection_;
  delete StoryList::default_instance_;
  delete StoryList_reflection_;
  delete Story::default_instance_;
  delete Story_reflection_;
  delete RichText::default_instance_;
  delete RichText_reflection_;
  delete RichTextField::default_instance_;
  delete RichTextField_reflection_;
  delete Reason::default_instance_;
  delete Reason_reflection_;
  delete SpotifyLink::default_instance_;
  delete SpotifyLink_reflection_;
  delete SpotifyAudioPreview::default_instance_;
  delete SpotifyAudioPreview_reflection_;
  delete SpotifyImage::default_instance_;
  delete SpotifyImage_reflection_;
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
  delete ConcertData::default_instance_;
  delete ConcertData_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
  delete DiscoveredPlaylist::default_instance_;
  delete DiscoveredPlaylist_reflection_;
  delete DiscoverNux::default_instance_;
  delete DiscoverNux_reflection_;
}

void protobuf_AddDesc_bartender_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017bartender.proto\022\027spotify.bartender.pro"
    "to\"A\n\014StoryRequest\022\017\n\007country\030\001 \001(\t\022\020\n\010l"
    "anguage\030\002 \001(\t\022\016\n\006device\030\003 \001(\t\"R\n\tStoryLi"
    "st\022/\n\007stories\030\001 \003(\0132\036.spotify.bartender."
    "proto.Story\022\024\n\014has_fallback\030\014 \001(\010\"\310\003\n\005St"
    "ory\022\017\n\007version\030\001 \001(\005\022\020\n\010story_id\030\002 \001(\t\0220"
    "\n\004type\030\003 \001(\0162\".spotify.bartender.proto.S"
    "toryType\022>\n\020recommended_item\030\005 \001(\0132$.spo"
    "tify.bartender.proto.SpotifyLink\022E\n\027reco"
    "mmended_item_parent\030\006 \001(\0132$.spotify.bart"
    "ender.proto.SpotifyLink\0229\n\nhero_image\030\010 "
    "\003(\0132%.spotify.bartender.proto.SpotifyIma"
    "ge\0223\n\010metadata\030\t \001(\0132!.spotify.bartender"
    ".proto.Metadata\0226\n\013reason_text\030\n \001(\0132!.s"
    "potify.bartender.proto.RichText\022;\n\014reaso"
    "n_image\030\013 \003(\0132%.spotify.bartender.proto."
    "SpotifyImage\"P\n\010RichText\022\014\n\004text\030\001 \001(\t\0226"
    "\n\006fields\030\002 \003(\0132&.spotify.bartender.proto"
    ".RichTextField\"h\n\rRichTextField\022\014\n\004text\030"
    "\001 \001(\t\022\013\n\003uri\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\014\n\004bold\030"
    "\004 \001(\010\022\016\n\006italic\030\005 \001(\010\022\021\n\tunderline\030\006 \001(\010"
    "\"\314\001\n\006Reason\0221\n\004type\030\001 \001(\0162#.spotify.bart"
    "ender.proto.ReasonType\022=\n\017sample_criteri"
    "a\030\002 \003(\0132$.spotify.bartender.proto.Spotif"
    "yLink\022\026\n\016criteria_count\030\003 \001(\005\0228\n\013reason_"
    "type\030\004 \003(\0162#.spotify.bartender.proto.Rea"
    "sonType\"\245\001\n\013SpotifyLink\022\013\n\003uri\030\001 \001(\t\022\024\n\014"
    "display_name\030\002 \001(\t\0224\n\006parent\030\003 \001(\0132$.spo"
    "tify.bartender.proto.SpotifyLink\022=\n\007prev"
    "iew\030\006 \003(\0132,.spotify.bartender.proto.Spot"
    "ifyAudioPreview\"3\n\023SpotifyAudioPreview\022\013"
    "\n\003uri\030\001 \001(\t\022\017\n\007file_id\030\002 \001(\t\"K\n\014SpotifyI"
    "mage\022\013\n\003uri\030\001 \001(\t\022\017\n\007file_id\030\002 \001(\t\022\r\n\005wi"
    "dth\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\"\341\003\n\010Metadata\022\n"
    "\n\002id\030\001 \001(\t\022\013\n\003app\030\002 \001(\t\0223\n\004type\030\003 \001(\0162%."
    "spotify.bartender.proto.MetadataType\022\r\n\005"
    "title\030\004 \001(\t\022\017\n\007summary\030\005 \001(\t\022\023\n\013favicon_"
    "url\030\006 \001(\t\022\024\n\014external_url\030\007 \001(\t\022\024\n\014inter"
    "nal_uri\030\010 \001(\t\022\023\n\013dtpublished\030\t \001(\005\022\020\n\010dt"
    "expiry\030\n \001(\005\0224\n\006author\030\013 \001(\0132$.spotify.b"
    "artender.proto.SpotifyLink\022\r\n\005score\030\014 \003("
    "\005\0226\n\nscore_type\030\r \003(\0162\".spotify.bartende"
    "r.proto.ScoreType\022:\n\014concert_data\030\016 \001(\0132"
    "$.spotify.bartender.proto.ConcertData\022\020\n"
    "\010item_uri\030\017 \003(\t\0224\n\005image\030\020 \003(\0132%.spotify"
    ".bartender.proto.SpotifyImage\"b\n\013Concert"
    "Data\022\017\n\007dtstart\030\001 \001(\005\022\r\n\005dtend\030\002 \001(\005\0223\n\010"
    "location\030\003 \001(\0132!.spotify.bartender.proto"
    ".Location\"@\n\010Location\022\014\n\004name\030\001 \001(\t\022\014\n\004c"
    "ity\030\002 \001(\t\022\013\n\003lat\030\003 \001(\001\022\013\n\003lng\030\004 \001(\001\"!\n\022D"
    "iscoveredPlaylist\022\013\n\003uri\030\001 \001(\t\"\033\n\013Discov"
    "erNux\022\014\n\004seen\030\001 \001(\005*\347\001\n\tStoryType\022\026\n\022TYP"
    "E_UNKNOWN_STORY\020\000\022\027\n\023TYPE_RECOMMENDATION"
    "\020\001\022\024\n\020TYPE_NEW_RELEASE\020\002\022\024\n\020TYPE_SHARED_"
    "ITEM\020\003\022\025\n\021TYPE_CREATED_ITEM\020\004\022\033\n\027TYPE_SU"
    "BSCRIBED_TO_ITEM\020\005\022\031\n\025TYPE_FOLLOWED_PROF"
    "ILE\020\006\022\026\n\022TYPE_SOCIAL_LISTEN\020\007\022\026\n\022TYPE_RE"
    "CENT_STREAM\020\010*\222\001\n\nReasonType\022\027\n\023TYPE_UNK"
    "NOWN_REASON\020\000\022\024\n\020TYPE_LISTENED_TO\020\001\022\025\n\021T"
    "YPE_LISTENED_TO2\020\002\022\024\n\020TYPE_FOLLOW_USER\020\003"
    "\022\026\n\022TYPE_FOLLOW_ARTIST\020\004\022\020\n\014TYPE_POPULAR"
    "\020\005*\205\001\n\014MetadataType\022\031\n\025TYPE_UNKNOWN_META"
    "DATA\020\000\022\025\n\021TYPE_SPOTIFY_DATA\020\001\022\017\n\013TYPE_RE"
    "VIEW\020\002\022\r\n\tTYPE_NEWS\020\003\022\020\n\014TYPE_CONCERT\020\004\022"
    "\021\n\rTYPE_PLAYLIST\020\005*R\n\tScoreType\022\026\n\022TYPE_"
    "UNKNOWN_SCORE\020\000\022\027\n\023TYPE_FOLLOWER_COUNT\020\001"
    "\022\024\n\020TYPE_STAR_RATING\020\002", 2662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bartender.proto", &protobuf_RegisterTypes);
  StoryRequest::default_instance_ = new StoryRequest();
  StoryList::default_instance_ = new StoryList();
  Story::default_instance_ = new Story();
  RichText::default_instance_ = new RichText();
  RichTextField::default_instance_ = new RichTextField();
  Reason::default_instance_ = new Reason();
  SpotifyLink::default_instance_ = new SpotifyLink();
  SpotifyAudioPreview::default_instance_ = new SpotifyAudioPreview();
  SpotifyImage::default_instance_ = new SpotifyImage();
  Metadata::default_instance_ = new Metadata();
  ConcertData::default_instance_ = new ConcertData();
  Location::default_instance_ = new Location();
  DiscoveredPlaylist::default_instance_ = new DiscoveredPlaylist();
  DiscoverNux::default_instance_ = new DiscoverNux();
  StoryRequest::default_instance_->InitAsDefaultInstance();
  StoryList::default_instance_->InitAsDefaultInstance();
  Story::default_instance_->InitAsDefaultInstance();
  RichText::default_instance_->InitAsDefaultInstance();
  RichTextField::default_instance_->InitAsDefaultInstance();
  Reason::default_instance_->InitAsDefaultInstance();
  SpotifyLink::default_instance_->InitAsDefaultInstance();
  SpotifyAudioPreview::default_instance_->InitAsDefaultInstance();
  SpotifyImage::default_instance_->InitAsDefaultInstance();
  Metadata::default_instance_->InitAsDefaultInstance();
  ConcertData::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  DiscoveredPlaylist::default_instance_->InitAsDefaultInstance();
  DiscoverNux::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bartender_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bartender_2eproto {
  StaticDescriptorInitializer_bartender_2eproto() {
    protobuf_AddDesc_bartender_2eproto();
  }
} static_descriptor_initializer_bartender_2eproto_;
const ::google::protobuf::EnumDescriptor* StoryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoryType_descriptor_;
}
bool StoryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReasonType_descriptor_;
}
bool ReasonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MetadataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetadataType_descriptor_;
}
bool MetadataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreType_descriptor_;
}
bool ScoreType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StoryRequest::kCountryFieldNumber;
const int StoryRequest::kLanguageFieldNumber;
const int StoryRequest::kDeviceFieldNumber;
#endif  // !_MSC_VER

StoryRequest::StoryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.StoryRequest)
}

void StoryRequest::InitAsDefaultInstance() {
}

StoryRequest::StoryRequest(const StoryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.StoryRequest)
}

void StoryRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryRequest::~StoryRequest() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.StoryRequest)
  SharedDtor();
}

void StoryRequest::SharedDtor() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void StoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoryRequest_descriptor_;
}

const StoryRequest& StoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

StoryRequest* StoryRequest::default_instance_ = NULL;

StoryRequest* StoryRequest::New() const {
  return new StoryRequest;
}

void StoryRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.StoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2;
      case 2: {
        if (tag == 18) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device;
        break;
      }

      // optional string device = 3;
      case 3: {
        if (tag == 26) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.StoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.StoryRequest)
  return false;
#undef DO_
}

void StoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.StoryRequest)
  // optional string country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country(), output);
  }

  // optional string language = 2;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  // optional string device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.StoryRequest)
}

::google::protobuf::uint8* StoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.StoryRequest)
  // optional string country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country(), target);
  }

  // optional string language = 2;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // optional string device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.StoryRequest)
  return target;
}

int StoryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string device = 3;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoryRequest::MergeFrom(const StoryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoryRequest::CopyFrom(const StoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryRequest::IsInitialized() const {

  return true;
}

void StoryRequest::Swap(StoryRequest* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(language_, other->language_);
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoryRequest_descriptor_;
  metadata.reflection = StoryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoryList::kStoriesFieldNumber;
const int StoryList::kHasFallbackFieldNumber;
#endif  // !_MSC_VER

StoryList::StoryList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.StoryList)
}

void StoryList::InitAsDefaultInstance() {
}

StoryList::StoryList(const StoryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.StoryList)
}

void StoryList::SharedCtor() {
  _cached_size_ = 0;
  has_fallback_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryList::~StoryList() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.StoryList)
  SharedDtor();
}

void StoryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoryList_descriptor_;
}

const StoryList& StoryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

StoryList* StoryList::default_instance_ = NULL;

StoryList* StoryList::New() const {
  return new StoryList;
}

void StoryList::Clear() {
  has_fallback_ = false;
  stories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.StoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spotify.bartender.proto.Story stories = 1;
      case 1: {
        if (tag == 10) {
         parse_stories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_stories;
        if (input->ExpectTag(96)) goto parse_has_fallback;
        break;
      }

      // optional bool has_fallback = 12;
      case 12: {
        if (tag == 96) {
         parse_has_fallback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_fallback_)));
          set_has_has_fallback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.StoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.StoryList)
  return false;
#undef DO_
}

void StoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.StoryList)
  // repeated .spotify.bartender.proto.Story stories = 1;
  for (int i = 0; i < this->stories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stories(i), output);
  }

  // optional bool has_fallback = 12;
  if (has_has_fallback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->has_fallback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.StoryList)
}

::google::protobuf::uint8* StoryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.StoryList)
  // repeated .spotify.bartender.proto.Story stories = 1;
  for (int i = 0; i < this->stories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stories(i), target);
  }

  // optional bool has_fallback = 12;
  if (has_has_fallback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->has_fallback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.StoryList)
  return target;
}

int StoryList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool has_fallback = 12;
    if (has_has_fallback()) {
      total_size += 1 + 1;
    }

  }
  // repeated .spotify.bartender.proto.Story stories = 1;
  total_size += 1 * this->stories_size();
  for (int i = 0; i < this->stories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stories(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoryList::MergeFrom(const StoryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  stories_.MergeFrom(from.stories_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_has_fallback()) {
      set_has_fallback(from.has_fallback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoryList::CopyFrom(const StoryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryList::IsInitialized() const {

  return true;
}

void StoryList::Swap(StoryList* other) {
  if (other != this) {
    stories_.Swap(&other->stories_);
    std::swap(has_fallback_, other->has_fallback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoryList_descriptor_;
  metadata.reflection = StoryList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Story::kVersionFieldNumber;
const int Story::kStoryIdFieldNumber;
const int Story::kTypeFieldNumber;
const int Story::kRecommendedItemFieldNumber;
const int Story::kRecommendedItemParentFieldNumber;
const int Story::kHeroImageFieldNumber;
const int Story::kMetadataFieldNumber;
const int Story::kReasonTextFieldNumber;
const int Story::kReasonImageFieldNumber;
#endif  // !_MSC_VER

Story::Story()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.Story)
}

void Story::InitAsDefaultInstance() {
  recommended_item_ = const_cast< ::spotify::bartender::proto::SpotifyLink*>(&::spotify::bartender::proto::SpotifyLink::default_instance());
  recommended_item_parent_ = const_cast< ::spotify::bartender::proto::SpotifyLink*>(&::spotify::bartender::proto::SpotifyLink::default_instance());
  metadata_ = const_cast< ::spotify::bartender::proto::Metadata*>(&::spotify::bartender::proto::Metadata::default_instance());
  reason_text_ = const_cast< ::spotify::bartender::proto::RichText*>(&::spotify::bartender::proto::RichText::default_instance());
}

Story::Story(const Story& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.Story)
}

void Story::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  story_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  recommended_item_ = NULL;
  recommended_item_parent_ = NULL;
  metadata_ = NULL;
  reason_text_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Story::~Story() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.Story)
  SharedDtor();
}

void Story::SharedDtor() {
  if (story_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete story_id_;
  }
  if (this != default_instance_) {
    delete recommended_item_;
    delete recommended_item_parent_;
    delete metadata_;
    delete reason_text_;
  }
}

void Story::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Story::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Story_descriptor_;
}

const Story& Story::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

Story* Story::default_instance_ = NULL;

Story* Story::New() const {
  return new Story;
}

void Story::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Story*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(version_, type_);
    if (has_story_id()) {
      if (story_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        story_id_->clear();
      }
    }
    if (has_recommended_item()) {
      if (recommended_item_ != NULL) recommended_item_->::spotify::bartender::proto::SpotifyLink::Clear();
    }
    if (has_recommended_item_parent()) {
      if (recommended_item_parent_ != NULL) recommended_item_parent_->::spotify::bartender::proto::SpotifyLink::Clear();
    }
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::spotify::bartender::proto::Metadata::Clear();
    }
    if (has_reason_text()) {
      if (reason_text_ != NULL) reason_text_->::spotify::bartender::proto::RichText::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hero_image_.Clear();
  reason_image_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Story::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.Story)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_story_id;
        break;
      }

      // optional string story_id = 2;
      case 2: {
        if (tag == 18) {
         parse_story_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_story_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->story_id().data(), this->story_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "story_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .spotify.bartender.proto.StoryType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::bartender::proto::StoryType_IsValid(value)) {
            set_type(static_cast< ::spotify::bartender::proto::StoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recommended_item;
        break;
      }

      // optional .spotify.bartender.proto.SpotifyLink recommended_item = 5;
      case 5: {
        if (tag == 42) {
         parse_recommended_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recommended_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recommended_item_parent;
        break;
      }

      // optional .spotify.bartender.proto.SpotifyLink recommended_item_parent = 6;
      case 6: {
        if (tag == 50) {
         parse_recommended_item_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recommended_item_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_hero_image;
        break;
      }

      // repeated .spotify.bartender.proto.SpotifyImage hero_image = 8;
      case 8: {
        if (tag == 66) {
         parse_hero_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_hero_image;
        if (input->ExpectTag(74)) goto parse_metadata;
        break;
      }

      // optional .spotify.bartender.proto.Metadata metadata = 9;
      case 9: {
        if (tag == 74) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_reason_text;
        break;
      }

      // optional .spotify.bartender.proto.RichText reason_text = 10;
      case 10: {
        if (tag == 82) {
         parse_reason_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_reason_image;
        break;
      }

      // repeated .spotify.bartender.proto.SpotifyImage reason_image = 11;
      case 11: {
        if (tag == 90) {
         parse_reason_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reason_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_reason_image;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.Story)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.Story)
  return false;
#undef DO_
}

void Story::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.Story)
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional string story_id = 2;
  if (has_story_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->story_id().data(), this->story_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "story_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->story_id(), output);
  }

  // optional .spotify.bartender.proto.StoryType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .spotify.bartender.proto.SpotifyLink recommended_item = 5;
  if (has_recommended_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->recommended_item(), output);
  }

  // optional .spotify.bartender.proto.SpotifyLink recommended_item_parent = 6;
  if (has_recommended_item_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recommended_item_parent(), output);
  }

  // repeated .spotify.bartender.proto.SpotifyImage hero_image = 8;
  for (int i = 0; i < this->hero_image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hero_image(i), output);
  }

  // optional .spotify.bartender.proto.Metadata metadata = 9;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->metadata(), output);
  }

  // optional .spotify.bartender.proto.RichText reason_text = 10;
  if (has_reason_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->reason_text(), output);
  }

  // repeated .spotify.bartender.proto.SpotifyImage reason_image = 11;
  for (int i = 0; i < this->reason_image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->reason_image(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.Story)
}

::google::protobuf::uint8* Story::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.Story)
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional string story_id = 2;
  if (has_story_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->story_id().data(), this->story_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "story_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->story_id(), target);
  }

  // optional .spotify.bartender.proto.StoryType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .spotify.bartender.proto.SpotifyLink recommended_item = 5;
  if (has_recommended_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->recommended_item(), target);
  }

  // optional .spotify.bartender.proto.SpotifyLink recommended_item_parent = 6;
  if (has_recommended_item_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recommended_item_parent(), target);
  }

  // repeated .spotify.bartender.proto.SpotifyImage hero_image = 8;
  for (int i = 0; i < this->hero_image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hero_image(i), target);
  }

  // optional .spotify.bartender.proto.Metadata metadata = 9;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->metadata(), target);
  }

  // optional .spotify.bartender.proto.RichText reason_text = 10;
  if (has_reason_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->reason_text(), target);
  }

  // repeated .spotify.bartender.proto.SpotifyImage reason_image = 11;
  for (int i = 0; i < this->reason_image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->reason_image(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.Story)
  return target;
}

int Story::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string story_id = 2;
    if (has_story_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->story_id());
    }

    // optional .spotify.bartender.proto.StoryType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .spotify.bartender.proto.SpotifyLink recommended_item = 5;
    if (has_recommended_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recommended_item());
    }

    // optional .spotify.bartender.proto.SpotifyLink recommended_item_parent = 6;
    if (has_recommended_item_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recommended_item_parent());
    }

    // optional .spotify.bartender.proto.Metadata metadata = 9;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }

    // optional .spotify.bartender.proto.RichText reason_text = 10;
    if (has_reason_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason_text());
    }

  }
  // repeated .spotify.bartender.proto.SpotifyImage hero_image = 8;
  total_size += 1 * this->hero_image_size();
  for (int i = 0; i < this->hero_image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_image(i));
  }

  // repeated .spotify.bartender.proto.SpotifyImage reason_image = 11;
  total_size += 1 * this->reason_image_size();
  for (int i = 0; i < this->reason_image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reason_image(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Story::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Story* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Story*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Story::MergeFrom(const Story& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_image_.MergeFrom(from.hero_image_);
  reason_image_.MergeFrom(from.reason_image_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_story_id()) {
      set_story_id(from.story_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_recommended_item()) {
      mutable_recommended_item()->::spotify::bartender::proto::SpotifyLink::MergeFrom(from.recommended_item());
    }
    if (from.has_recommended_item_parent()) {
      mutable_recommended_item_parent()->::spotify::bartender::proto::SpotifyLink::MergeFrom(from.recommended_item_parent());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::spotify::bartender::proto::Metadata::MergeFrom(from.metadata());
    }
    if (from.has_reason_text()) {
      mutable_reason_text()->::spotify::bartender::proto::RichText::MergeFrom(from.reason_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Story::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Story::CopyFrom(const Story& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Story::IsInitialized() const {

  return true;
}

void Story::Swap(Story* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(story_id_, other->story_id_);
    std::swap(type_, other->type_);
    std::swap(recommended_item_, other->recommended_item_);
    std::swap(recommended_item_parent_, other->recommended_item_parent_);
    hero_image_.Swap(&other->hero_image_);
    std::swap(metadata_, other->metadata_);
    std::swap(reason_text_, other->reason_text_);
    reason_image_.Swap(&other->reason_image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Story::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Story_descriptor_;
  metadata.reflection = Story_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RichText::kTextFieldNumber;
const int RichText::kFieldsFieldNumber;
#endif  // !_MSC_VER

RichText::RichText()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.RichText)
}

void RichText::InitAsDefaultInstance() {
}

RichText::RichText(const RichText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.RichText)
}

void RichText::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RichText::~RichText() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.RichText)
  SharedDtor();
}

void RichText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void RichText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RichText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RichText_descriptor_;
}

const RichText& RichText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

RichText* RichText::default_instance_ = NULL;

RichText* RichText::New() const {
  return new RichText;
}

void RichText::Clear() {
  if (has_text()) {
    if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      text_->clear();
    }
  }
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RichText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.RichText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fields;
        break;
      }

      // repeated .spotify.bartender.proto.RichTextField fields = 2;
      case 2: {
        if (tag == 18) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fields;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.RichText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.RichText)
  return false;
#undef DO_
}

void RichText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.RichText)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // repeated .spotify.bartender.proto.RichTextField fields = 2;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.RichText)
}

::google::protobuf::uint8* RichText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.RichText)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // repeated .spotify.bartender.proto.RichTextField fields = 2;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.RichText)
  return target;
}

int RichText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  // repeated .spotify.bartender.proto.RichTextField fields = 2;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RichText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RichText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RichText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RichText::MergeFrom(const RichText& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RichText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RichText::CopyFrom(const RichText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichText::IsInitialized() const {

  return true;
}

void RichText::Swap(RichText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    fields_.Swap(&other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RichText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RichText_descriptor_;
  metadata.reflection = RichText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RichTextField::kTextFieldNumber;
const int RichTextField::kUriFieldNumber;
const int RichTextField::kUrlFieldNumber;
const int RichTextField::kBoldFieldNumber;
const int RichTextField::kItalicFieldNumber;
const int RichTextField::kUnderlineFieldNumber;
#endif  // !_MSC_VER

RichTextField::RichTextField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.RichTextField)
}

void RichTextField::InitAsDefaultInstance() {
}

RichTextField::RichTextField(const RichTextField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.RichTextField)
}

void RichTextField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bold_ = false;
  italic_ = false;
  underline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RichTextField::~RichTextField() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.RichTextField)
  SharedDtor();
}

void RichTextField::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void RichTextField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RichTextField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RichTextField_descriptor_;
}

const RichTextField& RichTextField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

RichTextField* RichTextField::default_instance_ = NULL;

RichTextField* RichTextField::New() const {
  return new RichTextField;
}

void RichTextField::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RichTextField*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(bold_, underline_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RichTextField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.RichTextField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uri;
        break;
      }

      // optional string uri = 2;
      case 2: {
        if (tag == 18) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bold;
        break;
      }

      // optional bool bold = 4;
      case 4: {
        if (tag == 32) {
         parse_bold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
          set_has_bold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_italic;
        break;
      }

      // optional bool italic = 5;
      case 5: {
        if (tag == 40) {
         parse_italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          set_has_italic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_underline;
        break;
      }

      // optional bool underline = 6;
      case 6: {
        if (tag == 48) {
         parse_underline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underline_)));
          set_has_underline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.RichTextField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.RichTextField)
  return false;
#undef DO_
}

void RichTextField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.RichTextField)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional bool bold = 4;
  if (has_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bold(), output);
  }

  // optional bool italic = 5;
  if (has_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->italic(), output);
  }

  // optional bool underline = 6;
  if (has_underline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->underline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.RichTextField)
}

::google::protobuf::uint8* RichTextField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.RichTextField)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional bool bold = 4;
  if (has_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bold(), target);
  }

  // optional bool italic = 5;
  if (has_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->italic(), target);
  }

  // optional bool underline = 6;
  if (has_underline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->underline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.RichTextField)
  return target;
}

int RichTextField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string uri = 2;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bool bold = 4;
    if (has_bold()) {
      total_size += 1 + 1;
    }

    // optional bool italic = 5;
    if (has_italic()) {
      total_size += 1 + 1;
    }

    // optional bool underline = 6;
    if (has_underline()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RichTextField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RichTextField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RichTextField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RichTextField::MergeFrom(const RichTextField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_bold()) {
      set_bold(from.bold());
    }
    if (from.has_italic()) {
      set_italic(from.italic());
    }
    if (from.has_underline()) {
      set_underline(from.underline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RichTextField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RichTextField::CopyFrom(const RichTextField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichTextField::IsInitialized() const {

  return true;
}

void RichTextField::Swap(RichTextField* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(uri_, other->uri_);
    std::swap(url_, other->url_);
    std::swap(bold_, other->bold_);
    std::swap(italic_, other->italic_);
    std::swap(underline_, other->underline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RichTextField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RichTextField_descriptor_;
  metadata.reflection = RichTextField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reason::kTypeFieldNumber;
const int Reason::kSampleCriteriaFieldNumber;
const int Reason::kCriteriaCountFieldNumber;
const int Reason::kReasonTypeFieldNumber;
#endif  // !_MSC_VER

Reason::Reason()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.Reason)
}

void Reason::InitAsDefaultInstance() {
}

Reason::Reason(const Reason& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.Reason)
}

void Reason::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  criteria_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reason::~Reason() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.Reason)
  SharedDtor();
}

void Reason::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reason::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reason::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reason_descriptor_;
}

const Reason& Reason::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

Reason* Reason::default_instance_ = NULL;

Reason* Reason::New() const {
  return new Reason;
}

void Reason::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Reason*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, criteria_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sample_criteria_.Clear();
  reason_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reason::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.Reason)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .spotify.bartender.proto.ReasonType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::bartender::proto::ReasonType_IsValid(value)) {
            set_type(static_cast< ::spotify::bartender::proto::ReasonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sample_criteria;
        break;
      }

      // repeated .spotify.bartender.proto.SpotifyLink sample_criteria = 2;
      case 2: {
        if (tag == 18) {
         parse_sample_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sample_criteria()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sample_criteria;
        if (input->ExpectTag(24)) goto parse_criteria_count;
        break;
      }

      // optional int32 criteria_count = 3;
      case 3: {
        if (tag == 24) {
         parse_criteria_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &criteria_count_)));
          set_has_criteria_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reason_type;
        break;
      }

      // repeated .spotify.bartender.proto.ReasonType reason_type = 4;
      case 4: {
        if (tag == 32) {
         parse_reason_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::bartender::proto::ReasonType_IsValid(value)) {
            add_reason_type(static_cast< ::spotify::bartender::proto::ReasonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::spotify::bartender::proto::ReasonType_IsValid,
                 this->mutable_reason_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reason_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.Reason)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.Reason)
  return false;
#undef DO_
}

void Reason::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.Reason)
  // optional .spotify.bartender.proto.ReasonType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .spotify.bartender.proto.SpotifyLink sample_criteria = 2;
  for (int i = 0; i < this->sample_criteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sample_criteria(i), output);
  }

  // optional int32 criteria_count = 3;
  if (has_criteria_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->criteria_count(), output);
  }

  // repeated .spotify.bartender.proto.ReasonType reason_type = 4;
  for (int i = 0; i < this->reason_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.Reason)
}

::google::protobuf::uint8* Reason::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.Reason)
  // optional .spotify.bartender.proto.ReasonType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .spotify.bartender.proto.SpotifyLink sample_criteria = 2;
  for (int i = 0; i < this->sample_criteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sample_criteria(i), target);
  }

  // optional int32 criteria_count = 3;
  if (has_criteria_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->criteria_count(), target);
  }

  // repeated .spotify.bartender.proto.ReasonType reason_type = 4;
  for (int i = 0; i < this->reason_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.Reason)
  return target;
}

int Reason::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .spotify.bartender.proto.ReasonType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 criteria_count = 3;
    if (has_criteria_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->criteria_count());
    }

  }
  // repeated .spotify.bartender.proto.SpotifyLink sample_criteria = 2;
  total_size += 1 * this->sample_criteria_size();
  for (int i = 0; i < this->sample_criteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sample_criteria(i));
  }

  // repeated .spotify.bartender.proto.ReasonType reason_type = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->reason_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->reason_type(i));
    }
    total_size += 1 * this->reason_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reason::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reason* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reason*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reason::MergeFrom(const Reason& from) {
  GOOGLE_CHECK_NE(&from, this);
  sample_criteria_.MergeFrom(from.sample_criteria_);
  reason_type_.MergeFrom(from.reason_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_criteria_count()) {
      set_criteria_count(from.criteria_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reason::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reason::CopyFrom(const Reason& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reason::IsInitialized() const {

  return true;
}

void Reason::Swap(Reason* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    sample_criteria_.Swap(&other->sample_criteria_);
    std::swap(criteria_count_, other->criteria_count_);
    reason_type_.Swap(&other->reason_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reason::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reason_descriptor_;
  metadata.reflection = Reason_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpotifyLink::kUriFieldNumber;
const int SpotifyLink::kDisplayNameFieldNumber;
const int SpotifyLink::kParentFieldNumber;
const int SpotifyLink::kPreviewFieldNumber;
#endif  // !_MSC_VER

SpotifyLink::SpotifyLink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.SpotifyLink)
}

void SpotifyLink::InitAsDefaultInstance() {
  parent_ = const_cast< ::spotify::bartender::proto::SpotifyLink*>(&::spotify::bartender::proto::SpotifyLink::default_instance());
}

SpotifyLink::SpotifyLink(const SpotifyLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.SpotifyLink)
}

void SpotifyLink::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpotifyLink::~SpotifyLink() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.SpotifyLink)
  SharedDtor();
}

void SpotifyLink::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_name_;
  }
  if (this != default_instance_) {
    delete parent_;
  }
}

void SpotifyLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpotifyLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpotifyLink_descriptor_;
}

const SpotifyLink& SpotifyLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

SpotifyLink* SpotifyLink::default_instance_ = NULL;

SpotifyLink* SpotifyLink::New() const {
  return new SpotifyLink;
}

void SpotifyLink::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        display_name_->clear();
      }
    }
    if (has_parent()) {
      if (parent_ != NULL) parent_->::spotify::bartender::proto::SpotifyLink::Clear();
    }
  }
  preview_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpotifyLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.SpotifyLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_display_name;
        break;
      }

      // optional string display_name = 2;
      case 2: {
        if (tag == 18) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "display_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent;
        break;
      }

      // optional .spotify.bartender.proto.SpotifyLink parent = 3;
      case 3: {
        if (tag == 26) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_preview;
        break;
      }

      // repeated .spotify.bartender.proto.SpotifyAudioPreview preview = 6;
      case 6: {
        if (tag == 50) {
         parse_preview:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preview()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_preview;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.SpotifyLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.SpotifyLink)
  return false;
#undef DO_
}

void SpotifyLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.SpotifyLink)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // optional .spotify.bartender.proto.SpotifyLink parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parent(), output);
  }

  // repeated .spotify.bartender.proto.SpotifyAudioPreview preview = 6;
  for (int i = 0; i < this->preview_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->preview(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.SpotifyLink)
}

::google::protobuf::uint8* SpotifyLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.SpotifyLink)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // optional .spotify.bartender.proto.SpotifyLink parent = 3;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parent(), target);
  }

  // repeated .spotify.bartender.proto.SpotifyAudioPreview preview = 6;
  for (int i = 0; i < this->preview_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->preview(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.SpotifyLink)
  return target;
}

int SpotifyLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string display_name = 2;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional .spotify.bartender.proto.SpotifyLink parent = 3;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

  }
  // repeated .spotify.bartender.proto.SpotifyAudioPreview preview = 6;
  total_size += 1 * this->preview_size();
  for (int i = 0; i < this->preview_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preview(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpotifyLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpotifyLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpotifyLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpotifyLink::MergeFrom(const SpotifyLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  preview_.MergeFrom(from.preview_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_parent()) {
      mutable_parent()->::spotify::bartender::proto::SpotifyLink::MergeFrom(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpotifyLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotifyLink::CopyFrom(const SpotifyLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotifyLink::IsInitialized() const {

  return true;
}

void SpotifyLink::Swap(SpotifyLink* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(display_name_, other->display_name_);
    std::swap(parent_, other->parent_);
    preview_.Swap(&other->preview_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpotifyLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpotifyLink_descriptor_;
  metadata.reflection = SpotifyLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpotifyAudioPreview::kUriFieldNumber;
const int SpotifyAudioPreview::kFileIdFieldNumber;
#endif  // !_MSC_VER

SpotifyAudioPreview::SpotifyAudioPreview()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.SpotifyAudioPreview)
}

void SpotifyAudioPreview::InitAsDefaultInstance() {
}

SpotifyAudioPreview::SpotifyAudioPreview(const SpotifyAudioPreview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.SpotifyAudioPreview)
}

void SpotifyAudioPreview::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpotifyAudioPreview::~SpotifyAudioPreview() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.SpotifyAudioPreview)
  SharedDtor();
}

void SpotifyAudioPreview::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void SpotifyAudioPreview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpotifyAudioPreview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpotifyAudioPreview_descriptor_;
}

const SpotifyAudioPreview& SpotifyAudioPreview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

SpotifyAudioPreview* SpotifyAudioPreview::default_instance_ = NULL;

SpotifyAudioPreview* SpotifyAudioPreview::New() const {
  return new SpotifyAudioPreview;
}

void SpotifyAudioPreview::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpotifyAudioPreview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.SpotifyAudioPreview)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_id;
        break;
      }

      // optional string file_id = 2;
      case 2: {
        if (tag == 18) {
         parse_file_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.SpotifyAudioPreview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.SpotifyAudioPreview)
  return false;
#undef DO_
}

void SpotifyAudioPreview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.SpotifyAudioPreview)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string file_id = 2;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.SpotifyAudioPreview)
}

::google::protobuf::uint8* SpotifyAudioPreview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.SpotifyAudioPreview)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string file_id = 2;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.SpotifyAudioPreview)
  return target;
}

int SpotifyAudioPreview::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string file_id = 2;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpotifyAudioPreview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpotifyAudioPreview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpotifyAudioPreview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpotifyAudioPreview::MergeFrom(const SpotifyAudioPreview& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpotifyAudioPreview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotifyAudioPreview::CopyFrom(const SpotifyAudioPreview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotifyAudioPreview::IsInitialized() const {

  return true;
}

void SpotifyAudioPreview::Swap(SpotifyAudioPreview* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(file_id_, other->file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpotifyAudioPreview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpotifyAudioPreview_descriptor_;
  metadata.reflection = SpotifyAudioPreview_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpotifyImage::kUriFieldNumber;
const int SpotifyImage::kFileIdFieldNumber;
const int SpotifyImage::kWidthFieldNumber;
const int SpotifyImage::kHeightFieldNumber;
#endif  // !_MSC_VER

SpotifyImage::SpotifyImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.SpotifyImage)
}

void SpotifyImage::InitAsDefaultInstance() {
}

SpotifyImage::SpotifyImage(const SpotifyImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.SpotifyImage)
}

void SpotifyImage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpotifyImage::~SpotifyImage() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.SpotifyImage)
  SharedDtor();
}

void SpotifyImage::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void SpotifyImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpotifyImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpotifyImage_descriptor_;
}

const SpotifyImage& SpotifyImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

SpotifyImage* SpotifyImage::default_instance_ = NULL;

SpotifyImage* SpotifyImage::New() const {
  return new SpotifyImage;
}

void SpotifyImage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpotifyImage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(width_, height_);
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpotifyImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.SpotifyImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_id;
        break;
      }

      // optional string file_id = 2;
      case 2: {
        if (tag == 18) {
         parse_file_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.SpotifyImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.SpotifyImage)
  return false;
#undef DO_
}

void SpotifyImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.SpotifyImage)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string file_id = 2;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_id(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.SpotifyImage)
}

::google::protobuf::uint8* SpotifyImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.SpotifyImage)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string file_id = 2;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_id(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.SpotifyImage)
  return target;
}

int SpotifyImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string file_id = 2;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpotifyImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpotifyImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpotifyImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpotifyImage::MergeFrom(const SpotifyImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpotifyImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotifyImage::CopyFrom(const SpotifyImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotifyImage::IsInitialized() const {

  return true;
}

void SpotifyImage::Swap(SpotifyImage* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(file_id_, other->file_id_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpotifyImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpotifyImage_descriptor_;
  metadata.reflection = SpotifyImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Metadata::kIdFieldNumber;
const int Metadata::kAppFieldNumber;
const int Metadata::kTypeFieldNumber;
const int Metadata::kTitleFieldNumber;
const int Metadata::kSummaryFieldNumber;
const int Metadata::kFaviconUrlFieldNumber;
const int Metadata::kExternalUrlFieldNumber;
const int Metadata::kInternalUriFieldNumber;
const int Metadata::kDtpublishedFieldNumber;
const int Metadata::kDtexpiryFieldNumber;
const int Metadata::kAuthorFieldNumber;
const int Metadata::kScoreFieldNumber;
const int Metadata::kScoreTypeFieldNumber;
const int Metadata::kConcertDataFieldNumber;
const int Metadata::kItemUriFieldNumber;
const int Metadata::kImageFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.Metadata)
}

void Metadata::InitAsDefaultInstance() {
  author_ = const_cast< ::spotify::bartender::proto::SpotifyLink*>(&::spotify::bartender::proto::SpotifyLink::default_instance());
  concert_data_ = const_cast< ::spotify::bartender::proto::ConcertData*>(&::spotify::bartender::proto::ConcertData::default_instance());
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.Metadata)
}

void Metadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtpublished_ = 0;
  dtexpiry_ = 0;
  author_ = NULL;
  concert_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (app_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete favicon_url_;
  }
  if (external_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete external_url_;
  }
  if (internal_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete internal_uri_;
  }
  if (this != default_instance_) {
    delete author_;
    delete concert_data_;
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_app()) {
      if (app_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_->clear();
      }
    }
    type_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
    if (has_favicon_url()) {
      if (favicon_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        favicon_url_->clear();
      }
    }
    if (has_external_url()) {
      if (external_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        external_url_->clear();
      }
    }
    if (has_internal_uri()) {
      if (internal_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        internal_uri_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 9984) {
    dtpublished_ = 0;
    dtexpiry_ = 0;
    if (has_author()) {
      if (author_ != NULL) author_->::spotify::bartender::proto::SpotifyLink::Clear();
    }
    if (has_concert_data()) {
      if (concert_data_ != NULL) concert_data_->::spotify::bartender::proto::ConcertData::Clear();
    }
  }
  score_.Clear();
  score_type_.Clear();
  item_uri_.Clear();
  image_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app;
        break;
      }

      // optional string app = 2;
      case 2: {
        if (tag == 18) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app().data(), this->app().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .spotify.bartender.proto.MetadataType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::bartender::proto::MetadataType_IsValid(value)) {
            set_type(static_cast< ::spotify::bartender::proto::MetadataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (tag == 34) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_summary;
        break;
      }

      // optional string summary = 5;
      case 5: {
        if (tag == 42) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_favicon_url;
        break;
      }

      // optional string favicon_url = 6;
      case 6: {
        if (tag == 50) {
         parse_favicon_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->favicon_url().data(), this->favicon_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "favicon_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_external_url;
        break;
      }

      // optional string external_url = 7;
      case 7: {
        if (tag == 58) {
         parse_external_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_url().data(), this->external_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "external_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_internal_uri;
        break;
      }

      // optional string internal_uri = 8;
      case 8: {
        if (tag == 66) {
         parse_internal_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->internal_uri().data(), this->internal_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "internal_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dtpublished;
        break;
      }

      // optional int32 dtpublished = 9;
      case 9: {
        if (tag == 72) {
         parse_dtpublished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtpublished_)));
          set_has_dtpublished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_dtexpiry;
        break;
      }

      // optional int32 dtexpiry = 10;
      case 10: {
        if (tag == 80) {
         parse_dtexpiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtexpiry_)));
          set_has_dtexpiry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_author;
        break;
      }

      // optional .spotify.bartender.proto.SpotifyLink author = 11;
      case 11: {
        if (tag == 90) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_author()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_score;
        break;
      }

      // repeated int32 score = 12;
      case 12: {
        if (tag == 96) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_score())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_score;
        if (input->ExpectTag(104)) goto parse_score_type;
        break;
      }

      // repeated .spotify.bartender.proto.ScoreType score_type = 13;
      case 13: {
        if (tag == 104) {
         parse_score_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::bartender::proto::ScoreType_IsValid(value)) {
            add_score_type(static_cast< ::spotify::bartender::proto::ScoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::spotify::bartender::proto::ScoreType_IsValid,
                 this->mutable_score_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_score_type;
        if (input->ExpectTag(114)) goto parse_concert_data;
        break;
      }

      // optional .spotify.bartender.proto.ConcertData concert_data = 14;
      case 14: {
        if (tag == 114) {
         parse_concert_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concert_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_item_uri;
        break;
      }

      // repeated string item_uri = 15;
      case 15: {
        if (tag == 122) {
         parse_item_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_uri(this->item_uri_size() - 1).data(),
            this->item_uri(this->item_uri_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_item_uri;
        if (input->ExpectTag(130)) goto parse_image;
        break;
      }

      // repeated .spotify.bartender.proto.SpotifyImage image = 16;
      case 16: {
        if (tag == 130) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_image;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.Metadata)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string app = 2;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app(), output);
  }

  // optional .spotify.bartender.proto.MetadataType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string summary = 5;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->summary(), output);
  }

  // optional string favicon_url = 6;
  if (has_favicon_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favicon_url().data(), this->favicon_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "favicon_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->favicon_url(), output);
  }

  // optional string external_url = 7;
  if (has_external_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_url().data(), this->external_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "external_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->external_url(), output);
  }

  // optional string internal_uri = 8;
  if (has_internal_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->internal_uri().data(), this->internal_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "internal_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->internal_uri(), output);
  }

  // optional int32 dtpublished = 9;
  if (has_dtpublished()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dtpublished(), output);
  }

  // optional int32 dtexpiry = 10;
  if (has_dtexpiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dtexpiry(), output);
  }

  // optional .spotify.bartender.proto.SpotifyLink author = 11;
  if (has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->author(), output);
  }

  // repeated int32 score = 12;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->score(i), output);
  }

  // repeated .spotify.bartender.proto.ScoreType score_type = 13;
  for (int i = 0; i < this->score_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->score_type(i), output);
  }

  // optional .spotify.bartender.proto.ConcertData concert_data = 14;
  if (has_concert_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->concert_data(), output);
  }

  // repeated string item_uri = 15;
  for (int i = 0; i < this->item_uri_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->item_uri(i).data(), this->item_uri(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "item_uri");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->item_uri(i), output);
  }

  // repeated .spotify.bartender.proto.SpotifyImage image = 16;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->image(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.Metadata)
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.Metadata)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string app = 2;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app(), target);
  }

  // optional .spotify.bartender.proto.MetadataType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string summary = 5;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->summary(), target);
  }

  // optional string favicon_url = 6;
  if (has_favicon_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favicon_url().data(), this->favicon_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "favicon_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->favicon_url(), target);
  }

  // optional string external_url = 7;
  if (has_external_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_url().data(), this->external_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "external_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->external_url(), target);
  }

  // optional string internal_uri = 8;
  if (has_internal_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->internal_uri().data(), this->internal_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "internal_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->internal_uri(), target);
  }

  // optional int32 dtpublished = 9;
  if (has_dtpublished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dtpublished(), target);
  }

  // optional int32 dtexpiry = 10;
  if (has_dtexpiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dtexpiry(), target);
  }

  // optional .spotify.bartender.proto.SpotifyLink author = 11;
  if (has_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->author(), target);
  }

  // repeated int32 score = 12;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->score(i), target);
  }

  // repeated .spotify.bartender.proto.ScoreType score_type = 13;
  for (int i = 0; i < this->score_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->score_type(i), target);
  }

  // optional .spotify.bartender.proto.ConcertData concert_data = 14;
  if (has_concert_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->concert_data(), target);
  }

  // repeated string item_uri = 15;
  for (int i = 0; i < this->item_uri_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_uri(i).data(), this->item_uri(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_uri");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->item_uri(i), target);
  }

  // repeated .spotify.bartender.proto.SpotifyImage image = 16;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->image(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.Metadata)
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string app = 2;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app());
    }

    // optional .spotify.bartender.proto.MetadataType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string summary = 5;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional string favicon_url = 6;
    if (has_favicon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_url());
    }

    // optional string external_url = 7;
    if (has_external_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_url());
    }

    // optional string internal_uri = 8;
    if (has_internal_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->internal_uri());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dtpublished = 9;
    if (has_dtpublished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtpublished());
    }

    // optional int32 dtexpiry = 10;
    if (has_dtexpiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtexpiry());
    }

    // optional .spotify.bartender.proto.SpotifyLink author = 11;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->author());
    }

    // optional .spotify.bartender.proto.ConcertData concert_data = 14;
    if (has_concert_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concert_data());
    }

  }
  // repeated int32 score = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated .spotify.bartender.proto.ScoreType score_type = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->score_type(i));
    }
    total_size += 1 * this->score_type_size() + data_size;
  }

  // repeated string item_uri = 15;
  total_size += 1 * this->item_uri_size();
  for (int i = 0; i < this->item_uri_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item_uri(i));
  }

  // repeated .spotify.bartender.proto.SpotifyImage image = 16;
  total_size += 2 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  score_type_.MergeFrom(from.score_type_);
  item_uri_.MergeFrom(from.item_uri_);
  image_.MergeFrom(from.image_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_app()) {
      set_app(from.app());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_favicon_url()) {
      set_favicon_url(from.favicon_url());
    }
    if (from.has_external_url()) {
      set_external_url(from.external_url());
    }
    if (from.has_internal_uri()) {
      set_internal_uri(from.internal_uri());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dtpublished()) {
      set_dtpublished(from.dtpublished());
    }
    if (from.has_dtexpiry()) {
      set_dtexpiry(from.dtexpiry());
    }
    if (from.has_author()) {
      mutable_author()->::spotify::bartender::proto::SpotifyLink::MergeFrom(from.author());
    }
    if (from.has_concert_data()) {
      mutable_concert_data()->::spotify::bartender::proto::ConcertData::MergeFrom(from.concert_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {

  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(app_, other->app_);
    std::swap(type_, other->type_);
    std::swap(title_, other->title_);
    std::swap(summary_, other->summary_);
    std::swap(favicon_url_, other->favicon_url_);
    std::swap(external_url_, other->external_url_);
    std::swap(internal_uri_, other->internal_uri_);
    std::swap(dtpublished_, other->dtpublished_);
    std::swap(dtexpiry_, other->dtexpiry_);
    std::swap(author_, other->author_);
    score_.Swap(&other->score_);
    score_type_.Swap(&other->score_type_);
    std::swap(concert_data_, other->concert_data_);
    item_uri_.Swap(&other->item_uri_);
    image_.Swap(&other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcertData::kDtstartFieldNumber;
const int ConcertData::kDtendFieldNumber;
const int ConcertData::kLocationFieldNumber;
#endif  // !_MSC_VER

ConcertData::ConcertData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.ConcertData)
}

void ConcertData::InitAsDefaultInstance() {
  location_ = const_cast< ::spotify::bartender::proto::Location*>(&::spotify::bartender::proto::Location::default_instance());
}

ConcertData::ConcertData(const ConcertData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.ConcertData)
}

void ConcertData::SharedCtor() {
  _cached_size_ = 0;
  dtstart_ = 0;
  dtend_ = 0;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcertData::~ConcertData() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.ConcertData)
  SharedDtor();
}

void ConcertData::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void ConcertData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcertData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcertData_descriptor_;
}

const ConcertData& ConcertData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

ConcertData* ConcertData::default_instance_ = NULL;

ConcertData* ConcertData::New() const {
  return new ConcertData;
}

void ConcertData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConcertData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(dtstart_, dtend_);
    if (has_location()) {
      if (location_ != NULL) location_->::spotify::bartender::proto::Location::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcertData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.ConcertData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dtstart = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtstart_)));
          set_has_dtstart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dtend;
        break;
      }

      // optional int32 dtend = 2;
      case 2: {
        if (tag == 16) {
         parse_dtend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtend_)));
          set_has_dtend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .spotify.bartender.proto.Location location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.ConcertData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.ConcertData)
  return false;
#undef DO_
}

void ConcertData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.ConcertData)
  // optional int32 dtstart = 1;
  if (has_dtstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dtstart(), output);
  }

  // optional int32 dtend = 2;
  if (has_dtend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dtend(), output);
  }

  // optional .spotify.bartender.proto.Location location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.ConcertData)
}

::google::protobuf::uint8* ConcertData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.ConcertData)
  // optional int32 dtstart = 1;
  if (has_dtstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dtstart(), target);
  }

  // optional int32 dtend = 2;
  if (has_dtend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dtend(), target);
  }

  // optional .spotify.bartender.proto.Location location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.ConcertData)
  return target;
}

int ConcertData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dtstart = 1;
    if (has_dtstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtstart());
    }

    // optional int32 dtend = 2;
    if (has_dtend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtend());
    }

    // optional .spotify.bartender.proto.Location location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcertData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcertData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcertData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcertData::MergeFrom(const ConcertData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dtstart()) {
      set_dtstart(from.dtstart());
    }
    if (from.has_dtend()) {
      set_dtend(from.dtend());
    }
    if (from.has_location()) {
      mutable_location()->::spotify::bartender::proto::Location::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcertData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcertData::CopyFrom(const ConcertData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcertData::IsInitialized() const {

  return true;
}

void ConcertData::Swap(ConcertData* other) {
  if (other != this) {
    std::swap(dtstart_, other->dtstart_);
    std::swap(dtend_, other->dtend_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcertData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcertData_descriptor_;
  metadata.reflection = ConcertData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Location::kNameFieldNumber;
const int Location::kCityFieldNumber;
const int Location::kLatFieldNumber;
const int Location::kLngFieldNumber;
#endif  // !_MSC_VER

Location::Location()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.Location)
}

void Location::InitAsDefaultInstance() {
}

Location::Location(const Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.Location)
}

void Location::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_ = 0;
  lng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New() const {
  return new Location;
}

void Location::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Location*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(lat_, lng_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional string city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lat;
        break;
      }

      // optional double lat = 3;
      case 3: {
        if (tag == 25) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lng;
        break;
      }

      // optional double lng = 4;
      case 4: {
        if (tag == 33) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.Location)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city(), output);
  }

  // optional double lat = 3;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  // optional double lng = 4;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.Location)
}

::google::protobuf::uint8* Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.Location)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }

  // optional double lat = 3;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat(), target);
  }

  // optional double lng = 4;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.Location)
  return target;
}

int Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional double lat = 3;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lng = 4;
    if (has_lng()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(city_, other->city_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscoveredPlaylist::kUriFieldNumber;
#endif  // !_MSC_VER

DiscoveredPlaylist::DiscoveredPlaylist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.DiscoveredPlaylist)
}

void DiscoveredPlaylist::InitAsDefaultInstance() {
}

DiscoveredPlaylist::DiscoveredPlaylist(const DiscoveredPlaylist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.DiscoveredPlaylist)
}

void DiscoveredPlaylist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoveredPlaylist::~DiscoveredPlaylist() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.DiscoveredPlaylist)
  SharedDtor();
}

void DiscoveredPlaylist::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (this != default_instance_) {
  }
}

void DiscoveredPlaylist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveredPlaylist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveredPlaylist_descriptor_;
}

const DiscoveredPlaylist& DiscoveredPlaylist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

DiscoveredPlaylist* DiscoveredPlaylist::default_instance_ = NULL;

DiscoveredPlaylist* DiscoveredPlaylist::New() const {
  return new DiscoveredPlaylist;
}

void DiscoveredPlaylist::Clear() {
  if (has_uri()) {
    if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      uri_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoveredPlaylist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.DiscoveredPlaylist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.DiscoveredPlaylist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.DiscoveredPlaylist)
  return false;
#undef DO_
}

void DiscoveredPlaylist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.DiscoveredPlaylist)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.DiscoveredPlaylist)
}

::google::protobuf::uint8* DiscoveredPlaylist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.DiscoveredPlaylist)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.DiscoveredPlaylist)
  return target;
}

int DiscoveredPlaylist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveredPlaylist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoveredPlaylist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoveredPlaylist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoveredPlaylist::MergeFrom(const DiscoveredPlaylist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoveredPlaylist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveredPlaylist::CopyFrom(const DiscoveredPlaylist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveredPlaylist::IsInitialized() const {

  return true;
}

void DiscoveredPlaylist::Swap(DiscoveredPlaylist* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoveredPlaylist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveredPlaylist_descriptor_;
  metadata.reflection = DiscoveredPlaylist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscoverNux::kSeenFieldNumber;
#endif  // !_MSC_VER

DiscoverNux::DiscoverNux()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.bartender.proto.DiscoverNux)
}

void DiscoverNux::InitAsDefaultInstance() {
}

DiscoverNux::DiscoverNux(const DiscoverNux& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.bartender.proto.DiscoverNux)
}

void DiscoverNux::SharedCtor() {
  _cached_size_ = 0;
  seen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoverNux::~DiscoverNux() {
  // @@protoc_insertion_point(destructor:spotify.bartender.proto.DiscoverNux)
  SharedDtor();
}

void DiscoverNux::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscoverNux::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoverNux::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoverNux_descriptor_;
}

const DiscoverNux& DiscoverNux::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bartender_2eproto();
  return *default_instance_;
}

DiscoverNux* DiscoverNux::default_instance_ = NULL;

DiscoverNux* DiscoverNux::New() const {
  return new DiscoverNux;
}

void DiscoverNux::Clear() {
  seen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoverNux::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.bartender.proto.DiscoverNux)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seen_)));
          set_has_seen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.bartender.proto.DiscoverNux)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.bartender.proto.DiscoverNux)
  return false;
#undef DO_
}

void DiscoverNux::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.bartender.proto.DiscoverNux)
  // optional int32 seen = 1;
  if (has_seen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.bartender.proto.DiscoverNux)
}

::google::protobuf::uint8* DiscoverNux::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.bartender.proto.DiscoverNux)
  // optional int32 seen = 1;
  if (has_seen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.bartender.proto.DiscoverNux)
  return target;
}

int DiscoverNux::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seen = 1;
    if (has_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoverNux::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoverNux* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoverNux*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoverNux::MergeFrom(const DiscoverNux& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seen()) {
      set_seen(from.seen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoverNux::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoverNux::CopyFrom(const DiscoverNux& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoverNux::IsInitialized() const {

  return true;
}

void DiscoverNux::Swap(DiscoverNux* other) {
  if (other != this) {
    std::swap(seen_, other->seen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoverNux::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoverNux_descriptor_;
  metadata.reflection = DiscoverNux_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace bartender
}  // namespace spotify

// @@protoc_insertion_point(global_scope)
