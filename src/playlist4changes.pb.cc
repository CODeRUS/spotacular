// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4changes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playlist4changes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ChangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Delta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Delta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Merge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Merge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeSet_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RevisionTaggedChangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevisionTaggedChangeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Diff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diff_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDump_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListChanges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListChanges_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectedListContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectedListContent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_playlist4changes_2eproto() {
  protobuf_AddDesc_playlist4changes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playlist4changes.proto");
  GOOGLE_CHECK(file != NULL);
  ChangeInfo_descriptor_ = file->message_type(0);
  static const int ChangeInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, undo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, redo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, compressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, migration_),
  };
  ChangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeInfo_descriptor_,
      ChangeInfo::default_instance_,
      ChangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeInfo));
  Delta_descriptor_ = file->message_type(1);
  static const int Delta_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, base_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, info_),
  };
  Delta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Delta_descriptor_,
      Delta::default_instance_,
      Delta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Delta));
  Merge_descriptor_ = file->message_type(2);
  static const int Merge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Merge, base_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Merge, merge_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Merge, info_),
  };
  Merge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Merge_descriptor_,
      Merge::default_instance_,
      Merge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Merge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Merge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Merge));
  ChangeSet_descriptor_ = file->message_type(3);
  static const int ChangeSet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, merge_),
  };
  ChangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSet_descriptor_,
      ChangeSet::default_instance_,
      ChangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSet));
  ChangeSet_Kind_descriptor_ = ChangeSet_descriptor_->enum_type(0);
  RevisionTaggedChangeSet_descriptor_ = file->message_type(4);
  static const int RevisionTaggedChangeSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevisionTaggedChangeSet, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevisionTaggedChangeSet, change_set_),
  };
  RevisionTaggedChangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevisionTaggedChangeSet_descriptor_,
      RevisionTaggedChangeSet::default_instance_,
      RevisionTaggedChangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevisionTaggedChangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevisionTaggedChangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevisionTaggedChangeSet));
  Diff_descriptor_ = file->message_type(5);
  static const int Diff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diff, from_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diff, ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diff, to_revision_),
  };
  Diff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Diff_descriptor_,
      Diff::default_instance_,
      Diff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Diff));
  ListDump_descriptor_ = file->message_type(6);
  static const int ListDump_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDump, latestrevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDump, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDump, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDump, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDump, contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDump, pendingdeltas_),
  };
  ListDump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDump_descriptor_,
      ListDump::default_instance_,
      ListDump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDump));
  ListChanges_descriptor_ = file->message_type(7);
  static const int ListChanges_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChanges, baserevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChanges, deltas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChanges, wantresultingrevisions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChanges, wantsyncresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChanges, dump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChanges, nonces_),
  };
  ListChanges_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListChanges_descriptor_,
      ListChanges::default_instance_,
      ListChanges_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChanges, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChanges, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListChanges));
  SelectedListContent_descriptor_ = file->message_type(8);
  static const int SelectedListContent_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, syncresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, resultingrevisions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, multipleheads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, uptodate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, resolveaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, issues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, nonces_),
  };
  SelectedListContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectedListContent_descriptor_,
      SelectedListContent::default_instance_,
      SelectedListContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectedListContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectedListContent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playlist4changes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeInfo_descriptor_, &ChangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Delta_descriptor_, &Delta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Merge_descriptor_, &Merge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSet_descriptor_, &ChangeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevisionTaggedChangeSet_descriptor_, &RevisionTaggedChangeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Diff_descriptor_, &Diff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDump_descriptor_, &ListDump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListChanges_descriptor_, &ListChanges::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectedListContent_descriptor_, &SelectedListContent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playlist4changes_2eproto() {
  delete ChangeInfo::default_instance_;
  delete ChangeInfo_reflection_;
  delete Delta::default_instance_;
  delete Delta_reflection_;
  delete Merge::default_instance_;
  delete Merge_reflection_;
  delete ChangeSet::default_instance_;
  delete ChangeSet_reflection_;
  delete RevisionTaggedChangeSet::default_instance_;
  delete RevisionTaggedChangeSet_reflection_;
  delete Diff::default_instance_;
  delete Diff_reflection_;
  delete ListDump::default_instance_;
  delete ListDump_reflection_;
  delete ListChanges::default_instance_;
  delete ListChanges_reflection_;
  delete SelectedListContent::default_instance_;
  delete SelectedListContent_reflection_;
}

void protobuf_AddDesc_playlist4changes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::spotify::playlist4::proto::protobuf_AddDesc_playlist4content_2eproto();
  ::spotify::playlist4::proto::protobuf_AddDesc_playlist4issues_2eproto();
  ::spotify::playlist4::proto::protobuf_AddDesc_playlist4meta_2eproto();
  ::spotify::playlist4::proto::protobuf_AddDesc_playlist4ops_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026playlist4changes.proto\022\027spotify.playli"
    "st4.proto\032\026playlist4content.proto\032\025playl"
    "ist4issues.proto\032\023playlist4meta.proto\032\022p"
    "laylist4ops.proto\"\216\001\n\nChangeInfo\022\014\n\004user"
    "\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\005\022\r\n\005admin\030\003 \001(\010"
    "\022\014\n\004undo\030\004 \001(\010\022\014\n\004redo\030\005 \001(\010\022\r\n\005merge\030\006 "
    "\001(\010\022\022\n\ncompressed\030\007 \001(\010\022\021\n\tmigration\030\010 \001"
    "(\010\"z\n\005Delta\022\024\n\014base_version\030\001 \001(\014\022(\n\003ops"
    "\030\002 \003(\0132\033.spotify.playlist4.proto.Op\0221\n\004i"
    "nfo\030\004 \001(\0132#.spotify.playlist4.proto.Chan"
    "geInfo\"g\n\005Merge\022\024\n\014base_version\030\001 \001(\014\022\025\n"
    "\rmerge_version\030\002 \001(\014\0221\n\004info\030\004 \001(\0132#.spo"
    "tify.playlist4.proto.ChangeInfo\"\320\001\n\tChan"
    "geSet\0225\n\004kind\030\001 \002(\0162\'.spotify.playlist4."
    "proto.ChangeSet.Kind\022-\n\005delta\030\002 \001(\0132\036.sp"
    "otify.playlist4.proto.Delta\022-\n\005merge\030\003 \001"
    "(\0132\036.spotify.playlist4.proto.Merge\".\n\004Ki"
    "nd\022\020\n\014KIND_UNKNOWN\020\000\022\t\n\005DELTA\020\002\022\t\n\005MERGE"
    "\020\003\"c\n\027RevisionTaggedChangeSet\022\020\n\010revisio"
    "n\030\001 \002(\014\0226\n\nchange_set\030\002 \002(\0132\".spotify.pl"
    "aylist4.proto.ChangeSet\"\\\n\004Diff\022\025\n\rfrom_"
    "revision\030\001 \002(\014\022(\n\003ops\030\002 \003(\0132\033.spotify.pl"
    "aylist4.proto.Op\022\023\n\013to_revision\030\003 \002(\014\"\225\002"
    "\n\010ListDump\022\026\n\016latestRevision\030\001 \001(\014\022\016\n\006le"
    "ngth\030\002 \001(\005\022;\n\nattributes\030\003 \001(\0132\'.spotify"
    ".playlist4.proto.ListAttributes\0227\n\010check"
    "sum\030\004 \001(\0132%.spotify.playlist4.proto.List"
    "Checksum\0224\n\010contents\030\005 \001(\0132\".spotify.pla"
    "ylist4.proto.ListItems\0225\n\rpendingDeltas\030"
    "\007 \003(\0132\036.spotify.playlist4.proto.Delta\"\314\001"
    "\n\013ListChanges\022\024\n\014baseRevision\030\001 \001(\014\022.\n\006d"
    "eltas\030\002 \003(\0132\036.spotify.playlist4.proto.De"
    "lta\022\036\n\026wantResultingRevisions\030\003 \001(\010\022\026\n\016w"
    "antSyncResult\030\004 \001(\010\022/\n\004dump\030\005 \001(\0132!.spot"
    "ify.playlist4.proto.ListDump\022\016\n\006nonces\030\006"
    " \003(\005\"\223\004\n\023SelectedListContent\022\020\n\010revision"
    "\030\001 \001(\014\022\016\n\006length\030\002 \001(\005\022;\n\nattributes\030\003 \001"
    "(\0132\'.spotify.playlist4.proto.ListAttribu"
    "tes\0227\n\010checksum\030\004 \001(\0132%.spotify.playlist"
    "4.proto.ListChecksum\0224\n\010contents\030\005 \001(\0132\""
    ".spotify.playlist4.proto.ListItems\022+\n\004di"
    "ff\030\006 \001(\0132\035.spotify.playlist4.proto.Diff\022"
    "1\n\nsyncResult\030\007 \001(\0132\035.spotify.playlist4."
    "proto.Diff\022\032\n\022resultingRevisions\030\010 \003(\014\022\025"
    "\n\rmultipleHeads\030\t \001(\010\022\020\n\010upToDate\030\n \001(\010\022"
    "C\n\rresolveAction\030\014 \003(\0132,.spotify.playlis"
    "t4.proto.ClientResolveAction\0224\n\006issues\030\r"
    " \003(\0132$.spotify.playlist4.proto.ClientIss"
    "ue\022\016\n\006nonces\030\016 \003(\005B\037\n\033com.spotify.playli"
    "st4.protoH\001", 1971);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playlist4changes.proto", &protobuf_RegisterTypes);
  ChangeInfo::default_instance_ = new ChangeInfo();
  Delta::default_instance_ = new Delta();
  Merge::default_instance_ = new Merge();
  ChangeSet::default_instance_ = new ChangeSet();
  RevisionTaggedChangeSet::default_instance_ = new RevisionTaggedChangeSet();
  Diff::default_instance_ = new Diff();
  ListDump::default_instance_ = new ListDump();
  ListChanges::default_instance_ = new ListChanges();
  SelectedListContent::default_instance_ = new SelectedListContent();
  ChangeInfo::default_instance_->InitAsDefaultInstance();
  Delta::default_instance_->InitAsDefaultInstance();
  Merge::default_instance_->InitAsDefaultInstance();
  ChangeSet::default_instance_->InitAsDefaultInstance();
  RevisionTaggedChangeSet::default_instance_->InitAsDefaultInstance();
  Diff::default_instance_->InitAsDefaultInstance();
  ListDump::default_instance_->InitAsDefaultInstance();
  ListChanges::default_instance_->InitAsDefaultInstance();
  SelectedListContent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playlist4changes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playlist4changes_2eproto {
  StaticDescriptorInitializer_playlist4changes_2eproto() {
    protobuf_AddDesc_playlist4changes_2eproto();
  }
} static_descriptor_initializer_playlist4changes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChangeInfo::kUserFieldNumber;
const int ChangeInfo::kTimestampFieldNumber;
const int ChangeInfo::kAdminFieldNumber;
const int ChangeInfo::kUndoFieldNumber;
const int ChangeInfo::kRedoFieldNumber;
const int ChangeInfo::kMergeFieldNumber;
const int ChangeInfo::kCompressedFieldNumber;
const int ChangeInfo::kMigrationFieldNumber;
#endif  // !_MSC_VER

ChangeInfo::ChangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ChangeInfo)
}

void ChangeInfo::InitAsDefaultInstance() {
}

ChangeInfo::ChangeInfo(const ChangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ChangeInfo)
}

void ChangeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  admin_ = false;
  undo_ = false;
  redo_ = false;
  merge_ = false;
  compressed_ = false;
  migration_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeInfo::~ChangeInfo() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ChangeInfo)
  SharedDtor();
}

void ChangeInfo::SharedDtor() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void ChangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeInfo_descriptor_;
}

const ChangeInfo& ChangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

ChangeInfo* ChangeInfo::default_instance_ = NULL;

ChangeInfo* ChangeInfo::New() const {
  return new ChangeInfo;
}

void ChangeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(timestamp_, migration_);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ChangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_admin;
        break;
      }

      // optional bool admin = 3;
      case 3: {
        if (tag == 24) {
         parse_admin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_)));
          set_has_admin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_undo;
        break;
      }

      // optional bool undo = 4;
      case 4: {
        if (tag == 32) {
         parse_undo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &undo_)));
          set_has_undo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_redo;
        break;
      }

      // optional bool redo = 5;
      case 5: {
        if (tag == 40) {
         parse_redo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &redo_)));
          set_has_redo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_merge;
        break;
      }

      // optional bool merge = 6;
      case 6: {
        if (tag == 48) {
         parse_merge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &merge_)));
          set_has_merge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_compressed;
        break;
      }

      // optional bool compressed = 7;
      case 7: {
        if (tag == 56) {
         parse_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
          set_has_compressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_migration;
        break;
      }

      // optional bool migration = 8;
      case 8: {
        if (tag == 64) {
         parse_migration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &migration_)));
          set_has_migration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ChangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ChangeInfo)
  return false;
#undef DO_
}

void ChangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ChangeInfo)
  // optional string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional int32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  // optional bool admin = 3;
  if (has_admin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->admin(), output);
  }

  // optional bool undo = 4;
  if (has_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->undo(), output);
  }

  // optional bool redo = 5;
  if (has_redo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->redo(), output);
  }

  // optional bool merge = 6;
  if (has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->merge(), output);
  }

  // optional bool compressed = 7;
  if (has_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->compressed(), output);
  }

  // optional bool migration = 8;
  if (has_migration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->migration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ChangeInfo)
}

::google::protobuf::uint8* ChangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ChangeInfo)
  // optional string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional int32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  // optional bool admin = 3;
  if (has_admin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->admin(), target);
  }

  // optional bool undo = 4;
  if (has_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->undo(), target);
  }

  // optional bool redo = 5;
  if (has_redo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->redo(), target);
  }

  // optional bool merge = 6;
  if (has_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->merge(), target);
  }

  // optional bool compressed = 7;
  if (has_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->compressed(), target);
  }

  // optional bool migration = 8;
  if (has_migration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->migration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ChangeInfo)
  return target;
}

int ChangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional int32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional bool admin = 3;
    if (has_admin()) {
      total_size += 1 + 1;
    }

    // optional bool undo = 4;
    if (has_undo()) {
      total_size += 1 + 1;
    }

    // optional bool redo = 5;
    if (has_redo()) {
      total_size += 1 + 1;
    }

    // optional bool merge = 6;
    if (has_merge()) {
      total_size += 1 + 1;
    }

    // optional bool compressed = 7;
    if (has_compressed()) {
      total_size += 1 + 1;
    }

    // optional bool migration = 8;
    if (has_migration()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeInfo::MergeFrom(const ChangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_admin()) {
      set_admin(from.admin());
    }
    if (from.has_undo()) {
      set_undo(from.undo());
    }
    if (from.has_redo()) {
      set_redo(from.redo());
    }
    if (from.has_merge()) {
      set_merge(from.merge());
    }
    if (from.has_compressed()) {
      set_compressed(from.compressed());
    }
    if (from.has_migration()) {
      set_migration(from.migration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeInfo::CopyFrom(const ChangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeInfo::IsInitialized() const {

  return true;
}

void ChangeInfo::Swap(ChangeInfo* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(admin_, other->admin_);
    std::swap(undo_, other->undo_);
    std::swap(redo_, other->redo_);
    std::swap(merge_, other->merge_);
    std::swap(compressed_, other->compressed_);
    std::swap(migration_, other->migration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeInfo_descriptor_;
  metadata.reflection = ChangeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Delta::kBaseVersionFieldNumber;
const int Delta::kOpsFieldNumber;
const int Delta::kInfoFieldNumber;
#endif  // !_MSC_VER

Delta::Delta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.Delta)
}

void Delta::InitAsDefaultInstance() {
  info_ = const_cast< ::spotify::playlist4::proto::ChangeInfo*>(&::spotify::playlist4::proto::ChangeInfo::default_instance());
}

Delta::Delta(const Delta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.Delta)
}

void Delta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Delta::~Delta() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.Delta)
  SharedDtor();
}

void Delta::SharedDtor() {
  if (base_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_version_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void Delta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Delta_descriptor_;
}

const Delta& Delta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

Delta* Delta::default_instance_ = NULL;

Delta* Delta::New() const {
  return new Delta;
}

void Delta::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_base_version()) {
      if (base_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        base_version_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::spotify::playlist4::proto::ChangeInfo::Clear();
    }
  }
  ops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Delta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.Delta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes base_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ops;
        break;
      }

      // repeated .spotify.playlist4.proto.Op ops = 2;
      case 2: {
        if (tag == 18) {
         parse_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ops;
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .spotify.playlist4.proto.ChangeInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.Delta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.Delta)
  return false;
#undef DO_
}

void Delta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.Delta)
  // optional bytes base_version = 1;
  if (has_base_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->base_version(), output);
  }

  // repeated .spotify.playlist4.proto.Op ops = 2;
  for (int i = 0; i < this->ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ops(i), output);
  }

  // optional .spotify.playlist4.proto.ChangeInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.Delta)
}

::google::protobuf::uint8* Delta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.Delta)
  // optional bytes base_version = 1;
  if (has_base_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->base_version(), target);
  }

  // repeated .spotify.playlist4.proto.Op ops = 2;
  for (int i = 0; i < this->ops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ops(i), target);
  }

  // optional .spotify.playlist4.proto.ChangeInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.Delta)
  return target;
}

int Delta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes base_version = 1;
    if (has_base_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->base_version());
    }

    // optional .spotify.playlist4.proto.ChangeInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .spotify.playlist4.proto.Op ops = 2;
  total_size += 1 * this->ops_size();
  for (int i = 0; i < this->ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Delta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Delta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Delta::MergeFrom(const Delta& from) {
  GOOGLE_CHECK_NE(&from, this);
  ops_.MergeFrom(from.ops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_version()) {
      set_base_version(from.base_version());
    }
    if (from.has_info()) {
      mutable_info()->::spotify::playlist4::proto::ChangeInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Delta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta::CopyFrom(const Delta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ops())) return false;
  return true;
}

void Delta::Swap(Delta* other) {
  if (other != this) {
    std::swap(base_version_, other->base_version_);
    ops_.Swap(&other->ops_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Delta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Delta_descriptor_;
  metadata.reflection = Delta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Merge::kBaseVersionFieldNumber;
const int Merge::kMergeVersionFieldNumber;
const int Merge::kInfoFieldNumber;
#endif  // !_MSC_VER

Merge::Merge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.Merge)
}

void Merge::InitAsDefaultInstance() {
  info_ = const_cast< ::spotify::playlist4::proto::ChangeInfo*>(&::spotify::playlist4::proto::ChangeInfo::default_instance());
}

Merge::Merge(const Merge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.Merge)
}

void Merge::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Merge::~Merge() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.Merge)
  SharedDtor();
}

void Merge::SharedDtor() {
  if (base_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_version_;
  }
  if (merge_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete merge_version_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void Merge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Merge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Merge_descriptor_;
}

const Merge& Merge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

Merge* Merge::default_instance_ = NULL;

Merge* Merge::New() const {
  return new Merge;
}

void Merge::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_base_version()) {
      if (base_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        base_version_->clear();
      }
    }
    if (has_merge_version()) {
      if (merge_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        merge_version_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::spotify::playlist4::proto::ChangeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Merge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.Merge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes base_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_merge_version;
        break;
      }

      // optional bytes merge_version = 2;
      case 2: {
        if (tag == 18) {
         parse_merge_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merge_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .spotify.playlist4.proto.ChangeInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.Merge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.Merge)
  return false;
#undef DO_
}

void Merge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.Merge)
  // optional bytes base_version = 1;
  if (has_base_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->base_version(), output);
  }

  // optional bytes merge_version = 2;
  if (has_merge_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->merge_version(), output);
  }

  // optional .spotify.playlist4.proto.ChangeInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.Merge)
}

::google::protobuf::uint8* Merge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.Merge)
  // optional bytes base_version = 1;
  if (has_base_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->base_version(), target);
  }

  // optional bytes merge_version = 2;
  if (has_merge_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->merge_version(), target);
  }

  // optional .spotify.playlist4.proto.ChangeInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.Merge)
  return target;
}

int Merge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes base_version = 1;
    if (has_base_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->base_version());
    }

    // optional bytes merge_version = 2;
    if (has_merge_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->merge_version());
    }

    // optional .spotify.playlist4.proto.ChangeInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Merge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Merge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Merge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Merge::MergeFrom(const Merge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_version()) {
      set_base_version(from.base_version());
    }
    if (from.has_merge_version()) {
      set_merge_version(from.merge_version());
    }
    if (from.has_info()) {
      mutable_info()->::spotify::playlist4::proto::ChangeInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Merge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Merge::CopyFrom(const Merge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Merge::IsInitialized() const {

  return true;
}

void Merge::Swap(Merge* other) {
  if (other != this) {
    std::swap(base_version_, other->base_version_);
    std::swap(merge_version_, other->merge_version_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Merge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Merge_descriptor_;
  metadata.reflection = Merge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangeSet_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSet_Kind_descriptor_;
}
bool ChangeSet_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangeSet_Kind ChangeSet::KIND_UNKNOWN;
const ChangeSet_Kind ChangeSet::DELTA;
const ChangeSet_Kind ChangeSet::MERGE;
const ChangeSet_Kind ChangeSet::Kind_MIN;
const ChangeSet_Kind ChangeSet::Kind_MAX;
const int ChangeSet::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChangeSet::kKindFieldNumber;
const int ChangeSet::kDeltaFieldNumber;
const int ChangeSet::kMergeFieldNumber;
#endif  // !_MSC_VER

ChangeSet::ChangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ChangeSet)
}

void ChangeSet::InitAsDefaultInstance() {
  delta_ = const_cast< ::spotify::playlist4::proto::Delta*>(&::spotify::playlist4::proto::Delta::default_instance());
  merge_ = const_cast< ::spotify::playlist4::proto::Merge*>(&::spotify::playlist4::proto::Merge::default_instance());
}

ChangeSet::ChangeSet(const ChangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ChangeSet)
}

void ChangeSet::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  delta_ = NULL;
  merge_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSet::~ChangeSet() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ChangeSet)
  SharedDtor();
}

void ChangeSet::SharedDtor() {
  if (this != default_instance_) {
    delete delta_;
    delete merge_;
  }
}

void ChangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSet_descriptor_;
}

const ChangeSet& ChangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

ChangeSet* ChangeSet::default_instance_ = NULL;

ChangeSet* ChangeSet::New() const {
  return new ChangeSet;
}

void ChangeSet::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    kind_ = 0;
    if (has_delta()) {
      if (delta_ != NULL) delta_->::spotify::playlist4::proto::Delta::Clear();
    }
    if (has_merge()) {
      if (merge_ != NULL) merge_->::spotify::playlist4::proto::Merge::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ChangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .spotify.playlist4.proto.ChangeSet.Kind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::playlist4::proto::ChangeSet_Kind_IsValid(value)) {
            set_kind(static_cast< ::spotify::playlist4::proto::ChangeSet_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_delta;
        break;
      }

      // optional .spotify.playlist4.proto.Delta delta = 2;
      case 2: {
        if (tag == 18) {
         parse_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_merge;
        break;
      }

      // optional .spotify.playlist4.proto.Merge merge = 3;
      case 3: {
        if (tag == 26) {
         parse_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ChangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ChangeSet)
  return false;
#undef DO_
}

void ChangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ChangeSet)
  // required .spotify.playlist4.proto.ChangeSet.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional .spotify.playlist4.proto.Delta delta = 2;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->delta(), output);
  }

  // optional .spotify.playlist4.proto.Merge merge = 3;
  if (has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->merge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ChangeSet)
}

::google::protobuf::uint8* ChangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ChangeSet)
  // required .spotify.playlist4.proto.ChangeSet.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional .spotify.playlist4.proto.Delta delta = 2;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->delta(), target);
  }

  // optional .spotify.playlist4.proto.Merge merge = 3;
  if (has_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->merge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ChangeSet)
  return target;
}

int ChangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .spotify.playlist4.proto.ChangeSet.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional .spotify.playlist4.proto.Delta delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delta());
    }

    // optional .spotify.playlist4.proto.Merge merge = 3;
    if (has_merge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->merge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSet::MergeFrom(const ChangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_delta()) {
      mutable_delta()->::spotify::playlist4::proto::Delta::MergeFrom(from.delta());
    }
    if (from.has_merge()) {
      mutable_merge()->::spotify::playlist4::proto::Merge::MergeFrom(from.merge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSet::CopyFrom(const ChangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_delta()) {
    if (!this->delta().IsInitialized()) return false;
  }
  return true;
}

void ChangeSet::Swap(ChangeSet* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(delta_, other->delta_);
    std::swap(merge_, other->merge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSet_descriptor_;
  metadata.reflection = ChangeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevisionTaggedChangeSet::kRevisionFieldNumber;
const int RevisionTaggedChangeSet::kChangeSetFieldNumber;
#endif  // !_MSC_VER

RevisionTaggedChangeSet::RevisionTaggedChangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.RevisionTaggedChangeSet)
}

void RevisionTaggedChangeSet::InitAsDefaultInstance() {
  change_set_ = const_cast< ::spotify::playlist4::proto::ChangeSet*>(&::spotify::playlist4::proto::ChangeSet::default_instance());
}

RevisionTaggedChangeSet::RevisionTaggedChangeSet(const RevisionTaggedChangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.RevisionTaggedChangeSet)
}

void RevisionTaggedChangeSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevisionTaggedChangeSet::~RevisionTaggedChangeSet() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.RevisionTaggedChangeSet)
  SharedDtor();
}

void RevisionTaggedChangeSet::SharedDtor() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (this != default_instance_) {
    delete change_set_;
  }
}

void RevisionTaggedChangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevisionTaggedChangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevisionTaggedChangeSet_descriptor_;
}

const RevisionTaggedChangeSet& RevisionTaggedChangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

RevisionTaggedChangeSet* RevisionTaggedChangeSet::default_instance_ = NULL;

RevisionTaggedChangeSet* RevisionTaggedChangeSet::New() const {
  return new RevisionTaggedChangeSet;
}

void RevisionTaggedChangeSet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_revision()) {
      if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        revision_->clear();
      }
    }
    if (has_change_set()) {
      if (change_set_ != NULL) change_set_->::spotify::playlist4::proto::ChangeSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevisionTaggedChangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.RevisionTaggedChangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes revision = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_revision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_set;
        break;
      }

      // required .spotify.playlist4.proto.ChangeSet change_set = 2;
      case 2: {
        if (tag == 18) {
         parse_change_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.RevisionTaggedChangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.RevisionTaggedChangeSet)
  return false;
#undef DO_
}

void RevisionTaggedChangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.RevisionTaggedChangeSet)
  // required bytes revision = 1;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->revision(), output);
  }

  // required .spotify.playlist4.proto.ChangeSet change_set = 2;
  if (has_change_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->change_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.RevisionTaggedChangeSet)
}

::google::protobuf::uint8* RevisionTaggedChangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.RevisionTaggedChangeSet)
  // required bytes revision = 1;
  if (has_revision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->revision(), target);
  }

  // required .spotify.playlist4.proto.ChangeSet change_set = 2;
  if (has_change_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->change_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.RevisionTaggedChangeSet)
  return target;
}

int RevisionTaggedChangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes revision = 1;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->revision());
    }

    // required .spotify.playlist4.proto.ChangeSet change_set = 2;
    if (has_change_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_set());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevisionTaggedChangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevisionTaggedChangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevisionTaggedChangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevisionTaggedChangeSet::MergeFrom(const RevisionTaggedChangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_change_set()) {
      mutable_change_set()->::spotify::playlist4::proto::ChangeSet::MergeFrom(from.change_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevisionTaggedChangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevisionTaggedChangeSet::CopyFrom(const RevisionTaggedChangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevisionTaggedChangeSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_change_set()) {
    if (!this->change_set().IsInitialized()) return false;
  }
  return true;
}

void RevisionTaggedChangeSet::Swap(RevisionTaggedChangeSet* other) {
  if (other != this) {
    std::swap(revision_, other->revision_);
    std::swap(change_set_, other->change_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevisionTaggedChangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevisionTaggedChangeSet_descriptor_;
  metadata.reflection = RevisionTaggedChangeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Diff::kFromRevisionFieldNumber;
const int Diff::kOpsFieldNumber;
const int Diff::kToRevisionFieldNumber;
#endif  // !_MSC_VER

Diff::Diff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.Diff)
}

void Diff::InitAsDefaultInstance() {
}

Diff::Diff(const Diff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.Diff)
}

void Diff::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diff::~Diff() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.Diff)
  SharedDtor();
}

void Diff::SharedDtor() {
  if (from_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_revision_;
  }
  if (to_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_revision_;
  }
  if (this != default_instance_) {
  }
}

void Diff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diff_descriptor_;
}

const Diff& Diff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

Diff* Diff::default_instance_ = NULL;

Diff* Diff::New() const {
  return new Diff;
}

void Diff::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_from_revision()) {
      if (from_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_revision_->clear();
      }
    }
    if (has_to_revision()) {
      if (to_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_revision_->clear();
      }
    }
  }
  ops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Diff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.Diff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes from_revision = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_revision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ops;
        break;
      }

      // repeated .spotify.playlist4.proto.Op ops = 2;
      case 2: {
        if (tag == 18) {
         parse_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ops;
        if (input->ExpectTag(26)) goto parse_to_revision;
        break;
      }

      // required bytes to_revision = 3;
      case 3: {
        if (tag == 26) {
         parse_to_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_revision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.Diff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.Diff)
  return false;
#undef DO_
}

void Diff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.Diff)
  // required bytes from_revision = 1;
  if (has_from_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->from_revision(), output);
  }

  // repeated .spotify.playlist4.proto.Op ops = 2;
  for (int i = 0; i < this->ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ops(i), output);
  }

  // required bytes to_revision = 3;
  if (has_to_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->to_revision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.Diff)
}

::google::protobuf::uint8* Diff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.Diff)
  // required bytes from_revision = 1;
  if (has_from_revision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->from_revision(), target);
  }

  // repeated .spotify.playlist4.proto.Op ops = 2;
  for (int i = 0; i < this->ops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ops(i), target);
  }

  // required bytes to_revision = 3;
  if (has_to_revision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->to_revision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.Diff)
  return target;
}

int Diff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes from_revision = 1;
    if (has_from_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from_revision());
    }

    // required bytes to_revision = 3;
    if (has_to_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_revision());
    }

  }
  // repeated .spotify.playlist4.proto.Op ops = 2;
  total_size += 1 * this->ops_size();
  for (int i = 0; i < this->ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Diff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diff::MergeFrom(const Diff& from) {
  GOOGLE_CHECK_NE(&from, this);
  ops_.MergeFrom(from.ops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_revision()) {
      set_from_revision(from.from_revision());
    }
    if (from.has_to_revision()) {
      set_to_revision(from.to_revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Diff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diff::CopyFrom(const Diff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ops())) return false;
  return true;
}

void Diff::Swap(Diff* other) {
  if (other != this) {
    std::swap(from_revision_, other->from_revision_);
    ops_.Swap(&other->ops_);
    std::swap(to_revision_, other->to_revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Diff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diff_descriptor_;
  metadata.reflection = Diff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListDump::kLatestRevisionFieldNumber;
const int ListDump::kLengthFieldNumber;
const int ListDump::kAttributesFieldNumber;
const int ListDump::kChecksumFieldNumber;
const int ListDump::kContentsFieldNumber;
const int ListDump::kPendingDeltasFieldNumber;
#endif  // !_MSC_VER

ListDump::ListDump()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ListDump)
}

void ListDump::InitAsDefaultInstance() {
  attributes_ = const_cast< ::spotify::playlist4::proto::ListAttributes*>(&::spotify::playlist4::proto::ListAttributes::default_instance());
  checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
  contents_ = const_cast< ::spotify::playlist4::proto::ListItems*>(&::spotify::playlist4::proto::ListItems::default_instance());
}

ListDump::ListDump(const ListDump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ListDump)
}

void ListDump::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  latestrevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  attributes_ = NULL;
  checksum_ = NULL;
  contents_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDump::~ListDump() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ListDump)
  SharedDtor();
}

void ListDump::SharedDtor() {
  if (latestrevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latestrevision_;
  }
  if (this != default_instance_) {
    delete attributes_;
    delete checksum_;
    delete contents_;
  }
}

void ListDump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDump_descriptor_;
}

const ListDump& ListDump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

ListDump* ListDump::default_instance_ = NULL;

ListDump* ListDump::New() const {
  return new ListDump;
}

void ListDump::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_latestrevision()) {
      if (latestrevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        latestrevision_->clear();
      }
    }
    length_ = 0;
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::spotify::playlist4::proto::ListAttributes::Clear();
    }
    if (has_checksum()) {
      if (checksum_ != NULL) checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    if (has_contents()) {
      if (contents_ != NULL) contents_->::spotify::playlist4::proto::ListItems::Clear();
    }
  }
  pendingdeltas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ListDump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes latestRevision = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latestrevision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        break;
      }

      // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
      case 3: {
        if (tag == 26) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
      case 4: {
        if (tag == 34) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_contents;
        break;
      }

      // optional .spotify.playlist4.proto.ListItems contents = 5;
      case 5: {
        if (tag == 42) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pendingDeltas;
        break;
      }

      // repeated .spotify.playlist4.proto.Delta pendingDeltas = 7;
      case 7: {
        if (tag == 58) {
         parse_pendingDeltas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pendingdeltas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pendingDeltas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ListDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ListDump)
  return false;
#undef DO_
}

void ListDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ListDump)
  // optional bytes latestRevision = 1;
  if (has_latestrevision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->latestrevision(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attributes(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->checksum(), output);
  }

  // optional .spotify.playlist4.proto.ListItems contents = 5;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->contents(), output);
  }

  // repeated .spotify.playlist4.proto.Delta pendingDeltas = 7;
  for (int i = 0; i < this->pendingdeltas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pendingdeltas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ListDump)
}

::google::protobuf::uint8* ListDump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ListDump)
  // optional bytes latestRevision = 1;
  if (has_latestrevision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->latestrevision(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attributes(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->checksum(), target);
  }

  // optional .spotify.playlist4.proto.ListItems contents = 5;
  if (has_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->contents(), target);
  }

  // repeated .spotify.playlist4.proto.Delta pendingDeltas = 7;
  for (int i = 0; i < this->pendingdeltas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pendingdeltas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ListDump)
  return target;
}

int ListDump::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes latestRevision = 1;
    if (has_latestrevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->latestrevision());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

    // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checksum());
    }

    // optional .spotify.playlist4.proto.ListItems contents = 5;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contents());
    }

  }
  // repeated .spotify.playlist4.proto.Delta pendingDeltas = 7;
  total_size += 1 * this->pendingdeltas_size();
  for (int i = 0; i < this->pendingdeltas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pendingdeltas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDump::MergeFrom(const ListDump& from) {
  GOOGLE_CHECK_NE(&from, this);
  pendingdeltas_.MergeFrom(from.pendingdeltas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latestrevision()) {
      set_latestrevision(from.latestrevision());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::spotify::playlist4::proto::ListAttributes::MergeFrom(from.attributes());
    }
    if (from.has_checksum()) {
      mutable_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.checksum());
    }
    if (from.has_contents()) {
      mutable_contents()->::spotify::playlist4::proto::ListItems::MergeFrom(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDump::CopyFrom(const ListDump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDump::IsInitialized() const {

  if (has_checksum()) {
    if (!this->checksum().IsInitialized()) return false;
  }
  if (has_contents()) {
    if (!this->contents().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pendingdeltas())) return false;
  return true;
}

void ListDump::Swap(ListDump* other) {
  if (other != this) {
    std::swap(latestrevision_, other->latestrevision_);
    std::swap(length_, other->length_);
    std::swap(attributes_, other->attributes_);
    std::swap(checksum_, other->checksum_);
    std::swap(contents_, other->contents_);
    pendingdeltas_.Swap(&other->pendingdeltas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDump_descriptor_;
  metadata.reflection = ListDump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListChanges::kBaseRevisionFieldNumber;
const int ListChanges::kDeltasFieldNumber;
const int ListChanges::kWantResultingRevisionsFieldNumber;
const int ListChanges::kWantSyncResultFieldNumber;
const int ListChanges::kDumpFieldNumber;
const int ListChanges::kNoncesFieldNumber;
#endif  // !_MSC_VER

ListChanges::ListChanges()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ListChanges)
}

void ListChanges::InitAsDefaultInstance() {
  dump_ = const_cast< ::spotify::playlist4::proto::ListDump*>(&::spotify::playlist4::proto::ListDump::default_instance());
}

ListChanges::ListChanges(const ListChanges& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ListChanges)
}

void ListChanges::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  baserevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wantresultingrevisions_ = false;
  wantsyncresult_ = false;
  dump_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListChanges::~ListChanges() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ListChanges)
  SharedDtor();
}

void ListChanges::SharedDtor() {
  if (baserevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baserevision_;
  }
  if (this != default_instance_) {
    delete dump_;
  }
}

void ListChanges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListChanges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListChanges_descriptor_;
}

const ListChanges& ListChanges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

ListChanges* ListChanges::default_instance_ = NULL;

ListChanges* ListChanges::New() const {
  return new ListChanges;
}

void ListChanges::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ListChanges*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(wantresultingrevisions_, wantsyncresult_);
    if (has_baserevision()) {
      if (baserevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        baserevision_->clear();
      }
    }
    if (has_dump()) {
      if (dump_ != NULL) dump_->::spotify::playlist4::proto::ListDump::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  deltas_.Clear();
  nonces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListChanges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ListChanges)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes baseRevision = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_baserevision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deltas;
        break;
      }

      // repeated .spotify.playlist4.proto.Delta deltas = 2;
      case 2: {
        if (tag == 18) {
         parse_deltas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deltas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deltas;
        if (input->ExpectTag(24)) goto parse_wantResultingRevisions;
        break;
      }

      // optional bool wantResultingRevisions = 3;
      case 3: {
        if (tag == 24) {
         parse_wantResultingRevisions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantresultingrevisions_)));
          set_has_wantresultingrevisions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wantSyncResult;
        break;
      }

      // optional bool wantSyncResult = 4;
      case 4: {
        if (tag == 32) {
         parse_wantSyncResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantsyncresult_)));
          set_has_wantsyncresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dump;
        break;
      }

      // optional .spotify.playlist4.proto.ListDump dump = 5;
      case 5: {
        if (tag == 42) {
         parse_dump:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dump()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nonces;
        break;
      }

      // repeated int32 nonces = 6;
      case 6: {
        if (tag == 48) {
         parse_nonces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_nonces())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nonces())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nonces;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ListChanges)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ListChanges)
  return false;
#undef DO_
}

void ListChanges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ListChanges)
  // optional bytes baseRevision = 1;
  if (has_baserevision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->baserevision(), output);
  }

  // repeated .spotify.playlist4.proto.Delta deltas = 2;
  for (int i = 0; i < this->deltas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deltas(i), output);
  }

  // optional bool wantResultingRevisions = 3;
  if (has_wantresultingrevisions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wantresultingrevisions(), output);
  }

  // optional bool wantSyncResult = 4;
  if (has_wantsyncresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->wantsyncresult(), output);
  }

  // optional .spotify.playlist4.proto.ListDump dump = 5;
  if (has_dump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dump(), output);
  }

  // repeated int32 nonces = 6;
  for (int i = 0; i < this->nonces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->nonces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ListChanges)
}

::google::protobuf::uint8* ListChanges::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ListChanges)
  // optional bytes baseRevision = 1;
  if (has_baserevision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->baserevision(), target);
  }

  // repeated .spotify.playlist4.proto.Delta deltas = 2;
  for (int i = 0; i < this->deltas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deltas(i), target);
  }

  // optional bool wantResultingRevisions = 3;
  if (has_wantresultingrevisions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wantresultingrevisions(), target);
  }

  // optional bool wantSyncResult = 4;
  if (has_wantsyncresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->wantsyncresult(), target);
  }

  // optional .spotify.playlist4.proto.ListDump dump = 5;
  if (has_dump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dump(), target);
  }

  // repeated int32 nonces = 6;
  for (int i = 0; i < this->nonces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->nonces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ListChanges)
  return target;
}

int ListChanges::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes baseRevision = 1;
    if (has_baserevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->baserevision());
    }

    // optional bool wantResultingRevisions = 3;
    if (has_wantresultingrevisions()) {
      total_size += 1 + 1;
    }

    // optional bool wantSyncResult = 4;
    if (has_wantsyncresult()) {
      total_size += 1 + 1;
    }

    // optional .spotify.playlist4.proto.ListDump dump = 5;
    if (has_dump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dump());
    }

  }
  // repeated .spotify.playlist4.proto.Delta deltas = 2;
  total_size += 1 * this->deltas_size();
  for (int i = 0; i < this->deltas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deltas(i));
  }

  // repeated int32 nonces = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->nonces_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nonces(i));
    }
    total_size += 1 * this->nonces_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListChanges::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListChanges* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListChanges*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListChanges::MergeFrom(const ListChanges& from) {
  GOOGLE_CHECK_NE(&from, this);
  deltas_.MergeFrom(from.deltas_);
  nonces_.MergeFrom(from.nonces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baserevision()) {
      set_baserevision(from.baserevision());
    }
    if (from.has_wantresultingrevisions()) {
      set_wantresultingrevisions(from.wantresultingrevisions());
    }
    if (from.has_wantsyncresult()) {
      set_wantsyncresult(from.wantsyncresult());
    }
    if (from.has_dump()) {
      mutable_dump()->::spotify::playlist4::proto::ListDump::MergeFrom(from.dump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListChanges::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChanges::CopyFrom(const ListChanges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChanges::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->deltas())) return false;
  if (has_dump()) {
    if (!this->dump().IsInitialized()) return false;
  }
  return true;
}

void ListChanges::Swap(ListChanges* other) {
  if (other != this) {
    std::swap(baserevision_, other->baserevision_);
    deltas_.Swap(&other->deltas_);
    std::swap(wantresultingrevisions_, other->wantresultingrevisions_);
    std::swap(wantsyncresult_, other->wantsyncresult_);
    std::swap(dump_, other->dump_);
    nonces_.Swap(&other->nonces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListChanges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListChanges_descriptor_;
  metadata.reflection = ListChanges_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectedListContent::kRevisionFieldNumber;
const int SelectedListContent::kLengthFieldNumber;
const int SelectedListContent::kAttributesFieldNumber;
const int SelectedListContent::kChecksumFieldNumber;
const int SelectedListContent::kContentsFieldNumber;
const int SelectedListContent::kDiffFieldNumber;
const int SelectedListContent::kSyncResultFieldNumber;
const int SelectedListContent::kResultingRevisionsFieldNumber;
const int SelectedListContent::kMultipleHeadsFieldNumber;
const int SelectedListContent::kUpToDateFieldNumber;
const int SelectedListContent::kResolveActionFieldNumber;
const int SelectedListContent::kIssuesFieldNumber;
const int SelectedListContent::kNoncesFieldNumber;
#endif  // !_MSC_VER

SelectedListContent::SelectedListContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.SelectedListContent)
}

void SelectedListContent::InitAsDefaultInstance() {
  attributes_ = const_cast< ::spotify::playlist4::proto::ListAttributes*>(&::spotify::playlist4::proto::ListAttributes::default_instance());
  checksum_ = const_cast< ::spotify::playlist4::proto::ListChecksum*>(&::spotify::playlist4::proto::ListChecksum::default_instance());
  contents_ = const_cast< ::spotify::playlist4::proto::ListItems*>(&::spotify::playlist4::proto::ListItems::default_instance());
  diff_ = const_cast< ::spotify::playlist4::proto::Diff*>(&::spotify::playlist4::proto::Diff::default_instance());
  syncresult_ = const_cast< ::spotify::playlist4::proto::Diff*>(&::spotify::playlist4::proto::Diff::default_instance());
}

SelectedListContent::SelectedListContent(const SelectedListContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.SelectedListContent)
}

void SelectedListContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  attributes_ = NULL;
  checksum_ = NULL;
  contents_ = NULL;
  diff_ = NULL;
  syncresult_ = NULL;
  multipleheads_ = false;
  uptodate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectedListContent::~SelectedListContent() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.SelectedListContent)
  SharedDtor();
}

void SelectedListContent::SharedDtor() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (this != default_instance_) {
    delete attributes_;
    delete checksum_;
    delete contents_;
    delete diff_;
    delete syncresult_;
  }
}

void SelectedListContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectedListContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectedListContent_descriptor_;
}

const SelectedListContent& SelectedListContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4changes_2eproto();
  return *default_instance_;
}

SelectedListContent* SelectedListContent::default_instance_ = NULL;

SelectedListContent* SelectedListContent::New() const {
  return new SelectedListContent;
}

void SelectedListContent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SelectedListContent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    if (has_revision()) {
      if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        revision_->clear();
      }
    }
    length_ = 0;
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::spotify::playlist4::proto::ListAttributes::Clear();
    }
    if (has_checksum()) {
      if (checksum_ != NULL) checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
    }
    if (has_contents()) {
      if (contents_ != NULL) contents_->::spotify::playlist4::proto::ListItems::Clear();
    }
    if (has_diff()) {
      if (diff_ != NULL) diff_->::spotify::playlist4::proto::Diff::Clear();
    }
    if (has_syncresult()) {
      if (syncresult_ != NULL) syncresult_->::spotify::playlist4::proto::Diff::Clear();
    }
  }
  ZR_(multipleheads_, uptodate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  resultingrevisions_.Clear();
  resolveaction_.Clear();
  issues_.Clear();
  nonces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectedListContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.SelectedListContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes revision = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_revision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        break;
      }

      // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
      case 3: {
        if (tag == 26) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_checksum;
        break;
      }

      // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
      case 4: {
        if (tag == 34) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_contents;
        break;
      }

      // optional .spotify.playlist4.proto.ListItems contents = 5;
      case 5: {
        if (tag == 42) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_diff;
        break;
      }

      // optional .spotify.playlist4.proto.Diff diff = 6;
      case 6: {
        if (tag == 50) {
         parse_diff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_syncResult;
        break;
      }

      // optional .spotify.playlist4.proto.Diff syncResult = 7;
      case 7: {
        if (tag == 58) {
         parse_syncResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_resultingRevisions;
        break;
      }

      // repeated bytes resultingRevisions = 8;
      case 8: {
        if (tag == 66) {
         parse_resultingRevisions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_resultingrevisions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_resultingRevisions;
        if (input->ExpectTag(72)) goto parse_multipleHeads;
        break;
      }

      // optional bool multipleHeads = 9;
      case 9: {
        if (tag == 72) {
         parse_multipleHeads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multipleheads_)));
          set_has_multipleheads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_upToDate;
        break;
      }

      // optional bool upToDate = 10;
      case 10: {
        if (tag == 80) {
         parse_upToDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uptodate_)));
          set_has_uptodate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_resolveAction;
        break;
      }

      // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 12;
      case 12: {
        if (tag == 98) {
         parse_resolveAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolveaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_resolveAction;
        if (input->ExpectTag(106)) goto parse_issues;
        break;
      }

      // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
      case 13: {
        if (tag == 106) {
         parse_issues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_issues()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_issues;
        if (input->ExpectTag(112)) goto parse_nonces;
        break;
      }

      // repeated int32 nonces = 14;
      case 14: {
        if (tag == 112) {
         parse_nonces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_nonces())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nonces())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_nonces;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.SelectedListContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.SelectedListContent)
  return false;
#undef DO_
}

void SelectedListContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.SelectedListContent)
  // optional bytes revision = 1;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->revision(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attributes(), output);
  }

  // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->checksum(), output);
  }

  // optional .spotify.playlist4.proto.ListItems contents = 5;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->contents(), output);
  }

  // optional .spotify.playlist4.proto.Diff diff = 6;
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->diff(), output);
  }

  // optional .spotify.playlist4.proto.Diff syncResult = 7;
  if (has_syncresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->syncresult(), output);
  }

  // repeated bytes resultingRevisions = 8;
  for (int i = 0; i < this->resultingrevisions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->resultingrevisions(i), output);
  }

  // optional bool multipleHeads = 9;
  if (has_multipleheads()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->multipleheads(), output);
  }

  // optional bool upToDate = 10;
  if (has_uptodate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->uptodate(), output);
  }

  // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 12;
  for (int i = 0; i < this->resolveaction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->resolveaction(i), output);
  }

  // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
  for (int i = 0; i < this->issues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->issues(i), output);
  }

  // repeated int32 nonces = 14;
  for (int i = 0; i < this->nonces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->nonces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.SelectedListContent)
}

::google::protobuf::uint8* SelectedListContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.SelectedListContent)
  // optional bytes revision = 1;
  if (has_revision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->revision(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attributes(), target);
  }

  // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->checksum(), target);
  }

  // optional .spotify.playlist4.proto.ListItems contents = 5;
  if (has_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->contents(), target);
  }

  // optional .spotify.playlist4.proto.Diff diff = 6;
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->diff(), target);
  }

  // optional .spotify.playlist4.proto.Diff syncResult = 7;
  if (has_syncresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->syncresult(), target);
  }

  // repeated bytes resultingRevisions = 8;
  for (int i = 0; i < this->resultingrevisions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->resultingrevisions(i), target);
  }

  // optional bool multipleHeads = 9;
  if (has_multipleheads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->multipleheads(), target);
  }

  // optional bool upToDate = 10;
  if (has_uptodate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->uptodate(), target);
  }

  // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 12;
  for (int i = 0; i < this->resolveaction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->resolveaction(i), target);
  }

  // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
  for (int i = 0; i < this->issues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->issues(i), target);
  }

  // repeated int32 nonces = 14;
  for (int i = 0; i < this->nonces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->nonces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.SelectedListContent)
  return target;
}

int SelectedListContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes revision = 1;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->revision());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

    // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checksum());
    }

    // optional .spotify.playlist4.proto.ListItems contents = 5;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contents());
    }

    // optional .spotify.playlist4.proto.Diff diff = 6;
    if (has_diff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diff());
    }

    // optional .spotify.playlist4.proto.Diff syncResult = 7;
    if (has_syncresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncresult());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool multipleHeads = 9;
    if (has_multipleheads()) {
      total_size += 1 + 1;
    }

    // optional bool upToDate = 10;
    if (has_uptodate()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes resultingRevisions = 8;
  total_size += 1 * this->resultingrevisions_size();
  for (int i = 0; i < this->resultingrevisions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->resultingrevisions(i));
  }

  // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 12;
  total_size += 1 * this->resolveaction_size();
  for (int i = 0; i < this->resolveaction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolveaction(i));
  }

  // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
  total_size += 1 * this->issues_size();
  for (int i = 0; i < this->issues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->issues(i));
  }

  // repeated int32 nonces = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->nonces_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nonces(i));
    }
    total_size += 1 * this->nonces_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectedListContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectedListContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectedListContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectedListContent::MergeFrom(const SelectedListContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  resultingrevisions_.MergeFrom(from.resultingrevisions_);
  resolveaction_.MergeFrom(from.resolveaction_);
  issues_.MergeFrom(from.issues_);
  nonces_.MergeFrom(from.nonces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::spotify::playlist4::proto::ListAttributes::MergeFrom(from.attributes());
    }
    if (from.has_checksum()) {
      mutable_checksum()->::spotify::playlist4::proto::ListChecksum::MergeFrom(from.checksum());
    }
    if (from.has_contents()) {
      mutable_contents()->::spotify::playlist4::proto::ListItems::MergeFrom(from.contents());
    }
    if (from.has_diff()) {
      mutable_diff()->::spotify::playlist4::proto::Diff::MergeFrom(from.diff());
    }
    if (from.has_syncresult()) {
      mutable_syncresult()->::spotify::playlist4::proto::Diff::MergeFrom(from.syncresult());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multipleheads()) {
      set_multipleheads(from.multipleheads());
    }
    if (from.has_uptodate()) {
      set_uptodate(from.uptodate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectedListContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectedListContent::CopyFrom(const SelectedListContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectedListContent::IsInitialized() const {

  if (has_checksum()) {
    if (!this->checksum().IsInitialized()) return false;
  }
  if (has_contents()) {
    if (!this->contents().IsInitialized()) return false;
  }
  if (has_diff()) {
    if (!this->diff().IsInitialized()) return false;
  }
  if (has_syncresult()) {
    if (!this->syncresult().IsInitialized()) return false;
  }
  return true;
}

void SelectedListContent::Swap(SelectedListContent* other) {
  if (other != this) {
    std::swap(revision_, other->revision_);
    std::swap(length_, other->length_);
    std::swap(attributes_, other->attributes_);
    std::swap(checksum_, other->checksum_);
    std::swap(contents_, other->contents_);
    std::swap(diff_, other->diff_);
    std::swap(syncresult_, other->syncresult_);
    resultingrevisions_.Swap(&other->resultingrevisions_);
    std::swap(multipleheads_, other->multipleheads_);
    std::swap(uptodate_, other->uptodate_);
    resolveaction_.Swap(&other->resolveaction_);
    issues_.Swap(&other->issues_);
    nonces_.Swap(&other->nonces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectedListContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectedListContent_descriptor_;
  metadata.reflection = SelectedListContent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

// @@protoc_insertion_point(global_scope)
