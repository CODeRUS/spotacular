// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubsub.proto

#ifndef PROTOBUF_pubsub_2eproto__INCLUDED
#define PROTOBUF_pubsub_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace hermes {
namespace pubsub {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pubsub_2eproto();
void protobuf_AssignDesc_pubsub_2eproto();
void protobuf_ShutdownFile_pubsub_2eproto();

class Subscription;

// ===================================================================

class Subscription : public ::google::protobuf::Message {
 public:
  Subscription();
  virtual ~Subscription();

  Subscription(const Subscription& from);

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscription& default_instance();

  void Swap(Subscription* other);

  // implements Message ----------------------------------------------

  Subscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Subscription& from);
  void MergeFrom(const Subscription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional int32 expiry = 2;
  inline bool has_expiry() const;
  inline void clear_expiry();
  static const int kExpiryFieldNumber = 2;
  inline ::google::protobuf::int32 expiry() const;
  inline void set_expiry(::google::protobuf::int32 value);

  // optional int32 status_code = 3;
  inline bool has_status_code() const;
  inline void clear_status_code();
  static const int kStatusCodeFieldNumber = 3;
  inline ::google::protobuf::int32 status_code() const;
  inline void set_status_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.hermes.pubsub.proto.Subscription)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_expiry();
  inline void clear_has_expiry();
  inline void set_has_status_code();
  inline void clear_has_status_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::google::protobuf::int32 expiry_;
  ::google::protobuf::int32 status_code_;
  friend void  protobuf_AddDesc_pubsub_2eproto();
  friend void protobuf_AssignDesc_pubsub_2eproto();
  friend void protobuf_ShutdownFile_pubsub_2eproto();

  void InitAsDefaultInstance();
  static Subscription* default_instance_;
};
// ===================================================================


// ===================================================================

// Subscription

// optional string uri = 1;
inline bool Subscription::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subscription::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subscription::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subscription::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& Subscription::uri() const {
  // @@protoc_insertion_point(field_get:spotify.hermes.pubsub.proto.Subscription.uri)
  return *uri_;
}
inline void Subscription::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.hermes.pubsub.proto.Subscription.uri)
}
inline void Subscription::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.hermes.pubsub.proto.Subscription.uri)
}
inline void Subscription::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.hermes.pubsub.proto.Subscription.uri)
}
inline ::std::string* Subscription::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.hermes.pubsub.proto.Subscription.uri)
  return uri_;
}
inline ::std::string* Subscription::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Subscription::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.hermes.pubsub.proto.Subscription.uri)
}

// optional int32 expiry = 2;
inline bool Subscription::has_expiry() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subscription::set_has_expiry() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subscription::clear_has_expiry() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Subscription::clear_expiry() {
  expiry_ = 0;
  clear_has_expiry();
}
inline ::google::protobuf::int32 Subscription::expiry() const {
  // @@protoc_insertion_point(field_get:spotify.hermes.pubsub.proto.Subscription.expiry)
  return expiry_;
}
inline void Subscription::set_expiry(::google::protobuf::int32 value) {
  set_has_expiry();
  expiry_ = value;
  // @@protoc_insertion_point(field_set:spotify.hermes.pubsub.proto.Subscription.expiry)
}

// optional int32 status_code = 3;
inline bool Subscription::has_status_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Subscription::set_has_status_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Subscription::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Subscription::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
inline ::google::protobuf::int32 Subscription::status_code() const {
  // @@protoc_insertion_point(field_get:spotify.hermes.pubsub.proto.Subscription.status_code)
  return status_code_;
}
inline void Subscription::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:spotify.hermes.pubsub.proto.Subscription.status_code)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pubsub
}  // namespace hermes
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pubsub_2eproto__INCLUDED
