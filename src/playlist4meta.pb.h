// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4meta.proto

#ifndef PROTOBUF_playlist4meta_2eproto__INCLUDED
#define PROTOBUF_playlist4meta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playlist4meta_2eproto();
void protobuf_AssignDesc_playlist4meta_2eproto();
void protobuf_ShutdownFile_playlist4meta_2eproto();

class ListChecksum;
class DownloadFormat;
class ListAttributes;
class ItemAttributes;
class StringAttribute;
class StringAttributes;

enum DownloadFormat_Codec {
  DownloadFormat_Codec_CODEC_UNKNOWN = 0,
  DownloadFormat_Codec_OGG_VORBIS = 1,
  DownloadFormat_Codec_FLAC = 2,
  DownloadFormat_Codec_MPEG_1_LAYER_3 = 3
};
bool DownloadFormat_Codec_IsValid(int value);
const DownloadFormat_Codec DownloadFormat_Codec_Codec_MIN = DownloadFormat_Codec_CODEC_UNKNOWN;
const DownloadFormat_Codec DownloadFormat_Codec_Codec_MAX = DownloadFormat_Codec_MPEG_1_LAYER_3;
const int DownloadFormat_Codec_Codec_ARRAYSIZE = DownloadFormat_Codec_Codec_MAX + 1;

const ::google::protobuf::EnumDescriptor* DownloadFormat_Codec_descriptor();
inline const ::std::string& DownloadFormat_Codec_Name(DownloadFormat_Codec value) {
  return ::google::protobuf::internal::NameOfEnum(
    DownloadFormat_Codec_descriptor(), value);
}
inline bool DownloadFormat_Codec_Parse(
    const ::std::string& name, DownloadFormat_Codec* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DownloadFormat_Codec>(
    DownloadFormat_Codec_descriptor(), name, value);
}
enum ListAttributeKind {
  LIST_UNKNOWN = 0,
  LIST_NAME = 1,
  LIST_DESCRIPTION = 2,
  LIST_PICTURE = 3,
  LIST_COLLABORATIVE = 4,
  LIST_PL3_VERSION = 5,
  LIST_DELETED_BY_OWNER = 6,
  LIST_RESTRICTED_COLLABORATIVE = 7
};
bool ListAttributeKind_IsValid(int value);
const ListAttributeKind ListAttributeKind_MIN = LIST_UNKNOWN;
const ListAttributeKind ListAttributeKind_MAX = LIST_RESTRICTED_COLLABORATIVE;
const int ListAttributeKind_ARRAYSIZE = ListAttributeKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListAttributeKind_descriptor();
inline const ::std::string& ListAttributeKind_Name(ListAttributeKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListAttributeKind_descriptor(), value);
}
inline bool ListAttributeKind_Parse(
    const ::std::string& name, ListAttributeKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListAttributeKind>(
    ListAttributeKind_descriptor(), name, value);
}
enum ItemAttributeKind {
  ITEM_UNKNOWN = 0,
  ITEM_ADDED_BY = 1,
  ITEM_TIMESTAMP = 2,
  ITEM_MESSAGE = 3,
  ITEM_SEEN = 4,
  ITEM_DOWNLOAD_COUNT = 5,
  ITEM_DOWNLOAD_FORMAT = 6,
  ITEM_SEVENDIGITAL_ID = 7,
  ITEM_SEVENDIGITAL_LEFT = 8,
  ITEM_SEEN_AT = 9
};
bool ItemAttributeKind_IsValid(int value);
const ItemAttributeKind ItemAttributeKind_MIN = ITEM_UNKNOWN;
const ItemAttributeKind ItemAttributeKind_MAX = ITEM_SEEN_AT;
const int ItemAttributeKind_ARRAYSIZE = ItemAttributeKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemAttributeKind_descriptor();
inline const ::std::string& ItemAttributeKind_Name(ItemAttributeKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemAttributeKind_descriptor(), value);
}
inline bool ItemAttributeKind_Parse(
    const ::std::string& name, ItemAttributeKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemAttributeKind>(
    ItemAttributeKind_descriptor(), name, value);
}
// ===================================================================

class ListChecksum : public ::google::protobuf::Message {
 public:
  ListChecksum();
  virtual ~ListChecksum();

  ListChecksum(const ListChecksum& from);

  inline ListChecksum& operator=(const ListChecksum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListChecksum& default_instance();

  void Swap(ListChecksum* other);

  // implements Message ----------------------------------------------

  ListChecksum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListChecksum& from);
  void MergeFrom(const ListChecksum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional bytes sha1 = 4;
  inline bool has_sha1() const;
  inline void clear_sha1();
  static const int kSha1FieldNumber = 4;
  inline const ::std::string& sha1() const;
  inline void set_sha1(const ::std::string& value);
  inline void set_sha1(const char* value);
  inline void set_sha1(const void* value, size_t size);
  inline ::std::string* mutable_sha1();
  inline ::std::string* release_sha1();
  inline void set_allocated_sha1(::std::string* sha1);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ListChecksum)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_sha1();
  inline void clear_has_sha1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sha1_;
  ::google::protobuf::int32 version_;
  friend void  protobuf_AddDesc_playlist4meta_2eproto();
  friend void protobuf_AssignDesc_playlist4meta_2eproto();
  friend void protobuf_ShutdownFile_playlist4meta_2eproto();

  void InitAsDefaultInstance();
  static ListChecksum* default_instance_;
};
// -------------------------------------------------------------------

class DownloadFormat : public ::google::protobuf::Message {
 public:
  DownloadFormat();
  virtual ~DownloadFormat();

  DownloadFormat(const DownloadFormat& from);

  inline DownloadFormat& operator=(const DownloadFormat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadFormat& default_instance();

  void Swap(DownloadFormat* other);

  // implements Message ----------------------------------------------

  DownloadFormat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadFormat& from);
  void MergeFrom(const DownloadFormat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DownloadFormat_Codec Codec;
  static const Codec CODEC_UNKNOWN = DownloadFormat_Codec_CODEC_UNKNOWN;
  static const Codec OGG_VORBIS = DownloadFormat_Codec_OGG_VORBIS;
  static const Codec FLAC = DownloadFormat_Codec_FLAC;
  static const Codec MPEG_1_LAYER_3 = DownloadFormat_Codec_MPEG_1_LAYER_3;
  static inline bool Codec_IsValid(int value) {
    return DownloadFormat_Codec_IsValid(value);
  }
  static const Codec Codec_MIN =
    DownloadFormat_Codec_Codec_MIN;
  static const Codec Codec_MAX =
    DownloadFormat_Codec_Codec_MAX;
  static const int Codec_ARRAYSIZE =
    DownloadFormat_Codec_Codec_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Codec_descriptor() {
    return DownloadFormat_Codec_descriptor();
  }
  static inline const ::std::string& Codec_Name(Codec value) {
    return DownloadFormat_Codec_Name(value);
  }
  static inline bool Codec_Parse(const ::std::string& name,
      Codec* value) {
    return DownloadFormat_Codec_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .spotify.playlist4.proto.DownloadFormat.Codec codec = 1;
  inline bool has_codec() const;
  inline void clear_codec();
  static const int kCodecFieldNumber = 1;
  inline ::spotify::playlist4::proto::DownloadFormat_Codec codec() const;
  inline void set_codec(::spotify::playlist4::proto::DownloadFormat_Codec value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.DownloadFormat)
 private:
  inline void set_has_codec();
  inline void clear_has_codec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int codec_;
  friend void  protobuf_AddDesc_playlist4meta_2eproto();
  friend void protobuf_AssignDesc_playlist4meta_2eproto();
  friend void protobuf_ShutdownFile_playlist4meta_2eproto();

  void InitAsDefaultInstance();
  static DownloadFormat* default_instance_;
};
// -------------------------------------------------------------------

class ListAttributes : public ::google::protobuf::Message {
 public:
  ListAttributes();
  virtual ~ListAttributes();

  ListAttributes(const ListAttributes& from);

  inline ListAttributes& operator=(const ListAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAttributes& default_instance();

  void Swap(ListAttributes* other);

  // implements Message ----------------------------------------------

  ListAttributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListAttributes& from);
  void MergeFrom(const ListAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional bytes picture = 3;
  inline bool has_picture() const;
  inline void clear_picture();
  static const int kPictureFieldNumber = 3;
  inline const ::std::string& picture() const;
  inline void set_picture(const ::std::string& value);
  inline void set_picture(const char* value);
  inline void set_picture(const void* value, size_t size);
  inline ::std::string* mutable_picture();
  inline ::std::string* release_picture();
  inline void set_allocated_picture(::std::string* picture);

  // optional bool collaborative = 4;
  inline bool has_collaborative() const;
  inline void clear_collaborative();
  static const int kCollaborativeFieldNumber = 4;
  inline bool collaborative() const;
  inline void set_collaborative(bool value);

  // optional string pl3_version = 5;
  inline bool has_pl3_version() const;
  inline void clear_pl3_version();
  static const int kPl3VersionFieldNumber = 5;
  inline const ::std::string& pl3_version() const;
  inline void set_pl3_version(const ::std::string& value);
  inline void set_pl3_version(const char* value);
  inline void set_pl3_version(const char* value, size_t size);
  inline ::std::string* mutable_pl3_version();
  inline ::std::string* release_pl3_version();
  inline void set_allocated_pl3_version(::std::string* pl3_version);

  // optional bool deleted_by_owner = 6;
  inline bool has_deleted_by_owner() const;
  inline void clear_deleted_by_owner();
  static const int kDeletedByOwnerFieldNumber = 6;
  inline bool deleted_by_owner() const;
  inline void set_deleted_by_owner(bool value);

  // optional bool restricted_collaborative = 7;
  inline bool has_restricted_collaborative() const;
  inline void clear_restricted_collaborative();
  static const int kRestrictedCollaborativeFieldNumber = 7;
  inline bool restricted_collaborative() const;
  inline void set_restricted_collaborative(bool value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ListAttributes)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_picture();
  inline void clear_has_picture();
  inline void set_has_collaborative();
  inline void clear_has_collaborative();
  inline void set_has_pl3_version();
  inline void clear_has_pl3_version();
  inline void set_has_deleted_by_owner();
  inline void clear_has_deleted_by_owner();
  inline void set_has_restricted_collaborative();
  inline void clear_has_restricted_collaborative();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* description_;
  ::std::string* picture_;
  ::std::string* pl3_version_;
  bool collaborative_;
  bool deleted_by_owner_;
  bool restricted_collaborative_;
  friend void  protobuf_AddDesc_playlist4meta_2eproto();
  friend void protobuf_AssignDesc_playlist4meta_2eproto();
  friend void protobuf_ShutdownFile_playlist4meta_2eproto();

  void InitAsDefaultInstance();
  static ListAttributes* default_instance_;
};
// -------------------------------------------------------------------

class ItemAttributes : public ::google::protobuf::Message {
 public:
  ItemAttributes();
  virtual ~ItemAttributes();

  ItemAttributes(const ItemAttributes& from);

  inline ItemAttributes& operator=(const ItemAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemAttributes& default_instance();

  void Swap(ItemAttributes* other);

  // implements Message ----------------------------------------------

  ItemAttributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemAttributes& from);
  void MergeFrom(const ItemAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string added_by = 1;
  inline bool has_added_by() const;
  inline void clear_added_by();
  static const int kAddedByFieldNumber = 1;
  inline const ::std::string& added_by() const;
  inline void set_added_by(const ::std::string& value);
  inline void set_added_by(const char* value);
  inline void set_added_by(const char* value, size_t size);
  inline ::std::string* mutable_added_by();
  inline ::std::string* release_added_by();
  inline void set_allocated_added_by(::std::string* added_by);

  // optional string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional bool seen = 4;
  inline bool has_seen() const;
  inline void clear_seen();
  static const int kSeenFieldNumber = 4;
  inline bool seen() const;
  inline void set_seen(bool value);

  // optional .spotify.playlist4.proto.DownloadFormat download_format = 6;
  inline bool has_download_format() const;
  inline void clear_download_format();
  static const int kDownloadFormatFieldNumber = 6;
  inline const ::spotify::playlist4::proto::DownloadFormat& download_format() const;
  inline ::spotify::playlist4::proto::DownloadFormat* mutable_download_format();
  inline ::spotify::playlist4::proto::DownloadFormat* release_download_format();
  inline void set_allocated_download_format(::spotify::playlist4::proto::DownloadFormat* download_format);

  // optional string sevendigital_id = 7;
  inline bool has_sevendigital_id() const;
  inline void clear_sevendigital_id();
  static const int kSevendigitalIdFieldNumber = 7;
  inline const ::std::string& sevendigital_id() const;
  inline void set_sevendigital_id(const ::std::string& value);
  inline void set_sevendigital_id(const char* value);
  inline void set_sevendigital_id(const char* value, size_t size);
  inline ::std::string* mutable_sevendigital_id();
  inline ::std::string* release_sevendigital_id();
  inline void set_allocated_sevendigital_id(::std::string* sevendigital_id);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ItemAttributes)
 private:
  inline void set_has_added_by();
  inline void clear_has_added_by();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_seen();
  inline void clear_has_seen();
  inline void set_has_download_format();
  inline void clear_has_download_format();
  inline void set_has_sevendigital_id();
  inline void clear_has_sevendigital_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* added_by_;
  ::std::string* message_;
  ::spotify::playlist4::proto::DownloadFormat* download_format_;
  ::std::string* sevendigital_id_;
  bool seen_;
  friend void  protobuf_AddDesc_playlist4meta_2eproto();
  friend void protobuf_AssignDesc_playlist4meta_2eproto();
  friend void protobuf_ShutdownFile_playlist4meta_2eproto();

  void InitAsDefaultInstance();
  static ItemAttributes* default_instance_;
};
// -------------------------------------------------------------------

class StringAttribute : public ::google::protobuf::Message {
 public:
  StringAttribute();
  virtual ~StringAttribute();

  StringAttribute(const StringAttribute& from);

  inline StringAttribute& operator=(const StringAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringAttribute& default_instance();

  void Swap(StringAttribute* other);

  // implements Message ----------------------------------------------

  StringAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringAttribute& from);
  void MergeFrom(const StringAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.StringAttribute)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_playlist4meta_2eproto();
  friend void protobuf_AssignDesc_playlist4meta_2eproto();
  friend void protobuf_ShutdownFile_playlist4meta_2eproto();

  void InitAsDefaultInstance();
  static StringAttribute* default_instance_;
};
// -------------------------------------------------------------------

class StringAttributes : public ::google::protobuf::Message {
 public:
  StringAttributes();
  virtual ~StringAttributes();

  StringAttributes(const StringAttributes& from);

  inline StringAttributes& operator=(const StringAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringAttributes& default_instance();

  void Swap(StringAttributes* other);

  // implements Message ----------------------------------------------

  StringAttributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringAttributes& from);
  void MergeFrom(const StringAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .spotify.playlist4.proto.StringAttribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::spotify::playlist4::proto::StringAttribute& attribute(int index) const;
  inline ::spotify::playlist4::proto::StringAttribute* mutable_attribute(int index);
  inline ::spotify::playlist4::proto::StringAttribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::StringAttribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::StringAttribute >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.StringAttributes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::StringAttribute > attribute_;
  friend void  protobuf_AddDesc_playlist4meta_2eproto();
  friend void protobuf_AssignDesc_playlist4meta_2eproto();
  friend void protobuf_ShutdownFile_playlist4meta_2eproto();

  void InitAsDefaultInstance();
  static StringAttributes* default_instance_;
};
// ===================================================================


// ===================================================================

// ListChecksum

// required int32 version = 1;
inline bool ListChecksum::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListChecksum::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListChecksum::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListChecksum::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 ListChecksum::version() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListChecksum.version)
  return version_;
}
inline void ListChecksum::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListChecksum.version)
}

// optional bytes sha1 = 4;
inline bool ListChecksum::has_sha1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListChecksum::set_has_sha1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListChecksum::clear_has_sha1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListChecksum::clear_sha1() {
  if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_->clear();
  }
  clear_has_sha1();
}
inline const ::std::string& ListChecksum::sha1() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListChecksum.sha1)
  return *sha1_;
}
inline void ListChecksum::set_sha1(const ::std::string& value) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListChecksum.sha1)
}
inline void ListChecksum::set_sha1(const char* value) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListChecksum.sha1)
}
inline void ListChecksum::set_sha1(const void* value, size_t size) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListChecksum.sha1)
}
inline ::std::string* ListChecksum::mutable_sha1() {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListChecksum.sha1)
  return sha1_;
}
inline ::std::string* ListChecksum::release_sha1() {
  clear_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sha1_;
    sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListChecksum::set_allocated_sha1(::std::string* sha1) {
  if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sha1_;
  }
  if (sha1) {
    set_has_sha1();
    sha1_ = sha1;
  } else {
    clear_has_sha1();
    sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListChecksum.sha1)
}

// -------------------------------------------------------------------

// DownloadFormat

// required .spotify.playlist4.proto.DownloadFormat.Codec codec = 1;
inline bool DownloadFormat::has_codec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadFormat::set_has_codec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadFormat::clear_has_codec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadFormat::clear_codec() {
  codec_ = 0;
  clear_has_codec();
}
inline ::spotify::playlist4::proto::DownloadFormat_Codec DownloadFormat::codec() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.DownloadFormat.codec)
  return static_cast< ::spotify::playlist4::proto::DownloadFormat_Codec >(codec_);
}
inline void DownloadFormat::set_codec(::spotify::playlist4::proto::DownloadFormat_Codec value) {
  assert(::spotify::playlist4::proto::DownloadFormat_Codec_IsValid(value));
  set_has_codec();
  codec_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.DownloadFormat.codec)
}

// -------------------------------------------------------------------

// ListAttributes

// optional string name = 1;
inline bool ListAttributes::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListAttributes::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListAttributes::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListAttributes::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ListAttributes::name() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributes.name)
  return *name_;
}
inline void ListAttributes::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListAttributes.name)
}
inline void ListAttributes::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListAttributes.name)
}
inline void ListAttributes::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListAttributes.name)
}
inline ::std::string* ListAttributes::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListAttributes.name)
  return name_;
}
inline ::std::string* ListAttributes::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListAttributes::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListAttributes.name)
}

// optional string description = 2;
inline bool ListAttributes::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListAttributes::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListAttributes::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListAttributes::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ListAttributes::description() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributes.description)
  return *description_;
}
inline void ListAttributes::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListAttributes.description)
}
inline void ListAttributes::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListAttributes.description)
}
inline void ListAttributes::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListAttributes.description)
}
inline ::std::string* ListAttributes::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListAttributes.description)
  return description_;
}
inline ::std::string* ListAttributes::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListAttributes::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListAttributes.description)
}

// optional bytes picture = 3;
inline bool ListAttributes::has_picture() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListAttributes::set_has_picture() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListAttributes::clear_has_picture() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListAttributes::clear_picture() {
  if (picture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture_->clear();
  }
  clear_has_picture();
}
inline const ::std::string& ListAttributes::picture() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributes.picture)
  return *picture_;
}
inline void ListAttributes::set_picture(const ::std::string& value) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListAttributes.picture)
}
inline void ListAttributes::set_picture(const char* value) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListAttributes.picture)
}
inline void ListAttributes::set_picture(const void* value, size_t size) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture_ = new ::std::string;
  }
  picture_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListAttributes.picture)
}
inline ::std::string* ListAttributes::mutable_picture() {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picture_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListAttributes.picture)
  return picture_;
}
inline ::std::string* ListAttributes::release_picture() {
  clear_has_picture();
  if (picture_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = picture_;
    picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListAttributes::set_allocated_picture(::std::string* picture) {
  if (picture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picture_;
  }
  if (picture) {
    set_has_picture();
    picture_ = picture;
  } else {
    clear_has_picture();
    picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListAttributes.picture)
}

// optional bool collaborative = 4;
inline bool ListAttributes::has_collaborative() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListAttributes::set_has_collaborative() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListAttributes::clear_has_collaborative() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListAttributes::clear_collaborative() {
  collaborative_ = false;
  clear_has_collaborative();
}
inline bool ListAttributes::collaborative() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributes.collaborative)
  return collaborative_;
}
inline void ListAttributes::set_collaborative(bool value) {
  set_has_collaborative();
  collaborative_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListAttributes.collaborative)
}

// optional string pl3_version = 5;
inline bool ListAttributes::has_pl3_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListAttributes::set_has_pl3_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListAttributes::clear_has_pl3_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListAttributes::clear_pl3_version() {
  if (pl3_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3_version_->clear();
  }
  clear_has_pl3_version();
}
inline const ::std::string& ListAttributes::pl3_version() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributes.pl3_version)
  return *pl3_version_;
}
inline void ListAttributes::set_pl3_version(const ::std::string& value) {
  set_has_pl3_version();
  if (pl3_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3_version_ = new ::std::string;
  }
  pl3_version_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListAttributes.pl3_version)
}
inline void ListAttributes::set_pl3_version(const char* value) {
  set_has_pl3_version();
  if (pl3_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3_version_ = new ::std::string;
  }
  pl3_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListAttributes.pl3_version)
}
inline void ListAttributes::set_pl3_version(const char* value, size_t size) {
  set_has_pl3_version();
  if (pl3_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3_version_ = new ::std::string;
  }
  pl3_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListAttributes.pl3_version)
}
inline ::std::string* ListAttributes::mutable_pl3_version() {
  set_has_pl3_version();
  if (pl3_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListAttributes.pl3_version)
  return pl3_version_;
}
inline ::std::string* ListAttributes::release_pl3_version() {
  clear_has_pl3_version();
  if (pl3_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pl3_version_;
    pl3_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListAttributes::set_allocated_pl3_version(::std::string* pl3_version) {
  if (pl3_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pl3_version_;
  }
  if (pl3_version) {
    set_has_pl3_version();
    pl3_version_ = pl3_version;
  } else {
    clear_has_pl3_version();
    pl3_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListAttributes.pl3_version)
}

// optional bool deleted_by_owner = 6;
inline bool ListAttributes::has_deleted_by_owner() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ListAttributes::set_has_deleted_by_owner() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ListAttributes::clear_has_deleted_by_owner() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ListAttributes::clear_deleted_by_owner() {
  deleted_by_owner_ = false;
  clear_has_deleted_by_owner();
}
inline bool ListAttributes::deleted_by_owner() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributes.deleted_by_owner)
  return deleted_by_owner_;
}
inline void ListAttributes::set_deleted_by_owner(bool value) {
  set_has_deleted_by_owner();
  deleted_by_owner_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListAttributes.deleted_by_owner)
}

// optional bool restricted_collaborative = 7;
inline bool ListAttributes::has_restricted_collaborative() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ListAttributes::set_has_restricted_collaborative() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ListAttributes::clear_has_restricted_collaborative() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ListAttributes::clear_restricted_collaborative() {
  restricted_collaborative_ = false;
  clear_has_restricted_collaborative();
}
inline bool ListAttributes::restricted_collaborative() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListAttributes.restricted_collaborative)
  return restricted_collaborative_;
}
inline void ListAttributes::set_restricted_collaborative(bool value) {
  set_has_restricted_collaborative();
  restricted_collaborative_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListAttributes.restricted_collaborative)
}

// -------------------------------------------------------------------

// ItemAttributes

// optional string added_by = 1;
inline bool ItemAttributes::has_added_by() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemAttributes::set_has_added_by() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemAttributes::clear_has_added_by() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemAttributes::clear_added_by() {
  if (added_by_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    added_by_->clear();
  }
  clear_has_added_by();
}
inline const ::std::string& ItemAttributes::added_by() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ItemAttributes.added_by)
  return *added_by_;
}
inline void ItemAttributes::set_added_by(const ::std::string& value) {
  set_has_added_by();
  if (added_by_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    added_by_ = new ::std::string;
  }
  added_by_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ItemAttributes.added_by)
}
inline void ItemAttributes::set_added_by(const char* value) {
  set_has_added_by();
  if (added_by_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    added_by_ = new ::std::string;
  }
  added_by_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ItemAttributes.added_by)
}
inline void ItemAttributes::set_added_by(const char* value, size_t size) {
  set_has_added_by();
  if (added_by_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    added_by_ = new ::std::string;
  }
  added_by_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ItemAttributes.added_by)
}
inline ::std::string* ItemAttributes::mutable_added_by() {
  set_has_added_by();
  if (added_by_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    added_by_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ItemAttributes.added_by)
  return added_by_;
}
inline ::std::string* ItemAttributes::release_added_by() {
  clear_has_added_by();
  if (added_by_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = added_by_;
    added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemAttributes::set_allocated_added_by(::std::string* added_by) {
  if (added_by_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete added_by_;
  }
  if (added_by) {
    set_has_added_by();
    added_by_ = added_by;
  } else {
    clear_has_added_by();
    added_by_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ItemAttributes.added_by)
}

// optional string message = 3;
inline bool ItemAttributes::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemAttributes::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemAttributes::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemAttributes::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ItemAttributes::message() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ItemAttributes.message)
  return *message_;
}
inline void ItemAttributes::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ItemAttributes.message)
}
inline void ItemAttributes::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ItemAttributes.message)
}
inline void ItemAttributes::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ItemAttributes.message)
}
inline ::std::string* ItemAttributes::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ItemAttributes.message)
  return message_;
}
inline ::std::string* ItemAttributes::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemAttributes::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ItemAttributes.message)
}

// optional bool seen = 4;
inline bool ItemAttributes::has_seen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemAttributes::set_has_seen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemAttributes::clear_has_seen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemAttributes::clear_seen() {
  seen_ = false;
  clear_has_seen();
}
inline bool ItemAttributes::seen() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ItemAttributes.seen)
  return seen_;
}
inline void ItemAttributes::set_seen(bool value) {
  set_has_seen();
  seen_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ItemAttributes.seen)
}

// optional .spotify.playlist4.proto.DownloadFormat download_format = 6;
inline bool ItemAttributes::has_download_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemAttributes::set_has_download_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemAttributes::clear_has_download_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemAttributes::clear_download_format() {
  if (download_format_ != NULL) download_format_->::spotify::playlist4::proto::DownloadFormat::Clear();
  clear_has_download_format();
}
inline const ::spotify::playlist4::proto::DownloadFormat& ItemAttributes::download_format() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ItemAttributes.download_format)
  return download_format_ != NULL ? *download_format_ : *default_instance_->download_format_;
}
inline ::spotify::playlist4::proto::DownloadFormat* ItemAttributes::mutable_download_format() {
  set_has_download_format();
  if (download_format_ == NULL) download_format_ = new ::spotify::playlist4::proto::DownloadFormat;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ItemAttributes.download_format)
  return download_format_;
}
inline ::spotify::playlist4::proto::DownloadFormat* ItemAttributes::release_download_format() {
  clear_has_download_format();
  ::spotify::playlist4::proto::DownloadFormat* temp = download_format_;
  download_format_ = NULL;
  return temp;
}
inline void ItemAttributes::set_allocated_download_format(::spotify::playlist4::proto::DownloadFormat* download_format) {
  delete download_format_;
  download_format_ = download_format;
  if (download_format) {
    set_has_download_format();
  } else {
    clear_has_download_format();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ItemAttributes.download_format)
}

// optional string sevendigital_id = 7;
inline bool ItemAttributes::has_sevendigital_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemAttributes::set_has_sevendigital_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemAttributes::clear_has_sevendigital_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemAttributes::clear_sevendigital_id() {
  if (sevendigital_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sevendigital_id_->clear();
  }
  clear_has_sevendigital_id();
}
inline const ::std::string& ItemAttributes::sevendigital_id() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ItemAttributes.sevendigital_id)
  return *sevendigital_id_;
}
inline void ItemAttributes::set_sevendigital_id(const ::std::string& value) {
  set_has_sevendigital_id();
  if (sevendigital_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sevendigital_id_ = new ::std::string;
  }
  sevendigital_id_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ItemAttributes.sevendigital_id)
}
inline void ItemAttributes::set_sevendigital_id(const char* value) {
  set_has_sevendigital_id();
  if (sevendigital_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sevendigital_id_ = new ::std::string;
  }
  sevendigital_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ItemAttributes.sevendigital_id)
}
inline void ItemAttributes::set_sevendigital_id(const char* value, size_t size) {
  set_has_sevendigital_id();
  if (sevendigital_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sevendigital_id_ = new ::std::string;
  }
  sevendigital_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ItemAttributes.sevendigital_id)
}
inline ::std::string* ItemAttributes::mutable_sevendigital_id() {
  set_has_sevendigital_id();
  if (sevendigital_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sevendigital_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ItemAttributes.sevendigital_id)
  return sevendigital_id_;
}
inline ::std::string* ItemAttributes::release_sevendigital_id() {
  clear_has_sevendigital_id();
  if (sevendigital_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sevendigital_id_;
    sevendigital_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemAttributes::set_allocated_sevendigital_id(::std::string* sevendigital_id) {
  if (sevendigital_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sevendigital_id_;
  }
  if (sevendigital_id) {
    set_has_sevendigital_id();
    sevendigital_id_ = sevendigital_id;
  } else {
    clear_has_sevendigital_id();
    sevendigital_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ItemAttributes.sevendigital_id)
}

// -------------------------------------------------------------------

// StringAttribute

// required string key = 1;
inline bool StringAttribute::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringAttribute::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringAttribute::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringAttribute::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& StringAttribute::key() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.StringAttribute.key)
  return *key_;
}
inline void StringAttribute::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.StringAttribute.key)
}
inline void StringAttribute::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.StringAttribute.key)
}
inline void StringAttribute::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.StringAttribute.key)
}
inline ::std::string* StringAttribute::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.StringAttribute.key)
  return key_;
}
inline ::std::string* StringAttribute::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StringAttribute::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.StringAttribute.key)
}

// required string value = 2;
inline bool StringAttribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringAttribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StringAttribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StringAttribute::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& StringAttribute::value() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.StringAttribute.value)
  return *value_;
}
inline void StringAttribute::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.StringAttribute.value)
}
inline void StringAttribute::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.StringAttribute.value)
}
inline void StringAttribute::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.StringAttribute.value)
}
inline ::std::string* StringAttribute::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.StringAttribute.value)
  return value_;
}
inline ::std::string* StringAttribute::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StringAttribute::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.StringAttribute.value)
}

// -------------------------------------------------------------------

// StringAttributes

// repeated .spotify.playlist4.proto.StringAttribute attribute = 1;
inline int StringAttributes::attribute_size() const {
  return attribute_.size();
}
inline void StringAttributes::clear_attribute() {
  attribute_.Clear();
}
inline const ::spotify::playlist4::proto::StringAttribute& StringAttributes::attribute(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.StringAttributes.attribute)
  return attribute_.Get(index);
}
inline ::spotify::playlist4::proto::StringAttribute* StringAttributes::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.StringAttributes.attribute)
  return attribute_.Mutable(index);
}
inline ::spotify::playlist4::proto::StringAttribute* StringAttributes::add_attribute() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.StringAttributes.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::StringAttribute >&
StringAttributes::attribute() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.StringAttributes.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::StringAttribute >*
StringAttributes::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.StringAttributes.attribute)
  return &attribute_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spotify::playlist4::proto::DownloadFormat_Codec> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::DownloadFormat_Codec>() {
  return ::spotify::playlist4::proto::DownloadFormat_Codec_descriptor();
}
template <> struct is_proto_enum< ::spotify::playlist4::proto::ListAttributeKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::ListAttributeKind>() {
  return ::spotify::playlist4::proto::ListAttributeKind_descriptor();
}
template <> struct is_proto_enum< ::spotify::playlist4::proto::ItemAttributeKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::ItemAttributeKind>() {
  return ::spotify::playlist4::proto::ItemAttributeKind_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playlist4meta_2eproto__INCLUDED
