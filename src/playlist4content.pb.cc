// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4content.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playlist4content.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListContentSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListContentSelection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_playlist4content_2eproto() {
  protobuf_AddDesc_playlist4content_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playlist4content.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, attributes_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  ListItems_descriptor_ = file->message_type(1);
  static const int ListItems_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListItems, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListItems, truncated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListItems, items_),
  };
  ListItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListItems_descriptor_,
      ListItems::default_instance_,
      ListItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListItems));
  ContentRange_descriptor_ = file->message_type(2);
  static const int ContentRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRange, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRange, length_),
  };
  ContentRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentRange_descriptor_,
      ContentRange::default_instance_,
      ContentRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentRange));
  ListContentSelection_descriptor_ = file->message_type(3);
  static const int ListContentSelection_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, wantrevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, wantlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, wantattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, wantchecksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, wantcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, contentrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, wantdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, baserevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, hintrevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, wantnothingifuptodate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, wantresolveaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, issues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, resolveaction_),
  };
  ListContentSelection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListContentSelection_descriptor_,
      ListContentSelection::default_instance_,
      ListContentSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListContentSelection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListContentSelection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playlist4content_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListItems_descriptor_, &ListItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentRange_descriptor_, &ContentRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListContentSelection_descriptor_, &ListContentSelection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playlist4content_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete ListItems::default_instance_;
  delete ListItems_reflection_;
  delete ContentRange::default_instance_;
  delete ContentRange_reflection_;
  delete ListContentSelection::default_instance_;
  delete ListContentSelection_reflection_;
}

void protobuf_AddDesc_playlist4content_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::spotify::playlist4::proto::protobuf_AddDesc_playlist4meta_2eproto();
  ::spotify::playlist4::proto::protobuf_AddDesc_playlist4issues_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026playlist4content.proto\022\027spotify.playli"
    "st4.proto\032\023playlist4meta.proto\032\025playlist"
    "4issues.proto\"P\n\004Item\022\013\n\003uri\030\001 \002(\t\022;\n\nat"
    "tributes\030\002 \001(\0132\'.spotify.playlist4.proto"
    ".ItemAttributes\"Y\n\tListItems\022\013\n\003pos\030\001 \002("
    "\005\022\021\n\ttruncated\030\002 \002(\010\022,\n\005items\030\003 \003(\0132\035.sp"
    "otify.playlist4.proto.Item\"+\n\014ContentRan"
    "ge\022\013\n\003pos\030\001 \002(\005\022\016\n\006length\030\002 \001(\005\"\263\003\n\024List"
    "ContentSelection\022\024\n\014wantRevision\030\001 \001(\010\022\022"
    "\n\nwantLength\030\002 \001(\010\022\026\n\016wantAttributes\030\003 \001"
    "(\010\022\024\n\014wantChecksum\030\004 \001(\010\022\023\n\013wantContent\030"
    "\005 \001(\010\022;\n\014contentRange\030\006 \001(\0132%.spotify.pl"
    "aylist4.proto.ContentRange\022\020\n\010wantDiff\030\007"
    " \001(\010\022\024\n\014baseRevision\030\010 \001(\014\022\024\n\014hintRevisi"
    "on\030\t \001(\014\022\035\n\025wantNothingIfUpToDate\030\n \001(\010\022"
    "\031\n\021wantResolveAction\030\014 \001(\010\0224\n\006issues\030\r \003"
    "(\0132$.spotify.playlist4.proto.ClientIssue"
    "\022C\n\rresolveAction\030\016 \003(\0132,.spotify.playli"
    "st4.proto.ClientResolveActionB\037\n\033com.spo"
    "tify.playlist4.protoH\001", 782);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playlist4content.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  ListItems::default_instance_ = new ListItems();
  ContentRange::default_instance_ = new ContentRange();
  ListContentSelection::default_instance_ = new ListContentSelection();
  Item::default_instance_->InitAsDefaultInstance();
  ListItems::default_instance_->InitAsDefaultInstance();
  ContentRange::default_instance_->InitAsDefaultInstance();
  ListContentSelection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playlist4content_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playlist4content_2eproto {
  StaticDescriptorInitializer_playlist4content_2eproto() {
    protobuf_AddDesc_playlist4content_2eproto();
  }
} static_descriptor_initializer_playlist4content_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kUriFieldNumber;
const int Item::kAttributesFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.Item)
}

void Item::InitAsDefaultInstance() {
  attributes_ = const_cast< ::spotify::playlist4::proto::ItemAttributes*>(&::spotify::playlist4::proto::ItemAttributes::default_instance());
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.Item)
}

void Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (this != default_instance_) {
    delete attributes_;
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4content_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::spotify::playlist4::proto::ItemAttributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // optional .spotify.playlist4.proto.ItemAttributes attributes = 2;
      case 2: {
        if (tag == 18) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.Item)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional .spotify.playlist4.proto.ItemAttributes attributes = 2;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.Item)
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.Item)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional .spotify.playlist4.proto.ItemAttributes attributes = 2;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.Item)
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional .spotify.playlist4.proto.ItemAttributes attributes = 2;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::spotify::playlist4::proto::ItemAttributes::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListItems::kPosFieldNumber;
const int ListItems::kTruncatedFieldNumber;
const int ListItems::kItemsFieldNumber;
#endif  // !_MSC_VER

ListItems::ListItems()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ListItems)
}

void ListItems::InitAsDefaultInstance() {
}

ListItems::ListItems(const ListItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ListItems)
}

void ListItems::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  truncated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListItems::~ListItems() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ListItems)
  SharedDtor();
}

void ListItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListItems_descriptor_;
}

const ListItems& ListItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4content_2eproto();
  return *default_instance_;
}

ListItems* ListItems::default_instance_ = NULL;

ListItems* ListItems::New() const {
  return new ListItems;
}

void ListItems::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ListItems*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, truncated_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ListItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_truncated;
        break;
      }

      // required bool truncated = 2;
      case 2: {
        if (tag == 16) {
         parse_truncated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &truncated_)));
          set_has_truncated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .spotify.playlist4.proto.Item items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ListItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ListItems)
  return false;
#undef DO_
}

void ListItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ListItems)
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required bool truncated = 2;
  if (has_truncated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->truncated(), output);
  }

  // repeated .spotify.playlist4.proto.Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ListItems)
}

::google::protobuf::uint8* ListItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ListItems)
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required bool truncated = 2;
  if (has_truncated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->truncated(), target);
  }

  // repeated .spotify.playlist4.proto.Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ListItems)
  return target;
}

int ListItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required bool truncated = 2;
    if (has_truncated()) {
      total_size += 1 + 1;
    }

  }
  // repeated .spotify.playlist4.proto.Item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListItems::MergeFrom(const ListItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_truncated()) {
      set_truncated(from.truncated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListItems::CopyFrom(const ListItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListItems::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void ListItems::Swap(ListItems* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(truncated_, other->truncated_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListItems_descriptor_;
  metadata.reflection = ListItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentRange::kPosFieldNumber;
const int ContentRange::kLengthFieldNumber;
#endif  // !_MSC_VER

ContentRange::ContentRange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ContentRange)
}

void ContentRange::InitAsDefaultInstance() {
}

ContentRange::ContentRange(const ContentRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ContentRange)
}

void ContentRange::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentRange::~ContentRange() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ContentRange)
  SharedDtor();
}

void ContentRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContentRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentRange_descriptor_;
}

const ContentRange& ContentRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4content_2eproto();
  return *default_instance_;
}

ContentRange* ContentRange::default_instance_ = NULL;

ContentRange* ContentRange::New() const {
  return new ContentRange;
}

void ContentRange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContentRange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, length_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ContentRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ContentRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ContentRange)
  return false;
#undef DO_
}

void ContentRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ContentRange)
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ContentRange)
}

::google::protobuf::uint8* ContentRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ContentRange)
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ContentRange)
  return target;
}

int ContentRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentRange::MergeFrom(const ContentRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentRange::CopyFrom(const ContentRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContentRange::Swap(ContentRange* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentRange_descriptor_;
  metadata.reflection = ContentRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListContentSelection::kWantRevisionFieldNumber;
const int ListContentSelection::kWantLengthFieldNumber;
const int ListContentSelection::kWantAttributesFieldNumber;
const int ListContentSelection::kWantChecksumFieldNumber;
const int ListContentSelection::kWantContentFieldNumber;
const int ListContentSelection::kContentRangeFieldNumber;
const int ListContentSelection::kWantDiffFieldNumber;
const int ListContentSelection::kBaseRevisionFieldNumber;
const int ListContentSelection::kHintRevisionFieldNumber;
const int ListContentSelection::kWantNothingIfUpToDateFieldNumber;
const int ListContentSelection::kWantResolveActionFieldNumber;
const int ListContentSelection::kIssuesFieldNumber;
const int ListContentSelection::kResolveActionFieldNumber;
#endif  // !_MSC_VER

ListContentSelection::ListContentSelection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ListContentSelection)
}

void ListContentSelection::InitAsDefaultInstance() {
  contentrange_ = const_cast< ::spotify::playlist4::proto::ContentRange*>(&::spotify::playlist4::proto::ContentRange::default_instance());
}

ListContentSelection::ListContentSelection(const ListContentSelection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ListContentSelection)
}

void ListContentSelection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wantrevision_ = false;
  wantlength_ = false;
  wantattributes_ = false;
  wantchecksum_ = false;
  wantcontent_ = false;
  contentrange_ = NULL;
  wantdiff_ = false;
  baserevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hintrevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wantnothingifuptodate_ = false;
  wantresolveaction_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListContentSelection::~ListContentSelection() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ListContentSelection)
  SharedDtor();
}

void ListContentSelection::SharedDtor() {
  if (baserevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baserevision_;
  }
  if (hintrevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hintrevision_;
  }
  if (this != default_instance_) {
    delete contentrange_;
  }
}

void ListContentSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListContentSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListContentSelection_descriptor_;
}

const ListContentSelection& ListContentSelection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4content_2eproto();
  return *default_instance_;
}

ListContentSelection* ListContentSelection::default_instance_ = NULL;

ListContentSelection* ListContentSelection::New() const {
  return new ListContentSelection;
}

void ListContentSelection::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ListContentSelection*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(wantrevision_, wantdiff_);
    if (has_contentrange()) {
      if (contentrange_ != NULL) contentrange_->::spotify::playlist4::proto::ContentRange::Clear();
    }
    if (has_baserevision()) {
      if (baserevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        baserevision_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(wantnothingifuptodate_, wantresolveaction_);
    if (has_hintrevision()) {
      if (hintrevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hintrevision_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  issues_.Clear();
  resolveaction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListContentSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ListContentSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool wantRevision = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantrevision_)));
          set_has_wantrevision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wantLength;
        break;
      }

      // optional bool wantLength = 2;
      case 2: {
        if (tag == 16) {
         parse_wantLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantlength_)));
          set_has_wantlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wantAttributes;
        break;
      }

      // optional bool wantAttributes = 3;
      case 3: {
        if (tag == 24) {
         parse_wantAttributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantattributes_)));
          set_has_wantattributes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wantChecksum;
        break;
      }

      // optional bool wantChecksum = 4;
      case 4: {
        if (tag == 32) {
         parse_wantChecksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantchecksum_)));
          set_has_wantchecksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wantContent;
        break;
      }

      // optional bool wantContent = 5;
      case 5: {
        if (tag == 40) {
         parse_wantContent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantcontent_)));
          set_has_wantcontent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_contentRange;
        break;
      }

      // optional .spotify.playlist4.proto.ContentRange contentRange = 6;
      case 6: {
        if (tag == 50) {
         parse_contentRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contentrange()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_wantDiff;
        break;
      }

      // optional bool wantDiff = 7;
      case 7: {
        if (tag == 56) {
         parse_wantDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantdiff_)));
          set_has_wantdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_baseRevision;
        break;
      }

      // optional bytes baseRevision = 8;
      case 8: {
        if (tag == 66) {
         parse_baseRevision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_baserevision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_hintRevision;
        break;
      }

      // optional bytes hintRevision = 9;
      case 9: {
        if (tag == 74) {
         parse_hintRevision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hintrevision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_wantNothingIfUpToDate;
        break;
      }

      // optional bool wantNothingIfUpToDate = 10;
      case 10: {
        if (tag == 80) {
         parse_wantNothingIfUpToDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantnothingifuptodate_)));
          set_has_wantnothingifuptodate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_wantResolveAction;
        break;
      }

      // optional bool wantResolveAction = 12;
      case 12: {
        if (tag == 96) {
         parse_wantResolveAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wantresolveaction_)));
          set_has_wantresolveaction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_issues;
        break;
      }

      // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
      case 13: {
        if (tag == 106) {
         parse_issues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_issues()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_issues;
        if (input->ExpectTag(114)) goto parse_resolveAction;
        break;
      }

      // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 14;
      case 14: {
        if (tag == 114) {
         parse_resolveAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolveaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_resolveAction;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ListContentSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ListContentSelection)
  return false;
#undef DO_
}

void ListContentSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ListContentSelection)
  // optional bool wantRevision = 1;
  if (has_wantrevision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wantrevision(), output);
  }

  // optional bool wantLength = 2;
  if (has_wantlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->wantlength(), output);
  }

  // optional bool wantAttributes = 3;
  if (has_wantattributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wantattributes(), output);
  }

  // optional bool wantChecksum = 4;
  if (has_wantchecksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->wantchecksum(), output);
  }

  // optional bool wantContent = 5;
  if (has_wantcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->wantcontent(), output);
  }

  // optional .spotify.playlist4.proto.ContentRange contentRange = 6;
  if (has_contentrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->contentrange(), output);
  }

  // optional bool wantDiff = 7;
  if (has_wantdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->wantdiff(), output);
  }

  // optional bytes baseRevision = 8;
  if (has_baserevision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->baserevision(), output);
  }

  // optional bytes hintRevision = 9;
  if (has_hintrevision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->hintrevision(), output);
  }

  // optional bool wantNothingIfUpToDate = 10;
  if (has_wantnothingifuptodate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->wantnothingifuptodate(), output);
  }

  // optional bool wantResolveAction = 12;
  if (has_wantresolveaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->wantresolveaction(), output);
  }

  // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
  for (int i = 0; i < this->issues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->issues(i), output);
  }

  // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 14;
  for (int i = 0; i < this->resolveaction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->resolveaction(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ListContentSelection)
}

::google::protobuf::uint8* ListContentSelection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ListContentSelection)
  // optional bool wantRevision = 1;
  if (has_wantrevision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wantrevision(), target);
  }

  // optional bool wantLength = 2;
  if (has_wantlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->wantlength(), target);
  }

  // optional bool wantAttributes = 3;
  if (has_wantattributes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wantattributes(), target);
  }

  // optional bool wantChecksum = 4;
  if (has_wantchecksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->wantchecksum(), target);
  }

  // optional bool wantContent = 5;
  if (has_wantcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->wantcontent(), target);
  }

  // optional .spotify.playlist4.proto.ContentRange contentRange = 6;
  if (has_contentrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->contentrange(), target);
  }

  // optional bool wantDiff = 7;
  if (has_wantdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->wantdiff(), target);
  }

  // optional bytes baseRevision = 8;
  if (has_baserevision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->baserevision(), target);
  }

  // optional bytes hintRevision = 9;
  if (has_hintrevision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->hintrevision(), target);
  }

  // optional bool wantNothingIfUpToDate = 10;
  if (has_wantnothingifuptodate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->wantnothingifuptodate(), target);
  }

  // optional bool wantResolveAction = 12;
  if (has_wantresolveaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->wantresolveaction(), target);
  }

  // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
  for (int i = 0; i < this->issues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->issues(i), target);
  }

  // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 14;
  for (int i = 0; i < this->resolveaction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->resolveaction(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ListContentSelection)
  return target;
}

int ListContentSelection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool wantRevision = 1;
    if (has_wantrevision()) {
      total_size += 1 + 1;
    }

    // optional bool wantLength = 2;
    if (has_wantlength()) {
      total_size += 1 + 1;
    }

    // optional bool wantAttributes = 3;
    if (has_wantattributes()) {
      total_size += 1 + 1;
    }

    // optional bool wantChecksum = 4;
    if (has_wantchecksum()) {
      total_size += 1 + 1;
    }

    // optional bool wantContent = 5;
    if (has_wantcontent()) {
      total_size += 1 + 1;
    }

    // optional .spotify.playlist4.proto.ContentRange contentRange = 6;
    if (has_contentrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contentrange());
    }

    // optional bool wantDiff = 7;
    if (has_wantdiff()) {
      total_size += 1 + 1;
    }

    // optional bytes baseRevision = 8;
    if (has_baserevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->baserevision());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes hintRevision = 9;
    if (has_hintrevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hintrevision());
    }

    // optional bool wantNothingIfUpToDate = 10;
    if (has_wantnothingifuptodate()) {
      total_size += 1 + 1;
    }

    // optional bool wantResolveAction = 12;
    if (has_wantresolveaction()) {
      total_size += 1 + 1;
    }

  }
  // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
  total_size += 1 * this->issues_size();
  for (int i = 0; i < this->issues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->issues(i));
  }

  // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 14;
  total_size += 1 * this->resolveaction_size();
  for (int i = 0; i < this->resolveaction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolveaction(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListContentSelection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListContentSelection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListContentSelection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListContentSelection::MergeFrom(const ListContentSelection& from) {
  GOOGLE_CHECK_NE(&from, this);
  issues_.MergeFrom(from.issues_);
  resolveaction_.MergeFrom(from.resolveaction_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wantrevision()) {
      set_wantrevision(from.wantrevision());
    }
    if (from.has_wantlength()) {
      set_wantlength(from.wantlength());
    }
    if (from.has_wantattributes()) {
      set_wantattributes(from.wantattributes());
    }
    if (from.has_wantchecksum()) {
      set_wantchecksum(from.wantchecksum());
    }
    if (from.has_wantcontent()) {
      set_wantcontent(from.wantcontent());
    }
    if (from.has_contentrange()) {
      mutable_contentrange()->::spotify::playlist4::proto::ContentRange::MergeFrom(from.contentrange());
    }
    if (from.has_wantdiff()) {
      set_wantdiff(from.wantdiff());
    }
    if (from.has_baserevision()) {
      set_baserevision(from.baserevision());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hintrevision()) {
      set_hintrevision(from.hintrevision());
    }
    if (from.has_wantnothingifuptodate()) {
      set_wantnothingifuptodate(from.wantnothingifuptodate());
    }
    if (from.has_wantresolveaction()) {
      set_wantresolveaction(from.wantresolveaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListContentSelection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListContentSelection::CopyFrom(const ListContentSelection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListContentSelection::IsInitialized() const {

  if (has_contentrange()) {
    if (!this->contentrange().IsInitialized()) return false;
  }
  return true;
}

void ListContentSelection::Swap(ListContentSelection* other) {
  if (other != this) {
    std::swap(wantrevision_, other->wantrevision_);
    std::swap(wantlength_, other->wantlength_);
    std::swap(wantattributes_, other->wantattributes_);
    std::swap(wantchecksum_, other->wantchecksum_);
    std::swap(wantcontent_, other->wantcontent_);
    std::swap(contentrange_, other->contentrange_);
    std::swap(wantdiff_, other->wantdiff_);
    std::swap(baserevision_, other->baserevision_);
    std::swap(hintrevision_, other->hintrevision_);
    std::swap(wantnothingifuptodate_, other->wantnothingifuptodate_);
    std::swap(wantresolveaction_, other->wantresolveaction_);
    issues_.Swap(&other->issues_);
    resolveaction_.Swap(&other->resolveaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListContentSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListContentSelection_descriptor_;
  metadata.reflection = ListContentSelection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

// @@protoc_insertion_point(global_scope)
