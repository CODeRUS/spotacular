// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4content.proto

#ifndef PROTOBUF_playlist4content_2eproto__INCLUDED
#define PROTOBUF_playlist4content_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "playlist4meta.pb.h"
#include "playlist4issues.pb.h"
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playlist4content_2eproto();
void protobuf_AssignDesc_playlist4content_2eproto();
void protobuf_ShutdownFile_playlist4content_2eproto();

class Item;
class ListItems;
class ContentRange;
class ListContentSelection;

// ===================================================================

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional .spotify.playlist4.proto.ItemAttributes attributes = 2;
  inline bool has_attributes() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  inline const ::spotify::playlist4::proto::ItemAttributes& attributes() const;
  inline ::spotify::playlist4::proto::ItemAttributes* mutable_attributes();
  inline ::spotify::playlist4::proto::ItemAttributes* release_attributes();
  inline void set_allocated_attributes(::spotify::playlist4::proto::ItemAttributes* attributes);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Item)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_attributes();
  inline void clear_has_attributes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::spotify::playlist4::proto::ItemAttributes* attributes_;
  friend void  protobuf_AddDesc_playlist4content_2eproto();
  friend void protobuf_AssignDesc_playlist4content_2eproto();
  friend void protobuf_ShutdownFile_playlist4content_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class ListItems : public ::google::protobuf::Message {
 public:
  ListItems();
  virtual ~ListItems();

  ListItems(const ListItems& from);

  inline ListItems& operator=(const ListItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListItems& default_instance();

  void Swap(ListItems* other);

  // implements Message ----------------------------------------------

  ListItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListItems& from);
  void MergeFrom(const ListItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // required bool truncated = 2;
  inline bool has_truncated() const;
  inline void clear_truncated();
  static const int kTruncatedFieldNumber = 2;
  inline bool truncated() const;
  inline void set_truncated(bool value);

  // repeated .spotify.playlist4.proto.Item items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::spotify::playlist4::proto::Item& items(int index) const;
  inline ::spotify::playlist4::proto::Item* mutable_items(int index);
  inline ::spotify::playlist4::proto::Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ListItems)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_truncated();
  inline void clear_has_truncated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pos_;
  bool truncated_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item > items_;
  friend void  protobuf_AddDesc_playlist4content_2eproto();
  friend void protobuf_AssignDesc_playlist4content_2eproto();
  friend void protobuf_ShutdownFile_playlist4content_2eproto();

  void InitAsDefaultInstance();
  static ListItems* default_instance_;
};
// -------------------------------------------------------------------

class ContentRange : public ::google::protobuf::Message {
 public:
  ContentRange();
  virtual ~ContentRange();

  ContentRange(const ContentRange& from);

  inline ContentRange& operator=(const ContentRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentRange& default_instance();

  void Swap(ContentRange* other);

  // implements Message ----------------------------------------------

  ContentRange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentRange& from);
  void MergeFrom(const ContentRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ContentRange)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 length_;
  friend void  protobuf_AddDesc_playlist4content_2eproto();
  friend void protobuf_AssignDesc_playlist4content_2eproto();
  friend void protobuf_ShutdownFile_playlist4content_2eproto();

  void InitAsDefaultInstance();
  static ContentRange* default_instance_;
};
// -------------------------------------------------------------------

class ListContentSelection : public ::google::protobuf::Message {
 public:
  ListContentSelection();
  virtual ~ListContentSelection();

  ListContentSelection(const ListContentSelection& from);

  inline ListContentSelection& operator=(const ListContentSelection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListContentSelection& default_instance();

  void Swap(ListContentSelection* other);

  // implements Message ----------------------------------------------

  ListContentSelection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListContentSelection& from);
  void MergeFrom(const ListContentSelection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool wantRevision = 1;
  inline bool has_wantrevision() const;
  inline void clear_wantrevision();
  static const int kWantRevisionFieldNumber = 1;
  inline bool wantrevision() const;
  inline void set_wantrevision(bool value);

  // optional bool wantLength = 2;
  inline bool has_wantlength() const;
  inline void clear_wantlength();
  static const int kWantLengthFieldNumber = 2;
  inline bool wantlength() const;
  inline void set_wantlength(bool value);

  // optional bool wantAttributes = 3;
  inline bool has_wantattributes() const;
  inline void clear_wantattributes();
  static const int kWantAttributesFieldNumber = 3;
  inline bool wantattributes() const;
  inline void set_wantattributes(bool value);

  // optional bool wantChecksum = 4;
  inline bool has_wantchecksum() const;
  inline void clear_wantchecksum();
  static const int kWantChecksumFieldNumber = 4;
  inline bool wantchecksum() const;
  inline void set_wantchecksum(bool value);

  // optional bool wantContent = 5;
  inline bool has_wantcontent() const;
  inline void clear_wantcontent();
  static const int kWantContentFieldNumber = 5;
  inline bool wantcontent() const;
  inline void set_wantcontent(bool value);

  // optional .spotify.playlist4.proto.ContentRange contentRange = 6;
  inline bool has_contentrange() const;
  inline void clear_contentrange();
  static const int kContentRangeFieldNumber = 6;
  inline const ::spotify::playlist4::proto::ContentRange& contentrange() const;
  inline ::spotify::playlist4::proto::ContentRange* mutable_contentrange();
  inline ::spotify::playlist4::proto::ContentRange* release_contentrange();
  inline void set_allocated_contentrange(::spotify::playlist4::proto::ContentRange* contentrange);

  // optional bool wantDiff = 7;
  inline bool has_wantdiff() const;
  inline void clear_wantdiff();
  static const int kWantDiffFieldNumber = 7;
  inline bool wantdiff() const;
  inline void set_wantdiff(bool value);

  // optional bytes baseRevision = 8;
  inline bool has_baserevision() const;
  inline void clear_baserevision();
  static const int kBaseRevisionFieldNumber = 8;
  inline const ::std::string& baserevision() const;
  inline void set_baserevision(const ::std::string& value);
  inline void set_baserevision(const char* value);
  inline void set_baserevision(const void* value, size_t size);
  inline ::std::string* mutable_baserevision();
  inline ::std::string* release_baserevision();
  inline void set_allocated_baserevision(::std::string* baserevision);

  // optional bytes hintRevision = 9;
  inline bool has_hintrevision() const;
  inline void clear_hintrevision();
  static const int kHintRevisionFieldNumber = 9;
  inline const ::std::string& hintrevision() const;
  inline void set_hintrevision(const ::std::string& value);
  inline void set_hintrevision(const char* value);
  inline void set_hintrevision(const void* value, size_t size);
  inline ::std::string* mutable_hintrevision();
  inline ::std::string* release_hintrevision();
  inline void set_allocated_hintrevision(::std::string* hintrevision);

  // optional bool wantNothingIfUpToDate = 10;
  inline bool has_wantnothingifuptodate() const;
  inline void clear_wantnothingifuptodate();
  static const int kWantNothingIfUpToDateFieldNumber = 10;
  inline bool wantnothingifuptodate() const;
  inline void set_wantnothingifuptodate(bool value);

  // optional bool wantResolveAction = 12;
  inline bool has_wantresolveaction() const;
  inline void clear_wantresolveaction();
  static const int kWantResolveActionFieldNumber = 12;
  inline bool wantresolveaction() const;
  inline void set_wantresolveaction(bool value);

  // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
  inline int issues_size() const;
  inline void clear_issues();
  static const int kIssuesFieldNumber = 13;
  inline const ::spotify::playlist4::proto::ClientIssue& issues(int index) const;
  inline ::spotify::playlist4::proto::ClientIssue* mutable_issues(int index);
  inline ::spotify::playlist4::proto::ClientIssue* add_issues();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue >&
      issues() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue >*
      mutable_issues();

  // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 14;
  inline int resolveaction_size() const;
  inline void clear_resolveaction();
  static const int kResolveActionFieldNumber = 14;
  inline const ::spotify::playlist4::proto::ClientResolveAction& resolveaction(int index) const;
  inline ::spotify::playlist4::proto::ClientResolveAction* mutable_resolveaction(int index);
  inline ::spotify::playlist4::proto::ClientResolveAction* add_resolveaction();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction >&
      resolveaction() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction >*
      mutable_resolveaction();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ListContentSelection)
 private:
  inline void set_has_wantrevision();
  inline void clear_has_wantrevision();
  inline void set_has_wantlength();
  inline void clear_has_wantlength();
  inline void set_has_wantattributes();
  inline void clear_has_wantattributes();
  inline void set_has_wantchecksum();
  inline void clear_has_wantchecksum();
  inline void set_has_wantcontent();
  inline void clear_has_wantcontent();
  inline void set_has_contentrange();
  inline void clear_has_contentrange();
  inline void set_has_wantdiff();
  inline void clear_has_wantdiff();
  inline void set_has_baserevision();
  inline void clear_has_baserevision();
  inline void set_has_hintrevision();
  inline void clear_has_hintrevision();
  inline void set_has_wantnothingifuptodate();
  inline void clear_has_wantnothingifuptodate();
  inline void set_has_wantresolveaction();
  inline void clear_has_wantresolveaction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool wantrevision_;
  bool wantlength_;
  bool wantattributes_;
  bool wantchecksum_;
  bool wantcontent_;
  bool wantdiff_;
  bool wantnothingifuptodate_;
  bool wantresolveaction_;
  ::spotify::playlist4::proto::ContentRange* contentrange_;
  ::std::string* baserevision_;
  ::std::string* hintrevision_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue > issues_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction > resolveaction_;
  friend void  protobuf_AddDesc_playlist4content_2eproto();
  friend void protobuf_AssignDesc_playlist4content_2eproto();
  friend void protobuf_ShutdownFile_playlist4content_2eproto();

  void InitAsDefaultInstance();
  static ListContentSelection* default_instance_;
};
// ===================================================================


// ===================================================================

// Item

// required string uri = 1;
inline bool Item::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& Item::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Item.uri)
  return *uri_;
}
inline void Item::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Item.uri)
}
inline void Item::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Item.uri)
}
inline void Item::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Item.uri)
}
inline ::std::string* Item::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Item.uri)
  return uri_;
}
inline ::std::string* Item::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Item::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Item.uri)
}

// optional .spotify.playlist4.proto.ItemAttributes attributes = 2;
inline bool Item::has_attributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item::set_has_attributes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item::clear_attributes() {
  if (attributes_ != NULL) attributes_->::spotify::playlist4::proto::ItemAttributes::Clear();
  clear_has_attributes();
}
inline const ::spotify::playlist4::proto::ItemAttributes& Item::attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Item.attributes)
  return attributes_ != NULL ? *attributes_ : *default_instance_->attributes_;
}
inline ::spotify::playlist4::proto::ItemAttributes* Item::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) attributes_ = new ::spotify::playlist4::proto::ItemAttributes;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Item.attributes)
  return attributes_;
}
inline ::spotify::playlist4::proto::ItemAttributes* Item::release_attributes() {
  clear_has_attributes();
  ::spotify::playlist4::proto::ItemAttributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void Item::set_allocated_attributes(::spotify::playlist4::proto::ItemAttributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Item.attributes)
}

// -------------------------------------------------------------------

// ListItems

// required int32 pos = 1;
inline bool ListItems::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListItems::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListItems::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListItems::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 ListItems::pos() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListItems.pos)
  return pos_;
}
inline void ListItems::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListItems.pos)
}

// required bool truncated = 2;
inline bool ListItems::has_truncated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListItems::set_has_truncated() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListItems::clear_has_truncated() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListItems::clear_truncated() {
  truncated_ = false;
  clear_has_truncated();
}
inline bool ListItems::truncated() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListItems.truncated)
  return truncated_;
}
inline void ListItems::set_truncated(bool value) {
  set_has_truncated();
  truncated_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListItems.truncated)
}

// repeated .spotify.playlist4.proto.Item items = 3;
inline int ListItems::items_size() const {
  return items_.size();
}
inline void ListItems::clear_items() {
  items_.Clear();
}
inline const ::spotify::playlist4::proto::Item& ListItems::items(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListItems.items)
  return items_.Get(index);
}
inline ::spotify::playlist4::proto::Item* ListItems::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListItems.items)
  return items_.Mutable(index);
}
inline ::spotify::playlist4::proto::Item* ListItems::add_items() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.ListItems.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >&
ListItems::items() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.ListItems.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Item >*
ListItems::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.ListItems.items)
  return &items_;
}

// -------------------------------------------------------------------

// ContentRange

// required int32 pos = 1;
inline bool ContentRange::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentRange::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentRange::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentRange::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 ContentRange::pos() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ContentRange.pos)
  return pos_;
}
inline void ContentRange::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ContentRange.pos)
}

// optional int32 length = 2;
inline bool ContentRange::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentRange::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentRange::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentRange::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 ContentRange::length() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ContentRange.length)
  return length_;
}
inline void ContentRange::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ContentRange.length)
}

// -------------------------------------------------------------------

// ListContentSelection

// optional bool wantRevision = 1;
inline bool ListContentSelection::has_wantrevision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListContentSelection::set_has_wantrevision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListContentSelection::clear_has_wantrevision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListContentSelection::clear_wantrevision() {
  wantrevision_ = false;
  clear_has_wantrevision();
}
inline bool ListContentSelection::wantrevision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.wantRevision)
  return wantrevision_;
}
inline void ListContentSelection::set_wantrevision(bool value) {
  set_has_wantrevision();
  wantrevision_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.wantRevision)
}

// optional bool wantLength = 2;
inline bool ListContentSelection::has_wantlength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListContentSelection::set_has_wantlength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListContentSelection::clear_has_wantlength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListContentSelection::clear_wantlength() {
  wantlength_ = false;
  clear_has_wantlength();
}
inline bool ListContentSelection::wantlength() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.wantLength)
  return wantlength_;
}
inline void ListContentSelection::set_wantlength(bool value) {
  set_has_wantlength();
  wantlength_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.wantLength)
}

// optional bool wantAttributes = 3;
inline bool ListContentSelection::has_wantattributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListContentSelection::set_has_wantattributes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListContentSelection::clear_has_wantattributes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListContentSelection::clear_wantattributes() {
  wantattributes_ = false;
  clear_has_wantattributes();
}
inline bool ListContentSelection::wantattributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.wantAttributes)
  return wantattributes_;
}
inline void ListContentSelection::set_wantattributes(bool value) {
  set_has_wantattributes();
  wantattributes_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.wantAttributes)
}

// optional bool wantChecksum = 4;
inline bool ListContentSelection::has_wantchecksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListContentSelection::set_has_wantchecksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListContentSelection::clear_has_wantchecksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListContentSelection::clear_wantchecksum() {
  wantchecksum_ = false;
  clear_has_wantchecksum();
}
inline bool ListContentSelection::wantchecksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.wantChecksum)
  return wantchecksum_;
}
inline void ListContentSelection::set_wantchecksum(bool value) {
  set_has_wantchecksum();
  wantchecksum_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.wantChecksum)
}

// optional bool wantContent = 5;
inline bool ListContentSelection::has_wantcontent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListContentSelection::set_has_wantcontent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListContentSelection::clear_has_wantcontent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListContentSelection::clear_wantcontent() {
  wantcontent_ = false;
  clear_has_wantcontent();
}
inline bool ListContentSelection::wantcontent() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.wantContent)
  return wantcontent_;
}
inline void ListContentSelection::set_wantcontent(bool value) {
  set_has_wantcontent();
  wantcontent_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.wantContent)
}

// optional .spotify.playlist4.proto.ContentRange contentRange = 6;
inline bool ListContentSelection::has_contentrange() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ListContentSelection::set_has_contentrange() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ListContentSelection::clear_has_contentrange() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ListContentSelection::clear_contentrange() {
  if (contentrange_ != NULL) contentrange_->::spotify::playlist4::proto::ContentRange::Clear();
  clear_has_contentrange();
}
inline const ::spotify::playlist4::proto::ContentRange& ListContentSelection::contentrange() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.contentRange)
  return contentrange_ != NULL ? *contentrange_ : *default_instance_->contentrange_;
}
inline ::spotify::playlist4::proto::ContentRange* ListContentSelection::mutable_contentrange() {
  set_has_contentrange();
  if (contentrange_ == NULL) contentrange_ = new ::spotify::playlist4::proto::ContentRange;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListContentSelection.contentRange)
  return contentrange_;
}
inline ::spotify::playlist4::proto::ContentRange* ListContentSelection::release_contentrange() {
  clear_has_contentrange();
  ::spotify::playlist4::proto::ContentRange* temp = contentrange_;
  contentrange_ = NULL;
  return temp;
}
inline void ListContentSelection::set_allocated_contentrange(::spotify::playlist4::proto::ContentRange* contentrange) {
  delete contentrange_;
  contentrange_ = contentrange;
  if (contentrange) {
    set_has_contentrange();
  } else {
    clear_has_contentrange();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListContentSelection.contentRange)
}

// optional bool wantDiff = 7;
inline bool ListContentSelection::has_wantdiff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ListContentSelection::set_has_wantdiff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ListContentSelection::clear_has_wantdiff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ListContentSelection::clear_wantdiff() {
  wantdiff_ = false;
  clear_has_wantdiff();
}
inline bool ListContentSelection::wantdiff() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.wantDiff)
  return wantdiff_;
}
inline void ListContentSelection::set_wantdiff(bool value) {
  set_has_wantdiff();
  wantdiff_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.wantDiff)
}

// optional bytes baseRevision = 8;
inline bool ListContentSelection::has_baserevision() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ListContentSelection::set_has_baserevision() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ListContentSelection::clear_has_baserevision() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ListContentSelection::clear_baserevision() {
  if (baserevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_->clear();
  }
  clear_has_baserevision();
}
inline const ::std::string& ListContentSelection::baserevision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.baseRevision)
  return *baserevision_;
}
inline void ListContentSelection::set_baserevision(const ::std::string& value) {
  set_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_ = new ::std::string;
  }
  baserevision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.baseRevision)
}
inline void ListContentSelection::set_baserevision(const char* value) {
  set_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_ = new ::std::string;
  }
  baserevision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListContentSelection.baseRevision)
}
inline void ListContentSelection::set_baserevision(const void* value, size_t size) {
  set_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_ = new ::std::string;
  }
  baserevision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListContentSelection.baseRevision)
}
inline ::std::string* ListContentSelection::mutable_baserevision() {
  set_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListContentSelection.baseRevision)
  return baserevision_;
}
inline ::std::string* ListContentSelection::release_baserevision() {
  clear_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = baserevision_;
    baserevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListContentSelection::set_allocated_baserevision(::std::string* baserevision) {
  if (baserevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baserevision_;
  }
  if (baserevision) {
    set_has_baserevision();
    baserevision_ = baserevision;
  } else {
    clear_has_baserevision();
    baserevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListContentSelection.baseRevision)
}

// optional bytes hintRevision = 9;
inline bool ListContentSelection::has_hintrevision() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ListContentSelection::set_has_hintrevision() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ListContentSelection::clear_has_hintrevision() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ListContentSelection::clear_hintrevision() {
  if (hintrevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hintrevision_->clear();
  }
  clear_has_hintrevision();
}
inline const ::std::string& ListContentSelection::hintrevision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.hintRevision)
  return *hintrevision_;
}
inline void ListContentSelection::set_hintrevision(const ::std::string& value) {
  set_has_hintrevision();
  if (hintrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hintrevision_ = new ::std::string;
  }
  hintrevision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.hintRevision)
}
inline void ListContentSelection::set_hintrevision(const char* value) {
  set_has_hintrevision();
  if (hintrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hintrevision_ = new ::std::string;
  }
  hintrevision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListContentSelection.hintRevision)
}
inline void ListContentSelection::set_hintrevision(const void* value, size_t size) {
  set_has_hintrevision();
  if (hintrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hintrevision_ = new ::std::string;
  }
  hintrevision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListContentSelection.hintRevision)
}
inline ::std::string* ListContentSelection::mutable_hintrevision() {
  set_has_hintrevision();
  if (hintrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hintrevision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListContentSelection.hintRevision)
  return hintrevision_;
}
inline ::std::string* ListContentSelection::release_hintrevision() {
  clear_has_hintrevision();
  if (hintrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hintrevision_;
    hintrevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListContentSelection::set_allocated_hintrevision(::std::string* hintrevision) {
  if (hintrevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hintrevision_;
  }
  if (hintrevision) {
    set_has_hintrevision();
    hintrevision_ = hintrevision;
  } else {
    clear_has_hintrevision();
    hintrevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListContentSelection.hintRevision)
}

// optional bool wantNothingIfUpToDate = 10;
inline bool ListContentSelection::has_wantnothingifuptodate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ListContentSelection::set_has_wantnothingifuptodate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ListContentSelection::clear_has_wantnothingifuptodate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ListContentSelection::clear_wantnothingifuptodate() {
  wantnothingifuptodate_ = false;
  clear_has_wantnothingifuptodate();
}
inline bool ListContentSelection::wantnothingifuptodate() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.wantNothingIfUpToDate)
  return wantnothingifuptodate_;
}
inline void ListContentSelection::set_wantnothingifuptodate(bool value) {
  set_has_wantnothingifuptodate();
  wantnothingifuptodate_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.wantNothingIfUpToDate)
}

// optional bool wantResolveAction = 12;
inline bool ListContentSelection::has_wantresolveaction() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ListContentSelection::set_has_wantresolveaction() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ListContentSelection::clear_has_wantresolveaction() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ListContentSelection::clear_wantresolveaction() {
  wantresolveaction_ = false;
  clear_has_wantresolveaction();
}
inline bool ListContentSelection::wantresolveaction() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.wantResolveAction)
  return wantresolveaction_;
}
inline void ListContentSelection::set_wantresolveaction(bool value) {
  set_has_wantresolveaction();
  wantresolveaction_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListContentSelection.wantResolveAction)
}

// repeated .spotify.playlist4.proto.ClientIssue issues = 13;
inline int ListContentSelection::issues_size() const {
  return issues_.size();
}
inline void ListContentSelection::clear_issues() {
  issues_.Clear();
}
inline const ::spotify::playlist4::proto::ClientIssue& ListContentSelection::issues(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.issues)
  return issues_.Get(index);
}
inline ::spotify::playlist4::proto::ClientIssue* ListContentSelection::mutable_issues(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListContentSelection.issues)
  return issues_.Mutable(index);
}
inline ::spotify::playlist4::proto::ClientIssue* ListContentSelection::add_issues() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.ListContentSelection.issues)
  return issues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue >&
ListContentSelection::issues() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.ListContentSelection.issues)
  return issues_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue >*
ListContentSelection::mutable_issues() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.ListContentSelection.issues)
  return &issues_;
}

// repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 14;
inline int ListContentSelection::resolveaction_size() const {
  return resolveaction_.size();
}
inline void ListContentSelection::clear_resolveaction() {
  resolveaction_.Clear();
}
inline const ::spotify::playlist4::proto::ClientResolveAction& ListContentSelection::resolveaction(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListContentSelection.resolveAction)
  return resolveaction_.Get(index);
}
inline ::spotify::playlist4::proto::ClientResolveAction* ListContentSelection::mutable_resolveaction(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListContentSelection.resolveAction)
  return resolveaction_.Mutable(index);
}
inline ::spotify::playlist4::proto::ClientResolveAction* ListContentSelection::add_resolveaction() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.ListContentSelection.resolveAction)
  return resolveaction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction >&
ListContentSelection::resolveaction() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.ListContentSelection.resolveAction)
  return resolveaction_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction >*
ListContentSelection::mutable_resolveaction() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.ListContentSelection.resolveAction)
  return &resolveaction_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playlist4content_2eproto__INCLUDED
