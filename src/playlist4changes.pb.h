// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4changes.proto

#ifndef PROTOBUF_playlist4changes_2eproto__INCLUDED
#define PROTOBUF_playlist4changes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "playlist4content.pb.h"
#include "playlist4issues.pb.h"
#include "playlist4meta.pb.h"
#include "playlist4ops.pb.h"
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playlist4changes_2eproto();
void protobuf_AssignDesc_playlist4changes_2eproto();
void protobuf_ShutdownFile_playlist4changes_2eproto();

class ChangeInfo;
class Delta;
class Merge;
class ChangeSet;
class RevisionTaggedChangeSet;
class Diff;
class ListDump;
class ListChanges;
class SelectedListContent;

enum ChangeSet_Kind {
  ChangeSet_Kind_KIND_UNKNOWN = 0,
  ChangeSet_Kind_DELTA = 2,
  ChangeSet_Kind_MERGE = 3
};
bool ChangeSet_Kind_IsValid(int value);
const ChangeSet_Kind ChangeSet_Kind_Kind_MIN = ChangeSet_Kind_KIND_UNKNOWN;
const ChangeSet_Kind ChangeSet_Kind_Kind_MAX = ChangeSet_Kind_MERGE;
const int ChangeSet_Kind_Kind_ARRAYSIZE = ChangeSet_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeSet_Kind_descriptor();
inline const ::std::string& ChangeSet_Kind_Name(ChangeSet_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeSet_Kind_descriptor(), value);
}
inline bool ChangeSet_Kind_Parse(
    const ::std::string& name, ChangeSet_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeSet_Kind>(
    ChangeSet_Kind_descriptor(), name, value);
}
// ===================================================================

class ChangeInfo : public ::google::protobuf::Message {
 public:
  ChangeInfo();
  virtual ~ChangeInfo();

  ChangeInfo(const ChangeInfo& from);

  inline ChangeInfo& operator=(const ChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeInfo& default_instance();

  void Swap(ChangeInfo* other);

  // implements Message ----------------------------------------------

  ChangeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeInfo& from);
  void MergeFrom(const ChangeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional int32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional bool admin = 3;
  inline bool has_admin() const;
  inline void clear_admin();
  static const int kAdminFieldNumber = 3;
  inline bool admin() const;
  inline void set_admin(bool value);

  // optional bool undo = 4;
  inline bool has_undo() const;
  inline void clear_undo();
  static const int kUndoFieldNumber = 4;
  inline bool undo() const;
  inline void set_undo(bool value);

  // optional bool redo = 5;
  inline bool has_redo() const;
  inline void clear_redo();
  static const int kRedoFieldNumber = 5;
  inline bool redo() const;
  inline void set_redo(bool value);

  // optional bool merge = 6;
  inline bool has_merge() const;
  inline void clear_merge();
  static const int kMergeFieldNumber = 6;
  inline bool merge() const;
  inline void set_merge(bool value);

  // optional bool compressed = 7;
  inline bool has_compressed() const;
  inline void clear_compressed();
  static const int kCompressedFieldNumber = 7;
  inline bool compressed() const;
  inline void set_compressed(bool value);

  // optional bool migration = 8;
  inline bool has_migration() const;
  inline void clear_migration();
  static const int kMigrationFieldNumber = 8;
  inline bool migration() const;
  inline void set_migration(bool value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ChangeInfo)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_admin();
  inline void clear_has_admin();
  inline void set_has_undo();
  inline void clear_has_undo();
  inline void set_has_redo();
  inline void clear_has_redo();
  inline void set_has_merge();
  inline void clear_has_merge();
  inline void set_has_compressed();
  inline void clear_has_compressed();
  inline void set_has_migration();
  inline void clear_has_migration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_;
  ::google::protobuf::int32 timestamp_;
  bool admin_;
  bool undo_;
  bool redo_;
  bool merge_;
  bool compressed_;
  bool migration_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static ChangeInfo* default_instance_;
};
// -------------------------------------------------------------------

class Delta : public ::google::protobuf::Message {
 public:
  Delta();
  virtual ~Delta();

  Delta(const Delta& from);

  inline Delta& operator=(const Delta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Delta& default_instance();

  void Swap(Delta* other);

  // implements Message ----------------------------------------------

  Delta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Delta& from);
  void MergeFrom(const Delta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes base_version = 1;
  inline bool has_base_version() const;
  inline void clear_base_version();
  static const int kBaseVersionFieldNumber = 1;
  inline const ::std::string& base_version() const;
  inline void set_base_version(const ::std::string& value);
  inline void set_base_version(const char* value);
  inline void set_base_version(const void* value, size_t size);
  inline ::std::string* mutable_base_version();
  inline ::std::string* release_base_version();
  inline void set_allocated_base_version(::std::string* base_version);

  // repeated .spotify.playlist4.proto.Op ops = 2;
  inline int ops_size() const;
  inline void clear_ops();
  static const int kOpsFieldNumber = 2;
  inline const ::spotify::playlist4::proto::Op& ops(int index) const;
  inline ::spotify::playlist4::proto::Op* mutable_ops(int index);
  inline ::spotify::playlist4::proto::Op* add_ops();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >&
      ops() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >*
      mutable_ops();

  // optional .spotify.playlist4.proto.ChangeInfo info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ChangeInfo& info() const;
  inline ::spotify::playlist4::proto::ChangeInfo* mutable_info();
  inline ::spotify::playlist4::proto::ChangeInfo* release_info();
  inline void set_allocated_info(::spotify::playlist4::proto::ChangeInfo* info);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Delta)
 private:
  inline void set_has_base_version();
  inline void clear_has_base_version();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* base_version_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op > ops_;
  ::spotify::playlist4::proto::ChangeInfo* info_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static Delta* default_instance_;
};
// -------------------------------------------------------------------

class Merge : public ::google::protobuf::Message {
 public:
  Merge();
  virtual ~Merge();

  Merge(const Merge& from);

  inline Merge& operator=(const Merge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Merge& default_instance();

  void Swap(Merge* other);

  // implements Message ----------------------------------------------

  Merge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Merge& from);
  void MergeFrom(const Merge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes base_version = 1;
  inline bool has_base_version() const;
  inline void clear_base_version();
  static const int kBaseVersionFieldNumber = 1;
  inline const ::std::string& base_version() const;
  inline void set_base_version(const ::std::string& value);
  inline void set_base_version(const char* value);
  inline void set_base_version(const void* value, size_t size);
  inline ::std::string* mutable_base_version();
  inline ::std::string* release_base_version();
  inline void set_allocated_base_version(::std::string* base_version);

  // optional bytes merge_version = 2;
  inline bool has_merge_version() const;
  inline void clear_merge_version();
  static const int kMergeVersionFieldNumber = 2;
  inline const ::std::string& merge_version() const;
  inline void set_merge_version(const ::std::string& value);
  inline void set_merge_version(const char* value);
  inline void set_merge_version(const void* value, size_t size);
  inline ::std::string* mutable_merge_version();
  inline ::std::string* release_merge_version();
  inline void set_allocated_merge_version(::std::string* merge_version);

  // optional .spotify.playlist4.proto.ChangeInfo info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ChangeInfo& info() const;
  inline ::spotify::playlist4::proto::ChangeInfo* mutable_info();
  inline ::spotify::playlist4::proto::ChangeInfo* release_info();
  inline void set_allocated_info(::spotify::playlist4::proto::ChangeInfo* info);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Merge)
 private:
  inline void set_has_base_version();
  inline void clear_has_base_version();
  inline void set_has_merge_version();
  inline void clear_has_merge_version();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* base_version_;
  ::std::string* merge_version_;
  ::spotify::playlist4::proto::ChangeInfo* info_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static Merge* default_instance_;
};
// -------------------------------------------------------------------

class ChangeSet : public ::google::protobuf::Message {
 public:
  ChangeSet();
  virtual ~ChangeSet();

  ChangeSet(const ChangeSet& from);

  inline ChangeSet& operator=(const ChangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeSet& default_instance();

  void Swap(ChangeSet* other);

  // implements Message ----------------------------------------------

  ChangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeSet& from);
  void MergeFrom(const ChangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChangeSet_Kind Kind;
  static const Kind KIND_UNKNOWN = ChangeSet_Kind_KIND_UNKNOWN;
  static const Kind DELTA = ChangeSet_Kind_DELTA;
  static const Kind MERGE = ChangeSet_Kind_MERGE;
  static inline bool Kind_IsValid(int value) {
    return ChangeSet_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    ChangeSet_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    ChangeSet_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    ChangeSet_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return ChangeSet_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return ChangeSet_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return ChangeSet_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .spotify.playlist4.proto.ChangeSet.Kind kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::spotify::playlist4::proto::ChangeSet_Kind kind() const;
  inline void set_kind(::spotify::playlist4::proto::ChangeSet_Kind value);

  // optional .spotify.playlist4.proto.Delta delta = 2;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 2;
  inline const ::spotify::playlist4::proto::Delta& delta() const;
  inline ::spotify::playlist4::proto::Delta* mutable_delta();
  inline ::spotify::playlist4::proto::Delta* release_delta();
  inline void set_allocated_delta(::spotify::playlist4::proto::Delta* delta);

  // optional .spotify.playlist4.proto.Merge merge = 3;
  inline bool has_merge() const;
  inline void clear_merge();
  static const int kMergeFieldNumber = 3;
  inline const ::spotify::playlist4::proto::Merge& merge() const;
  inline ::spotify::playlist4::proto::Merge* mutable_merge();
  inline ::spotify::playlist4::proto::Merge* release_merge();
  inline void set_allocated_merge(::spotify::playlist4::proto::Merge* merge);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ChangeSet)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_merge();
  inline void clear_has_merge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::Delta* delta_;
  ::spotify::playlist4::proto::Merge* merge_;
  int kind_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static ChangeSet* default_instance_;
};
// -------------------------------------------------------------------

class RevisionTaggedChangeSet : public ::google::protobuf::Message {
 public:
  RevisionTaggedChangeSet();
  virtual ~RevisionTaggedChangeSet();

  RevisionTaggedChangeSet(const RevisionTaggedChangeSet& from);

  inline RevisionTaggedChangeSet& operator=(const RevisionTaggedChangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevisionTaggedChangeSet& default_instance();

  void Swap(RevisionTaggedChangeSet* other);

  // implements Message ----------------------------------------------

  RevisionTaggedChangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RevisionTaggedChangeSet& from);
  void MergeFrom(const RevisionTaggedChangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes revision = 1;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 1;
  inline const ::std::string& revision() const;
  inline void set_revision(const ::std::string& value);
  inline void set_revision(const char* value);
  inline void set_revision(const void* value, size_t size);
  inline ::std::string* mutable_revision();
  inline ::std::string* release_revision();
  inline void set_allocated_revision(::std::string* revision);

  // required .spotify.playlist4.proto.ChangeSet change_set = 2;
  inline bool has_change_set() const;
  inline void clear_change_set();
  static const int kChangeSetFieldNumber = 2;
  inline const ::spotify::playlist4::proto::ChangeSet& change_set() const;
  inline ::spotify::playlist4::proto::ChangeSet* mutable_change_set();
  inline ::spotify::playlist4::proto::ChangeSet* release_change_set();
  inline void set_allocated_change_set(::spotify::playlist4::proto::ChangeSet* change_set);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.RevisionTaggedChangeSet)
 private:
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_change_set();
  inline void clear_has_change_set();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* revision_;
  ::spotify::playlist4::proto::ChangeSet* change_set_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static RevisionTaggedChangeSet* default_instance_;
};
// -------------------------------------------------------------------

class Diff : public ::google::protobuf::Message {
 public:
  Diff();
  virtual ~Diff();

  Diff(const Diff& from);

  inline Diff& operator=(const Diff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Diff& default_instance();

  void Swap(Diff* other);

  // implements Message ----------------------------------------------

  Diff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Diff& from);
  void MergeFrom(const Diff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes from_revision = 1;
  inline bool has_from_revision() const;
  inline void clear_from_revision();
  static const int kFromRevisionFieldNumber = 1;
  inline const ::std::string& from_revision() const;
  inline void set_from_revision(const ::std::string& value);
  inline void set_from_revision(const char* value);
  inline void set_from_revision(const void* value, size_t size);
  inline ::std::string* mutable_from_revision();
  inline ::std::string* release_from_revision();
  inline void set_allocated_from_revision(::std::string* from_revision);

  // repeated .spotify.playlist4.proto.Op ops = 2;
  inline int ops_size() const;
  inline void clear_ops();
  static const int kOpsFieldNumber = 2;
  inline const ::spotify::playlist4::proto::Op& ops(int index) const;
  inline ::spotify::playlist4::proto::Op* mutable_ops(int index);
  inline ::spotify::playlist4::proto::Op* add_ops();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >&
      ops() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >*
      mutable_ops();

  // required bytes to_revision = 3;
  inline bool has_to_revision() const;
  inline void clear_to_revision();
  static const int kToRevisionFieldNumber = 3;
  inline const ::std::string& to_revision() const;
  inline void set_to_revision(const ::std::string& value);
  inline void set_to_revision(const char* value);
  inline void set_to_revision(const void* value, size_t size);
  inline ::std::string* mutable_to_revision();
  inline ::std::string* release_to_revision();
  inline void set_allocated_to_revision(::std::string* to_revision);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Diff)
 private:
  inline void set_has_from_revision();
  inline void clear_has_from_revision();
  inline void set_has_to_revision();
  inline void clear_has_to_revision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* from_revision_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op > ops_;
  ::std::string* to_revision_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static Diff* default_instance_;
};
// -------------------------------------------------------------------

class ListDump : public ::google::protobuf::Message {
 public:
  ListDump();
  virtual ~ListDump();

  ListDump(const ListDump& from);

  inline ListDump& operator=(const ListDump& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDump& default_instance();

  void Swap(ListDump* other);

  // implements Message ----------------------------------------------

  ListDump* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListDump& from);
  void MergeFrom(const ListDump& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes latestRevision = 1;
  inline bool has_latestrevision() const;
  inline void clear_latestrevision();
  static const int kLatestRevisionFieldNumber = 1;
  inline const ::std::string& latestrevision() const;
  inline void set_latestrevision(const ::std::string& value);
  inline void set_latestrevision(const char* value);
  inline void set_latestrevision(const void* value, size_t size);
  inline ::std::string* mutable_latestrevision();
  inline ::std::string* release_latestrevision();
  inline void set_allocated_latestrevision(::std::string* latestrevision);

  // optional int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
  inline bool has_attributes() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  inline const ::spotify::playlist4::proto::ListAttributes& attributes() const;
  inline ::spotify::playlist4::proto::ListAttributes* mutable_attributes();
  inline ::spotify::playlist4::proto::ListAttributes* release_attributes();
  inline void set_allocated_attributes(::spotify::playlist4::proto::ListAttributes* attributes);

  // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ListChecksum& checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_checksum();
  inline void set_allocated_checksum(::spotify::playlist4::proto::ListChecksum* checksum);

  // optional .spotify.playlist4.proto.ListItems contents = 5;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 5;
  inline const ::spotify::playlist4::proto::ListItems& contents() const;
  inline ::spotify::playlist4::proto::ListItems* mutable_contents();
  inline ::spotify::playlist4::proto::ListItems* release_contents();
  inline void set_allocated_contents(::spotify::playlist4::proto::ListItems* contents);

  // repeated .spotify.playlist4.proto.Delta pendingDeltas = 7;
  inline int pendingdeltas_size() const;
  inline void clear_pendingdeltas();
  static const int kPendingDeltasFieldNumber = 7;
  inline const ::spotify::playlist4::proto::Delta& pendingdeltas(int index) const;
  inline ::spotify::playlist4::proto::Delta* mutable_pendingdeltas(int index);
  inline ::spotify::playlist4::proto::Delta* add_pendingdeltas();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta >&
      pendingdeltas() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta >*
      mutable_pendingdeltas();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ListDump)
 private:
  inline void set_has_latestrevision();
  inline void clear_has_latestrevision();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_attributes();
  inline void clear_has_attributes();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* latestrevision_;
  ::spotify::playlist4::proto::ListAttributes* attributes_;
  ::spotify::playlist4::proto::ListChecksum* checksum_;
  ::spotify::playlist4::proto::ListItems* contents_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta > pendingdeltas_;
  ::google::protobuf::int32 length_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static ListDump* default_instance_;
};
// -------------------------------------------------------------------

class ListChanges : public ::google::protobuf::Message {
 public:
  ListChanges();
  virtual ~ListChanges();

  ListChanges(const ListChanges& from);

  inline ListChanges& operator=(const ListChanges& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListChanges& default_instance();

  void Swap(ListChanges* other);

  // implements Message ----------------------------------------------

  ListChanges* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListChanges& from);
  void MergeFrom(const ListChanges& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes baseRevision = 1;
  inline bool has_baserevision() const;
  inline void clear_baserevision();
  static const int kBaseRevisionFieldNumber = 1;
  inline const ::std::string& baserevision() const;
  inline void set_baserevision(const ::std::string& value);
  inline void set_baserevision(const char* value);
  inline void set_baserevision(const void* value, size_t size);
  inline ::std::string* mutable_baserevision();
  inline ::std::string* release_baserevision();
  inline void set_allocated_baserevision(::std::string* baserevision);

  // repeated .spotify.playlist4.proto.Delta deltas = 2;
  inline int deltas_size() const;
  inline void clear_deltas();
  static const int kDeltasFieldNumber = 2;
  inline const ::spotify::playlist4::proto::Delta& deltas(int index) const;
  inline ::spotify::playlist4::proto::Delta* mutable_deltas(int index);
  inline ::spotify::playlist4::proto::Delta* add_deltas();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta >&
      deltas() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta >*
      mutable_deltas();

  // optional bool wantResultingRevisions = 3;
  inline bool has_wantresultingrevisions() const;
  inline void clear_wantresultingrevisions();
  static const int kWantResultingRevisionsFieldNumber = 3;
  inline bool wantresultingrevisions() const;
  inline void set_wantresultingrevisions(bool value);

  // optional bool wantSyncResult = 4;
  inline bool has_wantsyncresult() const;
  inline void clear_wantsyncresult();
  static const int kWantSyncResultFieldNumber = 4;
  inline bool wantsyncresult() const;
  inline void set_wantsyncresult(bool value);

  // optional .spotify.playlist4.proto.ListDump dump = 5;
  inline bool has_dump() const;
  inline void clear_dump();
  static const int kDumpFieldNumber = 5;
  inline const ::spotify::playlist4::proto::ListDump& dump() const;
  inline ::spotify::playlist4::proto::ListDump* mutable_dump();
  inline ::spotify::playlist4::proto::ListDump* release_dump();
  inline void set_allocated_dump(::spotify::playlist4::proto::ListDump* dump);

  // repeated int32 nonces = 6;
  inline int nonces_size() const;
  inline void clear_nonces();
  static const int kNoncesFieldNumber = 6;
  inline ::google::protobuf::int32 nonces(int index) const;
  inline void set_nonces(int index, ::google::protobuf::int32 value);
  inline void add_nonces(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nonces() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nonces();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ListChanges)
 private:
  inline void set_has_baserevision();
  inline void clear_has_baserevision();
  inline void set_has_wantresultingrevisions();
  inline void clear_has_wantresultingrevisions();
  inline void set_has_wantsyncresult();
  inline void clear_has_wantsyncresult();
  inline void set_has_dump();
  inline void clear_has_dump();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* baserevision_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta > deltas_;
  ::spotify::playlist4::proto::ListDump* dump_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nonces_;
  bool wantresultingrevisions_;
  bool wantsyncresult_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static ListChanges* default_instance_;
};
// -------------------------------------------------------------------

class SelectedListContent : public ::google::protobuf::Message {
 public:
  SelectedListContent();
  virtual ~SelectedListContent();

  SelectedListContent(const SelectedListContent& from);

  inline SelectedListContent& operator=(const SelectedListContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectedListContent& default_instance();

  void Swap(SelectedListContent* other);

  // implements Message ----------------------------------------------

  SelectedListContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectedListContent& from);
  void MergeFrom(const SelectedListContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes revision = 1;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 1;
  inline const ::std::string& revision() const;
  inline void set_revision(const ::std::string& value);
  inline void set_revision(const char* value);
  inline void set_revision(const void* value, size_t size);
  inline ::std::string* mutable_revision();
  inline ::std::string* release_revision();
  inline void set_allocated_revision(::std::string* revision);

  // optional int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // optional .spotify.playlist4.proto.ListAttributes attributes = 3;
  inline bool has_attributes() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  inline const ::spotify::playlist4::proto::ListAttributes& attributes() const;
  inline ::spotify::playlist4::proto::ListAttributes* mutable_attributes();
  inline ::spotify::playlist4::proto::ListAttributes* release_attributes();
  inline void set_allocated_attributes(::spotify::playlist4::proto::ListAttributes* attributes);

  // optional .spotify.playlist4.proto.ListChecksum checksum = 4;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ListChecksum& checksum() const;
  inline ::spotify::playlist4::proto::ListChecksum* mutable_checksum();
  inline ::spotify::playlist4::proto::ListChecksum* release_checksum();
  inline void set_allocated_checksum(::spotify::playlist4::proto::ListChecksum* checksum);

  // optional .spotify.playlist4.proto.ListItems contents = 5;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 5;
  inline const ::spotify::playlist4::proto::ListItems& contents() const;
  inline ::spotify::playlist4::proto::ListItems* mutable_contents();
  inline ::spotify::playlist4::proto::ListItems* release_contents();
  inline void set_allocated_contents(::spotify::playlist4::proto::ListItems* contents);

  // optional .spotify.playlist4.proto.Diff diff = 6;
  inline bool has_diff() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline const ::spotify::playlist4::proto::Diff& diff() const;
  inline ::spotify::playlist4::proto::Diff* mutable_diff();
  inline ::spotify::playlist4::proto::Diff* release_diff();
  inline void set_allocated_diff(::spotify::playlist4::proto::Diff* diff);

  // optional .spotify.playlist4.proto.Diff syncResult = 7;
  inline bool has_syncresult() const;
  inline void clear_syncresult();
  static const int kSyncResultFieldNumber = 7;
  inline const ::spotify::playlist4::proto::Diff& syncresult() const;
  inline ::spotify::playlist4::proto::Diff* mutable_syncresult();
  inline ::spotify::playlist4::proto::Diff* release_syncresult();
  inline void set_allocated_syncresult(::spotify::playlist4::proto::Diff* syncresult);

  // repeated bytes resultingRevisions = 8;
  inline int resultingrevisions_size() const;
  inline void clear_resultingrevisions();
  static const int kResultingRevisionsFieldNumber = 8;
  inline const ::std::string& resultingrevisions(int index) const;
  inline ::std::string* mutable_resultingrevisions(int index);
  inline void set_resultingrevisions(int index, const ::std::string& value);
  inline void set_resultingrevisions(int index, const char* value);
  inline void set_resultingrevisions(int index, const void* value, size_t size);
  inline ::std::string* add_resultingrevisions();
  inline void add_resultingrevisions(const ::std::string& value);
  inline void add_resultingrevisions(const char* value);
  inline void add_resultingrevisions(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& resultingrevisions() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resultingrevisions();

  // optional bool multipleHeads = 9;
  inline bool has_multipleheads() const;
  inline void clear_multipleheads();
  static const int kMultipleHeadsFieldNumber = 9;
  inline bool multipleheads() const;
  inline void set_multipleheads(bool value);

  // optional bool upToDate = 10;
  inline bool has_uptodate() const;
  inline void clear_uptodate();
  static const int kUpToDateFieldNumber = 10;
  inline bool uptodate() const;
  inline void set_uptodate(bool value);

  // repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 12;
  inline int resolveaction_size() const;
  inline void clear_resolveaction();
  static const int kResolveActionFieldNumber = 12;
  inline const ::spotify::playlist4::proto::ClientResolveAction& resolveaction(int index) const;
  inline ::spotify::playlist4::proto::ClientResolveAction* mutable_resolveaction(int index);
  inline ::spotify::playlist4::proto::ClientResolveAction* add_resolveaction();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction >&
      resolveaction() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction >*
      mutable_resolveaction();

  // repeated .spotify.playlist4.proto.ClientIssue issues = 13;
  inline int issues_size() const;
  inline void clear_issues();
  static const int kIssuesFieldNumber = 13;
  inline const ::spotify::playlist4::proto::ClientIssue& issues(int index) const;
  inline ::spotify::playlist4::proto::ClientIssue* mutable_issues(int index);
  inline ::spotify::playlist4::proto::ClientIssue* add_issues();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue >&
      issues() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue >*
      mutable_issues();

  // repeated int32 nonces = 14;
  inline int nonces_size() const;
  inline void clear_nonces();
  static const int kNoncesFieldNumber = 14;
  inline ::google::protobuf::int32 nonces(int index) const;
  inline void set_nonces(int index, ::google::protobuf::int32 value);
  inline void add_nonces(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nonces() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nonces();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.SelectedListContent)
 private:
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_attributes();
  inline void clear_has_attributes();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_contents();
  inline void clear_has_contents();
  inline void set_has_diff();
  inline void clear_has_diff();
  inline void set_has_syncresult();
  inline void clear_has_syncresult();
  inline void set_has_multipleheads();
  inline void clear_has_multipleheads();
  inline void set_has_uptodate();
  inline void clear_has_uptodate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* revision_;
  ::spotify::playlist4::proto::ListAttributes* attributes_;
  ::spotify::playlist4::proto::ListChecksum* checksum_;
  ::spotify::playlist4::proto::ListItems* contents_;
  ::spotify::playlist4::proto::Diff* diff_;
  ::spotify::playlist4::proto::Diff* syncresult_;
  ::google::protobuf::int32 length_;
  bool multipleheads_;
  bool uptodate_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resultingrevisions_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction > resolveaction_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue > issues_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nonces_;
  friend void  protobuf_AddDesc_playlist4changes_2eproto();
  friend void protobuf_AssignDesc_playlist4changes_2eproto();
  friend void protobuf_ShutdownFile_playlist4changes_2eproto();

  void InitAsDefaultInstance();
  static SelectedListContent* default_instance_;
};
// ===================================================================


// ===================================================================

// ChangeInfo

// optional string user = 1;
inline bool ChangeInfo::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeInfo::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& ChangeInfo::user() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeInfo.user)
  return *user_;
}
inline void ChangeInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeInfo.user)
}
inline void ChangeInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ChangeInfo.user)
}
inline void ChangeInfo::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ChangeInfo.user)
}
inline ::std::string* ChangeInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ChangeInfo.user)
  return user_;
}
inline ::std::string* ChangeInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ChangeInfo.user)
}

// optional int32 timestamp = 2;
inline bool ChangeInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeInfo::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 ChangeInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeInfo.timestamp)
  return timestamp_;
}
inline void ChangeInfo::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeInfo.timestamp)
}

// optional bool admin = 3;
inline bool ChangeInfo::has_admin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeInfo::set_has_admin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeInfo::clear_has_admin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeInfo::clear_admin() {
  admin_ = false;
  clear_has_admin();
}
inline bool ChangeInfo::admin() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeInfo.admin)
  return admin_;
}
inline void ChangeInfo::set_admin(bool value) {
  set_has_admin();
  admin_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeInfo.admin)
}

// optional bool undo = 4;
inline bool ChangeInfo::has_undo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeInfo::set_has_undo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeInfo::clear_has_undo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeInfo::clear_undo() {
  undo_ = false;
  clear_has_undo();
}
inline bool ChangeInfo::undo() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeInfo.undo)
  return undo_;
}
inline void ChangeInfo::set_undo(bool value) {
  set_has_undo();
  undo_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeInfo.undo)
}

// optional bool redo = 5;
inline bool ChangeInfo::has_redo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeInfo::set_has_redo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeInfo::clear_has_redo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeInfo::clear_redo() {
  redo_ = false;
  clear_has_redo();
}
inline bool ChangeInfo::redo() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeInfo.redo)
  return redo_;
}
inline void ChangeInfo::set_redo(bool value) {
  set_has_redo();
  redo_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeInfo.redo)
}

// optional bool merge = 6;
inline bool ChangeInfo::has_merge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChangeInfo::set_has_merge() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChangeInfo::clear_has_merge() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChangeInfo::clear_merge() {
  merge_ = false;
  clear_has_merge();
}
inline bool ChangeInfo::merge() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeInfo.merge)
  return merge_;
}
inline void ChangeInfo::set_merge(bool value) {
  set_has_merge();
  merge_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeInfo.merge)
}

// optional bool compressed = 7;
inline bool ChangeInfo::has_compressed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChangeInfo::set_has_compressed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChangeInfo::clear_has_compressed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChangeInfo::clear_compressed() {
  compressed_ = false;
  clear_has_compressed();
}
inline bool ChangeInfo::compressed() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeInfo.compressed)
  return compressed_;
}
inline void ChangeInfo::set_compressed(bool value) {
  set_has_compressed();
  compressed_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeInfo.compressed)
}

// optional bool migration = 8;
inline bool ChangeInfo::has_migration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChangeInfo::set_has_migration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChangeInfo::clear_has_migration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChangeInfo::clear_migration() {
  migration_ = false;
  clear_has_migration();
}
inline bool ChangeInfo::migration() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeInfo.migration)
  return migration_;
}
inline void ChangeInfo::set_migration(bool value) {
  set_has_migration();
  migration_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeInfo.migration)
}

// -------------------------------------------------------------------

// Delta

// optional bytes base_version = 1;
inline bool Delta::has_base_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Delta::set_has_base_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Delta::clear_has_base_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Delta::clear_base_version() {
  if (base_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_->clear();
  }
  clear_has_base_version();
}
inline const ::std::string& Delta::base_version() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Delta.base_version)
  return *base_version_;
}
inline void Delta::set_base_version(const ::std::string& value) {
  set_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_ = new ::std::string;
  }
  base_version_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Delta.base_version)
}
inline void Delta::set_base_version(const char* value) {
  set_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_ = new ::std::string;
  }
  base_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Delta.base_version)
}
inline void Delta::set_base_version(const void* value, size_t size) {
  set_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_ = new ::std::string;
  }
  base_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Delta.base_version)
}
inline ::std::string* Delta::mutable_base_version() {
  set_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Delta.base_version)
  return base_version_;
}
inline ::std::string* Delta::release_base_version() {
  clear_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = base_version_;
    base_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Delta::set_allocated_base_version(::std::string* base_version) {
  if (base_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_version_;
  }
  if (base_version) {
    set_has_base_version();
    base_version_ = base_version;
  } else {
    clear_has_base_version();
    base_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Delta.base_version)
}

// repeated .spotify.playlist4.proto.Op ops = 2;
inline int Delta::ops_size() const {
  return ops_.size();
}
inline void Delta::clear_ops() {
  ops_.Clear();
}
inline const ::spotify::playlist4::proto::Op& Delta::ops(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Delta.ops)
  return ops_.Get(index);
}
inline ::spotify::playlist4::proto::Op* Delta::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Delta.ops)
  return ops_.Mutable(index);
}
inline ::spotify::playlist4::proto::Op* Delta::add_ops() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.Delta.ops)
  return ops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >&
Delta::ops() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.Delta.ops)
  return ops_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >*
Delta::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.Delta.ops)
  return &ops_;
}

// optional .spotify.playlist4.proto.ChangeInfo info = 4;
inline bool Delta::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Delta::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Delta::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Delta::clear_info() {
  if (info_ != NULL) info_->::spotify::playlist4::proto::ChangeInfo::Clear();
  clear_has_info();
}
inline const ::spotify::playlist4::proto::ChangeInfo& Delta::info() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Delta.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::spotify::playlist4::proto::ChangeInfo* Delta::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::spotify::playlist4::proto::ChangeInfo;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Delta.info)
  return info_;
}
inline ::spotify::playlist4::proto::ChangeInfo* Delta::release_info() {
  clear_has_info();
  ::spotify::playlist4::proto::ChangeInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Delta::set_allocated_info(::spotify::playlist4::proto::ChangeInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Delta.info)
}

// -------------------------------------------------------------------

// Merge

// optional bytes base_version = 1;
inline bool Merge::has_base_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Merge::set_has_base_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Merge::clear_has_base_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Merge::clear_base_version() {
  if (base_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_->clear();
  }
  clear_has_base_version();
}
inline const ::std::string& Merge::base_version() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Merge.base_version)
  return *base_version_;
}
inline void Merge::set_base_version(const ::std::string& value) {
  set_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_ = new ::std::string;
  }
  base_version_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Merge.base_version)
}
inline void Merge::set_base_version(const char* value) {
  set_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_ = new ::std::string;
  }
  base_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Merge.base_version)
}
inline void Merge::set_base_version(const void* value, size_t size) {
  set_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_ = new ::std::string;
  }
  base_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Merge.base_version)
}
inline ::std::string* Merge::mutable_base_version() {
  set_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Merge.base_version)
  return base_version_;
}
inline ::std::string* Merge::release_base_version() {
  clear_has_base_version();
  if (base_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = base_version_;
    base_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Merge::set_allocated_base_version(::std::string* base_version) {
  if (base_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_version_;
  }
  if (base_version) {
    set_has_base_version();
    base_version_ = base_version;
  } else {
    clear_has_base_version();
    base_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Merge.base_version)
}

// optional bytes merge_version = 2;
inline bool Merge::has_merge_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Merge::set_has_merge_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Merge::clear_has_merge_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Merge::clear_merge_version() {
  if (merge_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    merge_version_->clear();
  }
  clear_has_merge_version();
}
inline const ::std::string& Merge::merge_version() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Merge.merge_version)
  return *merge_version_;
}
inline void Merge::set_merge_version(const ::std::string& value) {
  set_has_merge_version();
  if (merge_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    merge_version_ = new ::std::string;
  }
  merge_version_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Merge.merge_version)
}
inline void Merge::set_merge_version(const char* value) {
  set_has_merge_version();
  if (merge_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    merge_version_ = new ::std::string;
  }
  merge_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Merge.merge_version)
}
inline void Merge::set_merge_version(const void* value, size_t size) {
  set_has_merge_version();
  if (merge_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    merge_version_ = new ::std::string;
  }
  merge_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Merge.merge_version)
}
inline ::std::string* Merge::mutable_merge_version() {
  set_has_merge_version();
  if (merge_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    merge_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Merge.merge_version)
  return merge_version_;
}
inline ::std::string* Merge::release_merge_version() {
  clear_has_merge_version();
  if (merge_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = merge_version_;
    merge_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Merge::set_allocated_merge_version(::std::string* merge_version) {
  if (merge_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete merge_version_;
  }
  if (merge_version) {
    set_has_merge_version();
    merge_version_ = merge_version;
  } else {
    clear_has_merge_version();
    merge_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Merge.merge_version)
}

// optional .spotify.playlist4.proto.ChangeInfo info = 4;
inline bool Merge::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Merge::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Merge::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Merge::clear_info() {
  if (info_ != NULL) info_->::spotify::playlist4::proto::ChangeInfo::Clear();
  clear_has_info();
}
inline const ::spotify::playlist4::proto::ChangeInfo& Merge::info() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Merge.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::spotify::playlist4::proto::ChangeInfo* Merge::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::spotify::playlist4::proto::ChangeInfo;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Merge.info)
  return info_;
}
inline ::spotify::playlist4::proto::ChangeInfo* Merge::release_info() {
  clear_has_info();
  ::spotify::playlist4::proto::ChangeInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Merge::set_allocated_info(::spotify::playlist4::proto::ChangeInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Merge.info)
}

// -------------------------------------------------------------------

// ChangeSet

// required .spotify.playlist4.proto.ChangeSet.Kind kind = 1;
inline bool ChangeSet::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeSet::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeSet::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeSet::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::spotify::playlist4::proto::ChangeSet_Kind ChangeSet::kind() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeSet.kind)
  return static_cast< ::spotify::playlist4::proto::ChangeSet_Kind >(kind_);
}
inline void ChangeSet::set_kind(::spotify::playlist4::proto::ChangeSet_Kind value) {
  assert(::spotify::playlist4::proto::ChangeSet_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ChangeSet.kind)
}

// optional .spotify.playlist4.proto.Delta delta = 2;
inline bool ChangeSet::has_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeSet::set_has_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeSet::clear_has_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeSet::clear_delta() {
  if (delta_ != NULL) delta_->::spotify::playlist4::proto::Delta::Clear();
  clear_has_delta();
}
inline const ::spotify::playlist4::proto::Delta& ChangeSet::delta() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeSet.delta)
  return delta_ != NULL ? *delta_ : *default_instance_->delta_;
}
inline ::spotify::playlist4::proto::Delta* ChangeSet::mutable_delta() {
  set_has_delta();
  if (delta_ == NULL) delta_ = new ::spotify::playlist4::proto::Delta;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ChangeSet.delta)
  return delta_;
}
inline ::spotify::playlist4::proto::Delta* ChangeSet::release_delta() {
  clear_has_delta();
  ::spotify::playlist4::proto::Delta* temp = delta_;
  delta_ = NULL;
  return temp;
}
inline void ChangeSet::set_allocated_delta(::spotify::playlist4::proto::Delta* delta) {
  delete delta_;
  delta_ = delta;
  if (delta) {
    set_has_delta();
  } else {
    clear_has_delta();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ChangeSet.delta)
}

// optional .spotify.playlist4.proto.Merge merge = 3;
inline bool ChangeSet::has_merge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeSet::set_has_merge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeSet::clear_has_merge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeSet::clear_merge() {
  if (merge_ != NULL) merge_->::spotify::playlist4::proto::Merge::Clear();
  clear_has_merge();
}
inline const ::spotify::playlist4::proto::Merge& ChangeSet::merge() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ChangeSet.merge)
  return merge_ != NULL ? *merge_ : *default_instance_->merge_;
}
inline ::spotify::playlist4::proto::Merge* ChangeSet::mutable_merge() {
  set_has_merge();
  if (merge_ == NULL) merge_ = new ::spotify::playlist4::proto::Merge;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ChangeSet.merge)
  return merge_;
}
inline ::spotify::playlist4::proto::Merge* ChangeSet::release_merge() {
  clear_has_merge();
  ::spotify::playlist4::proto::Merge* temp = merge_;
  merge_ = NULL;
  return temp;
}
inline void ChangeSet::set_allocated_merge(::spotify::playlist4::proto::Merge* merge) {
  delete merge_;
  merge_ = merge;
  if (merge) {
    set_has_merge();
  } else {
    clear_has_merge();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ChangeSet.merge)
}

// -------------------------------------------------------------------

// RevisionTaggedChangeSet

// required bytes revision = 1;
inline bool RevisionTaggedChangeSet::has_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RevisionTaggedChangeSet::set_has_revision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RevisionTaggedChangeSet::clear_has_revision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RevisionTaggedChangeSet::clear_revision() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_->clear();
  }
  clear_has_revision();
}
inline const ::std::string& RevisionTaggedChangeSet::revision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.RevisionTaggedChangeSet.revision)
  return *revision_;
}
inline void RevisionTaggedChangeSet::set_revision(const ::std::string& value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.RevisionTaggedChangeSet.revision)
}
inline void RevisionTaggedChangeSet::set_revision(const char* value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.RevisionTaggedChangeSet.revision)
}
inline void RevisionTaggedChangeSet::set_revision(const void* value, size_t size) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.RevisionTaggedChangeSet.revision)
}
inline ::std::string* RevisionTaggedChangeSet::mutable_revision() {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.RevisionTaggedChangeSet.revision)
  return revision_;
}
inline ::std::string* RevisionTaggedChangeSet::release_revision() {
  clear_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = revision_;
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RevisionTaggedChangeSet::set_allocated_revision(::std::string* revision) {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (revision) {
    set_has_revision();
    revision_ = revision;
  } else {
    clear_has_revision();
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.RevisionTaggedChangeSet.revision)
}

// required .spotify.playlist4.proto.ChangeSet change_set = 2;
inline bool RevisionTaggedChangeSet::has_change_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RevisionTaggedChangeSet::set_has_change_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RevisionTaggedChangeSet::clear_has_change_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RevisionTaggedChangeSet::clear_change_set() {
  if (change_set_ != NULL) change_set_->::spotify::playlist4::proto::ChangeSet::Clear();
  clear_has_change_set();
}
inline const ::spotify::playlist4::proto::ChangeSet& RevisionTaggedChangeSet::change_set() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.RevisionTaggedChangeSet.change_set)
  return change_set_ != NULL ? *change_set_ : *default_instance_->change_set_;
}
inline ::spotify::playlist4::proto::ChangeSet* RevisionTaggedChangeSet::mutable_change_set() {
  set_has_change_set();
  if (change_set_ == NULL) change_set_ = new ::spotify::playlist4::proto::ChangeSet;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.RevisionTaggedChangeSet.change_set)
  return change_set_;
}
inline ::spotify::playlist4::proto::ChangeSet* RevisionTaggedChangeSet::release_change_set() {
  clear_has_change_set();
  ::spotify::playlist4::proto::ChangeSet* temp = change_set_;
  change_set_ = NULL;
  return temp;
}
inline void RevisionTaggedChangeSet::set_allocated_change_set(::spotify::playlist4::proto::ChangeSet* change_set) {
  delete change_set_;
  change_set_ = change_set;
  if (change_set) {
    set_has_change_set();
  } else {
    clear_has_change_set();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.RevisionTaggedChangeSet.change_set)
}

// -------------------------------------------------------------------

// Diff

// required bytes from_revision = 1;
inline bool Diff::has_from_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Diff::set_has_from_revision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Diff::clear_has_from_revision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Diff::clear_from_revision() {
  if (from_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_revision_->clear();
  }
  clear_has_from_revision();
}
inline const ::std::string& Diff::from_revision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Diff.from_revision)
  return *from_revision_;
}
inline void Diff::set_from_revision(const ::std::string& value) {
  set_has_from_revision();
  if (from_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_revision_ = new ::std::string;
  }
  from_revision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Diff.from_revision)
}
inline void Diff::set_from_revision(const char* value) {
  set_has_from_revision();
  if (from_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_revision_ = new ::std::string;
  }
  from_revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Diff.from_revision)
}
inline void Diff::set_from_revision(const void* value, size_t size) {
  set_has_from_revision();
  if (from_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_revision_ = new ::std::string;
  }
  from_revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Diff.from_revision)
}
inline ::std::string* Diff::mutable_from_revision() {
  set_has_from_revision();
  if (from_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Diff.from_revision)
  return from_revision_;
}
inline ::std::string* Diff::release_from_revision() {
  clear_has_from_revision();
  if (from_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_revision_;
    from_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Diff::set_allocated_from_revision(::std::string* from_revision) {
  if (from_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_revision_;
  }
  if (from_revision) {
    set_has_from_revision();
    from_revision_ = from_revision;
  } else {
    clear_has_from_revision();
    from_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Diff.from_revision)
}

// repeated .spotify.playlist4.proto.Op ops = 2;
inline int Diff::ops_size() const {
  return ops_.size();
}
inline void Diff::clear_ops() {
  ops_.Clear();
}
inline const ::spotify::playlist4::proto::Op& Diff::ops(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Diff.ops)
  return ops_.Get(index);
}
inline ::spotify::playlist4::proto::Op* Diff::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Diff.ops)
  return ops_.Mutable(index);
}
inline ::spotify::playlist4::proto::Op* Diff::add_ops() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.Diff.ops)
  return ops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >&
Diff::ops() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.Diff.ops)
  return ops_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Op >*
Diff::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.Diff.ops)
  return &ops_;
}

// required bytes to_revision = 3;
inline bool Diff::has_to_revision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Diff::set_has_to_revision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Diff::clear_has_to_revision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Diff::clear_to_revision() {
  if (to_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_revision_->clear();
  }
  clear_has_to_revision();
}
inline const ::std::string& Diff::to_revision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Diff.to_revision)
  return *to_revision_;
}
inline void Diff::set_to_revision(const ::std::string& value) {
  set_has_to_revision();
  if (to_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_revision_ = new ::std::string;
  }
  to_revision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Diff.to_revision)
}
inline void Diff::set_to_revision(const char* value) {
  set_has_to_revision();
  if (to_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_revision_ = new ::std::string;
  }
  to_revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Diff.to_revision)
}
inline void Diff::set_to_revision(const void* value, size_t size) {
  set_has_to_revision();
  if (to_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_revision_ = new ::std::string;
  }
  to_revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Diff.to_revision)
}
inline ::std::string* Diff::mutable_to_revision() {
  set_has_to_revision();
  if (to_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Diff.to_revision)
  return to_revision_;
}
inline ::std::string* Diff::release_to_revision() {
  clear_has_to_revision();
  if (to_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_revision_;
    to_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Diff::set_allocated_to_revision(::std::string* to_revision) {
  if (to_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_revision_;
  }
  if (to_revision) {
    set_has_to_revision();
    to_revision_ = to_revision;
  } else {
    clear_has_to_revision();
    to_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Diff.to_revision)
}

// -------------------------------------------------------------------

// ListDump

// optional bytes latestRevision = 1;
inline bool ListDump::has_latestrevision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListDump::set_has_latestrevision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListDump::clear_has_latestrevision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListDump::clear_latestrevision() {
  if (latestrevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latestrevision_->clear();
  }
  clear_has_latestrevision();
}
inline const ::std::string& ListDump::latestrevision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListDump.latestRevision)
  return *latestrevision_;
}
inline void ListDump::set_latestrevision(const ::std::string& value) {
  set_has_latestrevision();
  if (latestrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latestrevision_ = new ::std::string;
  }
  latestrevision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListDump.latestRevision)
}
inline void ListDump::set_latestrevision(const char* value) {
  set_has_latestrevision();
  if (latestrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latestrevision_ = new ::std::string;
  }
  latestrevision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListDump.latestRevision)
}
inline void ListDump::set_latestrevision(const void* value, size_t size) {
  set_has_latestrevision();
  if (latestrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latestrevision_ = new ::std::string;
  }
  latestrevision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListDump.latestRevision)
}
inline ::std::string* ListDump::mutable_latestrevision() {
  set_has_latestrevision();
  if (latestrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latestrevision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListDump.latestRevision)
  return latestrevision_;
}
inline ::std::string* ListDump::release_latestrevision() {
  clear_has_latestrevision();
  if (latestrevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = latestrevision_;
    latestrevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListDump::set_allocated_latestrevision(::std::string* latestrevision) {
  if (latestrevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latestrevision_;
  }
  if (latestrevision) {
    set_has_latestrevision();
    latestrevision_ = latestrevision;
  } else {
    clear_has_latestrevision();
    latestrevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListDump.latestRevision)
}

// optional int32 length = 2;
inline bool ListDump::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListDump::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListDump::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListDump::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 ListDump::length() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListDump.length)
  return length_;
}
inline void ListDump::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListDump.length)
}

// optional .spotify.playlist4.proto.ListAttributes attributes = 3;
inline bool ListDump::has_attributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListDump::set_has_attributes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListDump::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListDump::clear_attributes() {
  if (attributes_ != NULL) attributes_->::spotify::playlist4::proto::ListAttributes::Clear();
  clear_has_attributes();
}
inline const ::spotify::playlist4::proto::ListAttributes& ListDump::attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListDump.attributes)
  return attributes_ != NULL ? *attributes_ : *default_instance_->attributes_;
}
inline ::spotify::playlist4::proto::ListAttributes* ListDump::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) attributes_ = new ::spotify::playlist4::proto::ListAttributes;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListDump.attributes)
  return attributes_;
}
inline ::spotify::playlist4::proto::ListAttributes* ListDump::release_attributes() {
  clear_has_attributes();
  ::spotify::playlist4::proto::ListAttributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void ListDump::set_allocated_attributes(::spotify::playlist4::proto::ListAttributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListDump.attributes)
}

// optional .spotify.playlist4.proto.ListChecksum checksum = 4;
inline bool ListDump::has_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListDump::set_has_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListDump::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListDump::clear_checksum() {
  if (checksum_ != NULL) checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& ListDump::checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListDump.checksum)
  return checksum_ != NULL ? *checksum_ : *default_instance_->checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* ListDump::mutable_checksum() {
  set_has_checksum();
  if (checksum_ == NULL) checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListDump.checksum)
  return checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* ListDump::release_checksum() {
  clear_has_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = checksum_;
  checksum_ = NULL;
  return temp;
}
inline void ListDump::set_allocated_checksum(::spotify::playlist4::proto::ListChecksum* checksum) {
  delete checksum_;
  checksum_ = checksum;
  if (checksum) {
    set_has_checksum();
  } else {
    clear_has_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListDump.checksum)
}

// optional .spotify.playlist4.proto.ListItems contents = 5;
inline bool ListDump::has_contents() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListDump::set_has_contents() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListDump::clear_has_contents() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListDump::clear_contents() {
  if (contents_ != NULL) contents_->::spotify::playlist4::proto::ListItems::Clear();
  clear_has_contents();
}
inline const ::spotify::playlist4::proto::ListItems& ListDump::contents() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListDump.contents)
  return contents_ != NULL ? *contents_ : *default_instance_->contents_;
}
inline ::spotify::playlist4::proto::ListItems* ListDump::mutable_contents() {
  set_has_contents();
  if (contents_ == NULL) contents_ = new ::spotify::playlist4::proto::ListItems;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListDump.contents)
  return contents_;
}
inline ::spotify::playlist4::proto::ListItems* ListDump::release_contents() {
  clear_has_contents();
  ::spotify::playlist4::proto::ListItems* temp = contents_;
  contents_ = NULL;
  return temp;
}
inline void ListDump::set_allocated_contents(::spotify::playlist4::proto::ListItems* contents) {
  delete contents_;
  contents_ = contents;
  if (contents) {
    set_has_contents();
  } else {
    clear_has_contents();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListDump.contents)
}

// repeated .spotify.playlist4.proto.Delta pendingDeltas = 7;
inline int ListDump::pendingdeltas_size() const {
  return pendingdeltas_.size();
}
inline void ListDump::clear_pendingdeltas() {
  pendingdeltas_.Clear();
}
inline const ::spotify::playlist4::proto::Delta& ListDump::pendingdeltas(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListDump.pendingDeltas)
  return pendingdeltas_.Get(index);
}
inline ::spotify::playlist4::proto::Delta* ListDump::mutable_pendingdeltas(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListDump.pendingDeltas)
  return pendingdeltas_.Mutable(index);
}
inline ::spotify::playlist4::proto::Delta* ListDump::add_pendingdeltas() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.ListDump.pendingDeltas)
  return pendingdeltas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta >&
ListDump::pendingdeltas() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.ListDump.pendingDeltas)
  return pendingdeltas_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta >*
ListDump::mutable_pendingdeltas() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.ListDump.pendingDeltas)
  return &pendingdeltas_;
}

// -------------------------------------------------------------------

// ListChanges

// optional bytes baseRevision = 1;
inline bool ListChanges::has_baserevision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListChanges::set_has_baserevision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListChanges::clear_has_baserevision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListChanges::clear_baserevision() {
  if (baserevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_->clear();
  }
  clear_has_baserevision();
}
inline const ::std::string& ListChanges::baserevision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListChanges.baseRevision)
  return *baserevision_;
}
inline void ListChanges::set_baserevision(const ::std::string& value) {
  set_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_ = new ::std::string;
  }
  baserevision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListChanges.baseRevision)
}
inline void ListChanges::set_baserevision(const char* value) {
  set_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_ = new ::std::string;
  }
  baserevision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ListChanges.baseRevision)
}
inline void ListChanges::set_baserevision(const void* value, size_t size) {
  set_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_ = new ::std::string;
  }
  baserevision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ListChanges.baseRevision)
}
inline ::std::string* ListChanges::mutable_baserevision() {
  set_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baserevision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListChanges.baseRevision)
  return baserevision_;
}
inline ::std::string* ListChanges::release_baserevision() {
  clear_has_baserevision();
  if (baserevision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = baserevision_;
    baserevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListChanges::set_allocated_baserevision(::std::string* baserevision) {
  if (baserevision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baserevision_;
  }
  if (baserevision) {
    set_has_baserevision();
    baserevision_ = baserevision;
  } else {
    clear_has_baserevision();
    baserevision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListChanges.baseRevision)
}

// repeated .spotify.playlist4.proto.Delta deltas = 2;
inline int ListChanges::deltas_size() const {
  return deltas_.size();
}
inline void ListChanges::clear_deltas() {
  deltas_.Clear();
}
inline const ::spotify::playlist4::proto::Delta& ListChanges::deltas(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListChanges.deltas)
  return deltas_.Get(index);
}
inline ::spotify::playlist4::proto::Delta* ListChanges::mutable_deltas(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListChanges.deltas)
  return deltas_.Mutable(index);
}
inline ::spotify::playlist4::proto::Delta* ListChanges::add_deltas() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.ListChanges.deltas)
  return deltas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta >&
ListChanges::deltas() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.ListChanges.deltas)
  return deltas_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::Delta >*
ListChanges::mutable_deltas() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.ListChanges.deltas)
  return &deltas_;
}

// optional bool wantResultingRevisions = 3;
inline bool ListChanges::has_wantresultingrevisions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListChanges::set_has_wantresultingrevisions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListChanges::clear_has_wantresultingrevisions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListChanges::clear_wantresultingrevisions() {
  wantresultingrevisions_ = false;
  clear_has_wantresultingrevisions();
}
inline bool ListChanges::wantresultingrevisions() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListChanges.wantResultingRevisions)
  return wantresultingrevisions_;
}
inline void ListChanges::set_wantresultingrevisions(bool value) {
  set_has_wantresultingrevisions();
  wantresultingrevisions_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListChanges.wantResultingRevisions)
}

// optional bool wantSyncResult = 4;
inline bool ListChanges::has_wantsyncresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListChanges::set_has_wantsyncresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListChanges::clear_has_wantsyncresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListChanges::clear_wantsyncresult() {
  wantsyncresult_ = false;
  clear_has_wantsyncresult();
}
inline bool ListChanges::wantsyncresult() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListChanges.wantSyncResult)
  return wantsyncresult_;
}
inline void ListChanges::set_wantsyncresult(bool value) {
  set_has_wantsyncresult();
  wantsyncresult_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListChanges.wantSyncResult)
}

// optional .spotify.playlist4.proto.ListDump dump = 5;
inline bool ListChanges::has_dump() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListChanges::set_has_dump() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListChanges::clear_has_dump() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListChanges::clear_dump() {
  if (dump_ != NULL) dump_->::spotify::playlist4::proto::ListDump::Clear();
  clear_has_dump();
}
inline const ::spotify::playlist4::proto::ListDump& ListChanges::dump() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListChanges.dump)
  return dump_ != NULL ? *dump_ : *default_instance_->dump_;
}
inline ::spotify::playlist4::proto::ListDump* ListChanges::mutable_dump() {
  set_has_dump();
  if (dump_ == NULL) dump_ = new ::spotify::playlist4::proto::ListDump;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ListChanges.dump)
  return dump_;
}
inline ::spotify::playlist4::proto::ListDump* ListChanges::release_dump() {
  clear_has_dump();
  ::spotify::playlist4::proto::ListDump* temp = dump_;
  dump_ = NULL;
  return temp;
}
inline void ListChanges::set_allocated_dump(::spotify::playlist4::proto::ListDump* dump) {
  delete dump_;
  dump_ = dump;
  if (dump) {
    set_has_dump();
  } else {
    clear_has_dump();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ListChanges.dump)
}

// repeated int32 nonces = 6;
inline int ListChanges::nonces_size() const {
  return nonces_.size();
}
inline void ListChanges::clear_nonces() {
  nonces_.Clear();
}
inline ::google::protobuf::int32 ListChanges::nonces(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ListChanges.nonces)
  return nonces_.Get(index);
}
inline void ListChanges::set_nonces(int index, ::google::protobuf::int32 value) {
  nonces_.Set(index, value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ListChanges.nonces)
}
inline void ListChanges::add_nonces(::google::protobuf::int32 value) {
  nonces_.Add(value);
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.ListChanges.nonces)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ListChanges::nonces() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.ListChanges.nonces)
  return nonces_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ListChanges::mutable_nonces() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.ListChanges.nonces)
  return &nonces_;
}

// -------------------------------------------------------------------

// SelectedListContent

// optional bytes revision = 1;
inline bool SelectedListContent::has_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectedListContent::set_has_revision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectedListContent::clear_has_revision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectedListContent::clear_revision() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_->clear();
  }
  clear_has_revision();
}
inline const ::std::string& SelectedListContent::revision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.revision)
  return *revision_;
}
inline void SelectedListContent::set_revision(const ::std::string& value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.SelectedListContent.revision)
}
inline void SelectedListContent::set_revision(const char* value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.SelectedListContent.revision)
}
inline void SelectedListContent::set_revision(const void* value, size_t size) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.SelectedListContent.revision)
}
inline ::std::string* SelectedListContent::mutable_revision() {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.revision)
  return revision_;
}
inline ::std::string* SelectedListContent::release_revision() {
  clear_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = revision_;
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SelectedListContent::set_allocated_revision(::std::string* revision) {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (revision) {
    set_has_revision();
    revision_ = revision;
  } else {
    clear_has_revision();
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SelectedListContent.revision)
}

// optional int32 length = 2;
inline bool SelectedListContent::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectedListContent::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectedListContent::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectedListContent::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 SelectedListContent::length() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.length)
  return length_;
}
inline void SelectedListContent::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.SelectedListContent.length)
}

// optional .spotify.playlist4.proto.ListAttributes attributes = 3;
inline bool SelectedListContent::has_attributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectedListContent::set_has_attributes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectedListContent::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectedListContent::clear_attributes() {
  if (attributes_ != NULL) attributes_->::spotify::playlist4::proto::ListAttributes::Clear();
  clear_has_attributes();
}
inline const ::spotify::playlist4::proto::ListAttributes& SelectedListContent::attributes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.attributes)
  return attributes_ != NULL ? *attributes_ : *default_instance_->attributes_;
}
inline ::spotify::playlist4::proto::ListAttributes* SelectedListContent::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) attributes_ = new ::spotify::playlist4::proto::ListAttributes;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.attributes)
  return attributes_;
}
inline ::spotify::playlist4::proto::ListAttributes* SelectedListContent::release_attributes() {
  clear_has_attributes();
  ::spotify::playlist4::proto::ListAttributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void SelectedListContent::set_allocated_attributes(::spotify::playlist4::proto::ListAttributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SelectedListContent.attributes)
}

// optional .spotify.playlist4.proto.ListChecksum checksum = 4;
inline bool SelectedListContent::has_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelectedListContent::set_has_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelectedListContent::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelectedListContent::clear_checksum() {
  if (checksum_ != NULL) checksum_->::spotify::playlist4::proto::ListChecksum::Clear();
  clear_has_checksum();
}
inline const ::spotify::playlist4::proto::ListChecksum& SelectedListContent::checksum() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.checksum)
  return checksum_ != NULL ? *checksum_ : *default_instance_->checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* SelectedListContent::mutable_checksum() {
  set_has_checksum();
  if (checksum_ == NULL) checksum_ = new ::spotify::playlist4::proto::ListChecksum;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.checksum)
  return checksum_;
}
inline ::spotify::playlist4::proto::ListChecksum* SelectedListContent::release_checksum() {
  clear_has_checksum();
  ::spotify::playlist4::proto::ListChecksum* temp = checksum_;
  checksum_ = NULL;
  return temp;
}
inline void SelectedListContent::set_allocated_checksum(::spotify::playlist4::proto::ListChecksum* checksum) {
  delete checksum_;
  checksum_ = checksum;
  if (checksum) {
    set_has_checksum();
  } else {
    clear_has_checksum();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SelectedListContent.checksum)
}

// optional .spotify.playlist4.proto.ListItems contents = 5;
inline bool SelectedListContent::has_contents() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SelectedListContent::set_has_contents() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SelectedListContent::clear_has_contents() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SelectedListContent::clear_contents() {
  if (contents_ != NULL) contents_->::spotify::playlist4::proto::ListItems::Clear();
  clear_has_contents();
}
inline const ::spotify::playlist4::proto::ListItems& SelectedListContent::contents() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.contents)
  return contents_ != NULL ? *contents_ : *default_instance_->contents_;
}
inline ::spotify::playlist4::proto::ListItems* SelectedListContent::mutable_contents() {
  set_has_contents();
  if (contents_ == NULL) contents_ = new ::spotify::playlist4::proto::ListItems;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.contents)
  return contents_;
}
inline ::spotify::playlist4::proto::ListItems* SelectedListContent::release_contents() {
  clear_has_contents();
  ::spotify::playlist4::proto::ListItems* temp = contents_;
  contents_ = NULL;
  return temp;
}
inline void SelectedListContent::set_allocated_contents(::spotify::playlist4::proto::ListItems* contents) {
  delete contents_;
  contents_ = contents;
  if (contents) {
    set_has_contents();
  } else {
    clear_has_contents();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SelectedListContent.contents)
}

// optional .spotify.playlist4.proto.Diff diff = 6;
inline bool SelectedListContent::has_diff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SelectedListContent::set_has_diff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SelectedListContent::clear_has_diff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SelectedListContent::clear_diff() {
  if (diff_ != NULL) diff_->::spotify::playlist4::proto::Diff::Clear();
  clear_has_diff();
}
inline const ::spotify::playlist4::proto::Diff& SelectedListContent::diff() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.diff)
  return diff_ != NULL ? *diff_ : *default_instance_->diff_;
}
inline ::spotify::playlist4::proto::Diff* SelectedListContent::mutable_diff() {
  set_has_diff();
  if (diff_ == NULL) diff_ = new ::spotify::playlist4::proto::Diff;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.diff)
  return diff_;
}
inline ::spotify::playlist4::proto::Diff* SelectedListContent::release_diff() {
  clear_has_diff();
  ::spotify::playlist4::proto::Diff* temp = diff_;
  diff_ = NULL;
  return temp;
}
inline void SelectedListContent::set_allocated_diff(::spotify::playlist4::proto::Diff* diff) {
  delete diff_;
  diff_ = diff;
  if (diff) {
    set_has_diff();
  } else {
    clear_has_diff();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SelectedListContent.diff)
}

// optional .spotify.playlist4.proto.Diff syncResult = 7;
inline bool SelectedListContent::has_syncresult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SelectedListContent::set_has_syncresult() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SelectedListContent::clear_has_syncresult() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SelectedListContent::clear_syncresult() {
  if (syncresult_ != NULL) syncresult_->::spotify::playlist4::proto::Diff::Clear();
  clear_has_syncresult();
}
inline const ::spotify::playlist4::proto::Diff& SelectedListContent::syncresult() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.syncResult)
  return syncresult_ != NULL ? *syncresult_ : *default_instance_->syncresult_;
}
inline ::spotify::playlist4::proto::Diff* SelectedListContent::mutable_syncresult() {
  set_has_syncresult();
  if (syncresult_ == NULL) syncresult_ = new ::spotify::playlist4::proto::Diff;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.syncResult)
  return syncresult_;
}
inline ::spotify::playlist4::proto::Diff* SelectedListContent::release_syncresult() {
  clear_has_syncresult();
  ::spotify::playlist4::proto::Diff* temp = syncresult_;
  syncresult_ = NULL;
  return temp;
}
inline void SelectedListContent::set_allocated_syncresult(::spotify::playlist4::proto::Diff* syncresult) {
  delete syncresult_;
  syncresult_ = syncresult;
  if (syncresult) {
    set_has_syncresult();
  } else {
    clear_has_syncresult();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SelectedListContent.syncResult)
}

// repeated bytes resultingRevisions = 8;
inline int SelectedListContent::resultingrevisions_size() const {
  return resultingrevisions_.size();
}
inline void SelectedListContent::clear_resultingrevisions() {
  resultingrevisions_.Clear();
}
inline const ::std::string& SelectedListContent::resultingrevisions(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
  return resultingrevisions_.Get(index);
}
inline ::std::string* SelectedListContent::mutable_resultingrevisions(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
  return resultingrevisions_.Mutable(index);
}
inline void SelectedListContent::set_resultingrevisions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
  resultingrevisions_.Mutable(index)->assign(value);
}
inline void SelectedListContent::set_resultingrevisions(int index, const char* value) {
  resultingrevisions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
}
inline void SelectedListContent::set_resultingrevisions(int index, const void* value, size_t size) {
  resultingrevisions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
}
inline ::std::string* SelectedListContent::add_resultingrevisions() {
  return resultingrevisions_.Add();
}
inline void SelectedListContent::add_resultingrevisions(const ::std::string& value) {
  resultingrevisions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
}
inline void SelectedListContent::add_resultingrevisions(const char* value) {
  resultingrevisions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
}
inline void SelectedListContent::add_resultingrevisions(const void* value, size_t size) {
  resultingrevisions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SelectedListContent::resultingrevisions() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
  return resultingrevisions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SelectedListContent::mutable_resultingrevisions() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.SelectedListContent.resultingRevisions)
  return &resultingrevisions_;
}

// optional bool multipleHeads = 9;
inline bool SelectedListContent::has_multipleheads() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SelectedListContent::set_has_multipleheads() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SelectedListContent::clear_has_multipleheads() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SelectedListContent::clear_multipleheads() {
  multipleheads_ = false;
  clear_has_multipleheads();
}
inline bool SelectedListContent::multipleheads() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.multipleHeads)
  return multipleheads_;
}
inline void SelectedListContent::set_multipleheads(bool value) {
  set_has_multipleheads();
  multipleheads_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.SelectedListContent.multipleHeads)
}

// optional bool upToDate = 10;
inline bool SelectedListContent::has_uptodate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SelectedListContent::set_has_uptodate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SelectedListContent::clear_has_uptodate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SelectedListContent::clear_uptodate() {
  uptodate_ = false;
  clear_has_uptodate();
}
inline bool SelectedListContent::uptodate() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.upToDate)
  return uptodate_;
}
inline void SelectedListContent::set_uptodate(bool value) {
  set_has_uptodate();
  uptodate_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.SelectedListContent.upToDate)
}

// repeated .spotify.playlist4.proto.ClientResolveAction resolveAction = 12;
inline int SelectedListContent::resolveaction_size() const {
  return resolveaction_.size();
}
inline void SelectedListContent::clear_resolveaction() {
  resolveaction_.Clear();
}
inline const ::spotify::playlist4::proto::ClientResolveAction& SelectedListContent::resolveaction(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.resolveAction)
  return resolveaction_.Get(index);
}
inline ::spotify::playlist4::proto::ClientResolveAction* SelectedListContent::mutable_resolveaction(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.resolveAction)
  return resolveaction_.Mutable(index);
}
inline ::spotify::playlist4::proto::ClientResolveAction* SelectedListContent::add_resolveaction() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.SelectedListContent.resolveAction)
  return resolveaction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction >&
SelectedListContent::resolveaction() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.SelectedListContent.resolveAction)
  return resolveaction_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientResolveAction >*
SelectedListContent::mutable_resolveaction() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.SelectedListContent.resolveAction)
  return &resolveaction_;
}

// repeated .spotify.playlist4.proto.ClientIssue issues = 13;
inline int SelectedListContent::issues_size() const {
  return issues_.size();
}
inline void SelectedListContent::clear_issues() {
  issues_.Clear();
}
inline const ::spotify::playlist4::proto::ClientIssue& SelectedListContent::issues(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.issues)
  return issues_.Get(index);
}
inline ::spotify::playlist4::proto::ClientIssue* SelectedListContent::mutable_issues(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SelectedListContent.issues)
  return issues_.Mutable(index);
}
inline ::spotify::playlist4::proto::ClientIssue* SelectedListContent::add_issues() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.SelectedListContent.issues)
  return issues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue >&
SelectedListContent::issues() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.SelectedListContent.issues)
  return issues_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::ClientIssue >*
SelectedListContent::mutable_issues() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.SelectedListContent.issues)
  return &issues_;
}

// repeated int32 nonces = 14;
inline int SelectedListContent::nonces_size() const {
  return nonces_.size();
}
inline void SelectedListContent::clear_nonces() {
  nonces_.Clear();
}
inline ::google::protobuf::int32 SelectedListContent::nonces(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SelectedListContent.nonces)
  return nonces_.Get(index);
}
inline void SelectedListContent::set_nonces(int index, ::google::protobuf::int32 value) {
  nonces_.Set(index, value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.SelectedListContent.nonces)
}
inline void SelectedListContent::add_nonces(::google::protobuf::int32 value) {
  nonces_.Add(value);
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.SelectedListContent.nonces)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SelectedListContent::nonces() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.SelectedListContent.nonces)
  return nonces_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SelectedListContent::mutable_nonces() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.SelectedListContent.nonces)
  return &nonces_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spotify::playlist4::proto::ChangeSet_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::ChangeSet_Kind>() {
  return ::spotify::playlist4::proto::ChangeSet_Kind_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playlist4changes_2eproto__INCLUDED
