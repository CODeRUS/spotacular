// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace metadata {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TopTracks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopTracks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityPeriod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityPeriod_reflection_ = NULL;
const ::google::protobuf::Descriptor* Artist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Artist_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlbumGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlbumGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Date_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Date_reflection_ = NULL;
const ::google::protobuf::Descriptor* Album_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Album_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Album_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Track_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Image_Size_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Biography_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Biography_reflection_ = NULL;
const ::google::protobuf::Descriptor* Disc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Disc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Copyright_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Copyright_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Copyright_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Restriction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Restriction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Restriction_Catalogue_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Restriction_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SalePeriod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SalePeriod_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalId_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioFile_Format_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_metadata_2eproto() {
  protobuf_AddDesc_metadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "metadata.proto");
  GOOGLE_CHECK(file != NULL);
  TopTracks_descriptor_ = file->message_type(0);
  static const int TopTracks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTracks, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTracks, track_),
  };
  TopTracks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopTracks_descriptor_,
      TopTracks::default_instance_,
      TopTracks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTracks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTracks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopTracks));
  ActivityPeriod_descriptor_ = file->message_type(1);
  static const int ActivityPeriod_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPeriod, start_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPeriod, end_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPeriod, decade_),
  };
  ActivityPeriod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityPeriod_descriptor_,
      ActivityPeriod::default_instance_,
      ActivityPeriod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPeriod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPeriod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityPeriod));
  Artist_descriptor_ = file->message_type(2);
  static const int Artist_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, top_track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, album_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, single_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, compilation_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, appears_on_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, external_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, biography_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, activity_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, restriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, related_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, is_portrait_album_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, portrait_group_),
  };
  Artist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Artist_descriptor_,
      Artist::default_instance_,
      Artist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Artist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Artist));
  AlbumGroup_descriptor_ = file->message_type(3);
  static const int AlbumGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumGroup, album_),
  };
  AlbumGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlbumGroup_descriptor_,
      AlbumGroup::default_instance_,
      AlbumGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlbumGroup));
  Date_descriptor_ = file->message_type(4);
  static const int Date_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, day_),
  };
  Date_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Date_descriptor_,
      Date::default_instance_,
      Date_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Date));
  Album_descriptor_ = file->message_type(5);
  static const int Album_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, external_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, disc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, review_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, copyright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, restriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, related_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, sale_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, cover_group_),
  };
  Album_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Album_descriptor_,
      Album::default_instance_,
      Album_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Album));
  Album_Type_descriptor_ = Album_descriptor_->enum_type(0);
  Track_descriptor_ = file->message_type(6);
  static const int Track_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, disc_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, explicit__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, external_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, restriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, alternative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, sale_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, preview_),
  };
  Track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Track_descriptor_,
      Track::default_instance_,
      Track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Track));
  Image_descriptor_ = file->message_type(7);
  static const int Image_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Image_Size_descriptor_ = Image_descriptor_->enum_type(0);
  ImageGroup_descriptor_ = file->message_type(8);
  static const int ImageGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageGroup, image_),
  };
  ImageGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageGroup_descriptor_,
      ImageGroup::default_instance_,
      ImageGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageGroup));
  Biography_descriptor_ = file->message_type(9);
  static const int Biography_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Biography, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Biography, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Biography, portrait_group_),
  };
  Biography_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Biography_descriptor_,
      Biography::default_instance_,
      Biography_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Biography, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Biography, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Biography));
  Disc_descriptor_ = file->message_type(10);
  static const int Disc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disc, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disc, track_),
  };
  Disc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Disc_descriptor_,
      Disc::default_instance_,
      Disc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Disc));
  Copyright_descriptor_ = file->message_type(11);
  static const int Copyright_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, text_),
  };
  Copyright_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Copyright_descriptor_,
      Copyright::default_instance_,
      Copyright_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copyright, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Copyright));
  Copyright_Type_descriptor_ = Copyright_descriptor_->enum_type(0);
  Restriction_descriptor_ = file->message_type(12);
  static const int Restriction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restriction, catalogue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restriction, countries_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restriction, countries_forbidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restriction, type_),
  };
  Restriction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Restriction_descriptor_,
      Restriction::default_instance_,
      Restriction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restriction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Restriction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Restriction));
  Restriction_Catalogue_descriptor_ = Restriction_descriptor_->enum_type(0);
  Restriction_Type_descriptor_ = Restriction_descriptor_->enum_type(1);
  SalePeriod_descriptor_ = file->message_type(13);
  static const int SalePeriod_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePeriod, restriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePeriod, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePeriod, end_),
  };
  SalePeriod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SalePeriod_descriptor_,
      SalePeriod::default_instance_,
      SalePeriod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePeriod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalePeriod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SalePeriod));
  ExternalId_descriptor_ = file->message_type(14);
  static const int ExternalId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, id_),
  };
  ExternalId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalId_descriptor_,
      ExternalId::default_instance_,
      ExternalId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalId));
  AudioFile_descriptor_ = file->message_type(15);
  static const int AudioFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFile, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFile, format_),
  };
  AudioFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioFile_descriptor_,
      AudioFile::default_instance_,
      AudioFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioFile));
  AudioFile_Format_descriptor_ = AudioFile_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_metadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopTracks_descriptor_, &TopTracks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityPeriod_descriptor_, &ActivityPeriod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Artist_descriptor_, &Artist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlbumGroup_descriptor_, &AlbumGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Date_descriptor_, &Date::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Album_descriptor_, &Album::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Track_descriptor_, &Track::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageGroup_descriptor_, &ImageGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Biography_descriptor_, &Biography::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Disc_descriptor_, &Disc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Copyright_descriptor_, &Copyright::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Restriction_descriptor_, &Restriction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SalePeriod_descriptor_, &SalePeriod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalId_descriptor_, &ExternalId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioFile_descriptor_, &AudioFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_metadata_2eproto() {
  delete TopTracks::default_instance_;
  delete TopTracks_reflection_;
  delete ActivityPeriod::default_instance_;
  delete ActivityPeriod_reflection_;
  delete Artist::default_instance_;
  delete Artist_reflection_;
  delete AlbumGroup::default_instance_;
  delete AlbumGroup_reflection_;
  delete Date::default_instance_;
  delete Date_reflection_;
  delete Album::default_instance_;
  delete Album_reflection_;
  delete Track::default_instance_;
  delete Track_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete ImageGroup::default_instance_;
  delete ImageGroup_reflection_;
  delete Biography::default_instance_;
  delete Biography_reflection_;
  delete Disc::default_instance_;
  delete Disc_reflection_;
  delete Copyright::default_instance_;
  delete Copyright_reflection_;
  delete Restriction::default_instance_;
  delete Restriction_reflection_;
  delete SalePeriod::default_instance_;
  delete SalePeriod_reflection_;
  delete ExternalId::default_instance_;
  delete ExternalId_reflection_;
  delete AudioFile::default_instance_;
  delete AudioFile_reflection_;
}

void protobuf_AddDesc_metadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016metadata.proto\022\026spotify.metadata.proto"
    "\"J\n\tTopTracks\022\017\n\007country\030\001 \001(\t\022,\n\005track\030"
    "\002 \003(\0132\035.spotify.metadata.proto.Track\"F\n\016"
    "ActivityPeriod\022\022\n\nstart_year\030\001 \001(\021\022\020\n\010en"
    "d_year\030\002 \001(\021\022\016\n\006decade\030\003 \001(\021\"\225\006\n\006Artist\022"
    "\013\n\003gid\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\022\n\npopularity"
    "\030\003 \001(\021\0224\n\ttop_track\030\004 \003(\0132!.spotify.meta"
    "data.proto.TopTracks\0227\n\013album_group\030\005 \003("
    "\0132\".spotify.metadata.proto.AlbumGroup\0228\n"
    "\014single_group\030\006 \003(\0132\".spotify.metadata.p"
    "roto.AlbumGroup\022=\n\021compilation_group\030\007 \003"
    "(\0132\".spotify.metadata.proto.AlbumGroup\022<"
    "\n\020appears_on_group\030\010 \003(\0132\".spotify.metad"
    "ata.proto.AlbumGroup\022\r\n\005genre\030\t \003(\t\0227\n\013e"
    "xternal_id\030\n \003(\0132\".spotify.metadata.prot"
    "o.ExternalId\022/\n\010portrait\030\013 \003(\0132\035.spotify"
    ".metadata.proto.Image\0224\n\tbiography\030\014 \003(\013"
    "2!.spotify.metadata.proto.Biography\022\?\n\017a"
    "ctivity_period\030\r \003(\0132&.spotify.metadata."
    "proto.ActivityPeriod\0228\n\013restriction\030\016 \003("
    "\0132#.spotify.metadata.proto.Restriction\022/"
    "\n\007related\030\017 \003(\0132\036.spotify.metadata.proto"
    ".Artist\022\037\n\027is_portrait_album_cover\030\020 \001(\010"
    "\022:\n\016portrait_group\030\021 \001(\0132\".spotify.metad"
    "ata.proto.ImageGroup\":\n\nAlbumGroup\022,\n\005al"
    "bum\030\001 \003(\0132\035.spotify.metadata.proto.Album"
    "\"0\n\004Date\022\014\n\004year\030\001 \001(\021\022\r\n\005month\030\002 \001(\021\022\013\n"
    "\003day\030\003 \001(\021\"\307\005\n\005Album\022\013\n\003gid\030\001 \001(\014\022\014\n\004nam"
    "e\030\002 \001(\t\022.\n\006artist\030\003 \003(\0132\036.spotify.metada"
    "ta.proto.Artist\0220\n\004type\030\004 \001(\0162\".spotify."
    "metadata.proto.Album.Type\022\r\n\005label\030\005 \001(\t"
    "\022*\n\004date\030\006 \001(\0132\034.spotify.metadata.proto."
    "Date\022\022\n\npopularity\030\007 \001(\021\022\r\n\005genre\030\010 \003(\t\022"
    ",\n\005cover\030\t \003(\0132\035.spotify.metadata.proto."
    "Image\0227\n\013external_id\030\n \003(\0132\".spotify.met"
    "adata.proto.ExternalId\022*\n\004disc\030\013 \003(\0132\034.s"
    "potify.metadata.proto.Disc\022\016\n\006review\030\014 \003"
    "(\t\0224\n\tcopyright\030\r \003(\0132!.spotify.metadata"
    ".proto.Copyright\0228\n\013restriction\030\016 \003(\0132#."
    "spotify.metadata.proto.Restriction\022.\n\007re"
    "lated\030\017 \003(\0132\035.spotify.metadata.proto.Alb"
    "um\0227\n\013sale_period\030\020 \003(\0132\".spotify.metada"
    "ta.proto.SalePeriod\0227\n\013cover_group\030\021 \001(\013"
    "2\".spotify.metadata.proto.ImageGroup\".\n\004"
    "Type\022\t\n\005ALBUM\020\001\022\n\n\006SINGLE\020\002\022\017\n\013COMPILATI"
    "ON\020\003\"\242\004\n\005Track\022\013\n\003gid\030\001 \001(\014\022\014\n\004name\030\002 \001("
    "\t\022,\n\005album\030\003 \001(\0132\035.spotify.metadata.prot"
    "o.Album\022.\n\006artist\030\004 \003(\0132\036.spotify.metada"
    "ta.proto.Artist\022\016\n\006number\030\005 \001(\021\022\023\n\013disc_"
    "number\030\006 \001(\021\022\020\n\010duration\030\007 \001(\021\022\022\n\npopula"
    "rity\030\010 \001(\021\022\020\n\010explicit\030\t \001(\010\0227\n\013external"
    "_id\030\n \003(\0132\".spotify.metadata.proto.Exter"
    "nalId\0228\n\013restriction\030\013 \003(\0132#.spotify.met"
    "adata.proto.Restriction\022/\n\004file\030\014 \003(\0132!."
    "spotify.metadata.proto.AudioFile\0222\n\013alte"
    "rnative\030\r \003(\0132\035.spotify.metadata.proto.T"
    "rack\0227\n\013sale_period\030\016 \003(\0132\".spotify.meta"
    "data.proto.SalePeriod\0222\n\007preview\030\017 \003(\0132!"
    ".spotify.metadata.proto.AudioFile\"\240\001\n\005Im"
    "age\022\017\n\007file_id\030\001 \001(\014\0220\n\004size\030\002 \001(\0162\".spo"
    "tify.metadata.proto.Image.Size\022\r\n\005width\030"
    "\003 \001(\021\022\016\n\006height\030\004 \001(\021\"5\n\004Size\022\013\n\007DEFAULT"
    "\020\000\022\t\n\005SMALL\020\001\022\t\n\005LARGE\020\002\022\n\n\006XLARGE\020\003\":\n\n"
    "ImageGroup\022,\n\005image\030\001 \003(\0132\035.spotify.meta"
    "data.proto.Image\"\206\001\n\tBiography\022\014\n\004text\030\001"
    " \001(\t\022/\n\010portrait\030\002 \003(\0132\035.spotify.metadat"
    "a.proto.Image\022:\n\016portrait_group\030\003 \003(\0132\"."
    "spotify.metadata.proto.ImageGroup\"R\n\004Dis"
    "c\022\016\n\006number\030\001 \001(\021\022\014\n\004name\030\002 \001(\t\022,\n\005track"
    "\030\003 \003(\0132\035.spotify.metadata.proto.Track\"e\n"
    "\tCopyright\0224\n\004type\030\001 \001(\0162&.spotify.metad"
    "ata.proto.Copyright.Type\022\014\n\004text\030\002 \001(\t\"\024"
    "\n\004Type\022\005\n\001P\020\000\022\005\n\001C\020\001\"\212\002\n\013Restriction\022@\n\t"
    "catalogue\030\001 \003(\0162-.spotify.metadata.proto"
    ".Restriction.Catalogue\022\031\n\021countries_allo"
    "wed\030\002 \001(\t\022\033\n\023countries_forbidden\030\003 \001(\t\0226"
    "\n\004type\030\004 \001(\0162(.spotify.metadata.proto.Re"
    "striction.Type\"2\n\tCatalogue\022\006\n\002AD\020\000\022\020\n\014S"
    "UBSCRIPTION\020\001\022\013\n\007SHUFFLE\020\003\"\025\n\004Type\022\r\n\tST"
    "REAMING\020\000\"\236\001\n\nSalePeriod\0228\n\013restriction\030"
    "\001 \003(\0132#.spotify.metadata.proto.Restricti"
    "on\022+\n\005start\030\002 \001(\0132\034.spotify.metadata.pro"
    "to.Date\022)\n\003end\030\003 \001(\0132\034.spotify.metadata."
    "proto.Date\"&\n\nExternalId\022\014\n\004type\030\001 \001(\t\022\n"
    "\n\002id\030\002 \001(\t\"\316\001\n\tAudioFile\022\017\n\007file_id\030\001 \001("
    "\014\0228\n\006format\030\002 \001(\0162(.spotify.metadata.pro"
    "to.AudioFile.Format\"v\n\006Format\022\021\n\rOGG_VOR"
    "BIS_96\020\000\022\022\n\016OGG_VORBIS_160\020\001\022\022\n\016OGG_VORB"
    "IS_320\020\002\022\013\n\007MP3_256\020\003\022\013\n\007MP3_320\020\004\022\013\n\007MP"
    "3_160\020\005\022\n\n\006MP3_96\020\006B(\n\032com.spotify.metad"
    "ata.protoB\010MetadataH\001", 3621);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metadata.proto", &protobuf_RegisterTypes);
  TopTracks::default_instance_ = new TopTracks();
  ActivityPeriod::default_instance_ = new ActivityPeriod();
  Artist::default_instance_ = new Artist();
  AlbumGroup::default_instance_ = new AlbumGroup();
  Date::default_instance_ = new Date();
  Album::default_instance_ = new Album();
  Track::default_instance_ = new Track();
  Image::default_instance_ = new Image();
  ImageGroup::default_instance_ = new ImageGroup();
  Biography::default_instance_ = new Biography();
  Disc::default_instance_ = new Disc();
  Copyright::default_instance_ = new Copyright();
  Restriction::default_instance_ = new Restriction();
  SalePeriod::default_instance_ = new SalePeriod();
  ExternalId::default_instance_ = new ExternalId();
  AudioFile::default_instance_ = new AudioFile();
  TopTracks::default_instance_->InitAsDefaultInstance();
  ActivityPeriod::default_instance_->InitAsDefaultInstance();
  Artist::default_instance_->InitAsDefaultInstance();
  AlbumGroup::default_instance_->InitAsDefaultInstance();
  Date::default_instance_->InitAsDefaultInstance();
  Album::default_instance_->InitAsDefaultInstance();
  Track::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  ImageGroup::default_instance_->InitAsDefaultInstance();
  Biography::default_instance_->InitAsDefaultInstance();
  Disc::default_instance_->InitAsDefaultInstance();
  Copyright::default_instance_->InitAsDefaultInstance();
  Restriction::default_instance_->InitAsDefaultInstance();
  SalePeriod::default_instance_->InitAsDefaultInstance();
  ExternalId::default_instance_->InitAsDefaultInstance();
  AudioFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_metadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_metadata_2eproto {
  StaticDescriptorInitializer_metadata_2eproto() {
    protobuf_AddDesc_metadata_2eproto();
  }
} static_descriptor_initializer_metadata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TopTracks::kCountryFieldNumber;
const int TopTracks::kTrackFieldNumber;
#endif  // !_MSC_VER

TopTracks::TopTracks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.TopTracks)
}

void TopTracks::InitAsDefaultInstance() {
}

TopTracks::TopTracks(const TopTracks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.TopTracks)
}

void TopTracks::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopTracks::~TopTracks() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.TopTracks)
  SharedDtor();
}

void TopTracks::SharedDtor() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (this != default_instance_) {
  }
}

void TopTracks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopTracks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopTracks_descriptor_;
}

const TopTracks& TopTracks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

TopTracks* TopTracks::default_instance_ = NULL;

TopTracks* TopTracks::New() const {
  return new TopTracks;
}

void TopTracks::Clear() {
  if (has_country()) {
    if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      country_->clear();
    }
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopTracks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.TopTracks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_track;
        break;
      }

      // repeated .spotify.metadata.proto.Track track = 2;
      case 2: {
        if (tag == 18) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_track;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.TopTracks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.TopTracks)
  return false;
#undef DO_
}

void TopTracks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.TopTracks)
  // optional string country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country(), output);
  }

  // repeated .spotify.metadata.proto.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->track(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.TopTracks)
}

::google::protobuf::uint8* TopTracks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.TopTracks)
  // optional string country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country(), target);
  }

  // repeated .spotify.metadata.proto.Track track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->track(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.TopTracks)
  return target;
}

int TopTracks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  // repeated .spotify.metadata.proto.Track track = 2;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopTracks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopTracks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopTracks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopTracks::MergeFrom(const TopTracks& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopTracks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopTracks::CopyFrom(const TopTracks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopTracks::IsInitialized() const {

  return true;
}

void TopTracks::Swap(TopTracks* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    track_.Swap(&other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopTracks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopTracks_descriptor_;
  metadata.reflection = TopTracks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityPeriod::kStartYearFieldNumber;
const int ActivityPeriod::kEndYearFieldNumber;
const int ActivityPeriod::kDecadeFieldNumber;
#endif  // !_MSC_VER

ActivityPeriod::ActivityPeriod()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.ActivityPeriod)
}

void ActivityPeriod::InitAsDefaultInstance() {
}

ActivityPeriod::ActivityPeriod(const ActivityPeriod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.ActivityPeriod)
}

void ActivityPeriod::SharedCtor() {
  _cached_size_ = 0;
  start_year_ = 0;
  end_year_ = 0;
  decade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityPeriod::~ActivityPeriod() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.ActivityPeriod)
  SharedDtor();
}

void ActivityPeriod::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityPeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityPeriod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityPeriod_descriptor_;
}

const ActivityPeriod& ActivityPeriod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

ActivityPeriod* ActivityPeriod::default_instance_ = NULL;

ActivityPeriod* ActivityPeriod::New() const {
  return new ActivityPeriod;
}

void ActivityPeriod::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityPeriod*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_year_, decade_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityPeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.ActivityPeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 start_year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &start_year_)));
          set_has_start_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_year;
        break;
      }

      // optional sint32 end_year = 2;
      case 2: {
        if (tag == 16) {
         parse_end_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &end_year_)));
          set_has_end_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_decade;
        break;
      }

      // optional sint32 decade = 3;
      case 3: {
        if (tag == 24) {
         parse_decade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &decade_)));
          set_has_decade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.ActivityPeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.ActivityPeriod)
  return false;
#undef DO_
}

void ActivityPeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.ActivityPeriod)
  // optional sint32 start_year = 1;
  if (has_start_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->start_year(), output);
  }

  // optional sint32 end_year = 2;
  if (has_end_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->end_year(), output);
  }

  // optional sint32 decade = 3;
  if (has_decade()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->decade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.ActivityPeriod)
}

::google::protobuf::uint8* ActivityPeriod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.ActivityPeriod)
  // optional sint32 start_year = 1;
  if (has_start_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->start_year(), target);
  }

  // optional sint32 end_year = 2;
  if (has_end_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->end_year(), target);
  }

  // optional sint32 decade = 3;
  if (has_decade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->decade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.ActivityPeriod)
  return target;
}

int ActivityPeriod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 start_year = 1;
    if (has_start_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->start_year());
    }

    // optional sint32 end_year = 2;
    if (has_end_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->end_year());
    }

    // optional sint32 decade = 3;
    if (has_decade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->decade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityPeriod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityPeriod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityPeriod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityPeriod::MergeFrom(const ActivityPeriod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_year()) {
      set_start_year(from.start_year());
    }
    if (from.has_end_year()) {
      set_end_year(from.end_year());
    }
    if (from.has_decade()) {
      set_decade(from.decade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityPeriod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityPeriod::CopyFrom(const ActivityPeriod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityPeriod::IsInitialized() const {

  return true;
}

void ActivityPeriod::Swap(ActivityPeriod* other) {
  if (other != this) {
    std::swap(start_year_, other->start_year_);
    std::swap(end_year_, other->end_year_);
    std::swap(decade_, other->decade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityPeriod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityPeriod_descriptor_;
  metadata.reflection = ActivityPeriod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Artist::kGidFieldNumber;
const int Artist::kNameFieldNumber;
const int Artist::kPopularityFieldNumber;
const int Artist::kTopTrackFieldNumber;
const int Artist::kAlbumGroupFieldNumber;
const int Artist::kSingleGroupFieldNumber;
const int Artist::kCompilationGroupFieldNumber;
const int Artist::kAppearsOnGroupFieldNumber;
const int Artist::kGenreFieldNumber;
const int Artist::kExternalIdFieldNumber;
const int Artist::kPortraitFieldNumber;
const int Artist::kBiographyFieldNumber;
const int Artist::kActivityPeriodFieldNumber;
const int Artist::kRestrictionFieldNumber;
const int Artist::kRelatedFieldNumber;
const int Artist::kIsPortraitAlbumCoverFieldNumber;
const int Artist::kPortraitGroupFieldNumber;
#endif  // !_MSC_VER

Artist::Artist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Artist)
}

void Artist::InitAsDefaultInstance() {
  portrait_group_ = const_cast< ::spotify::metadata::proto::ImageGroup*>(&::spotify::metadata::proto::ImageGroup::default_instance());
}

Artist::Artist(const Artist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Artist)
}

void Artist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  popularity_ = 0;
  is_portrait_album_cover_ = false;
  portrait_group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Artist::~Artist() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Artist)
  SharedDtor();
}

void Artist::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete portrait_group_;
  }
}

void Artist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Artist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Artist_descriptor_;
}

const Artist& Artist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Artist* Artist::default_instance_ = NULL;

Artist* Artist::New() const {
  return new Artist;
}

void Artist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    popularity_ = 0;
  }
  is_portrait_album_cover_ = false;
  if (has_portrait_group()) {
    if (portrait_group_ != NULL) portrait_group_->::spotify::metadata::proto::ImageGroup::Clear();
  }
  top_track_.Clear();
  album_group_.Clear();
  single_group_.Clear();
  compilation_group_.Clear();
  appears_on_group_.Clear();
  genre_.Clear();
  external_id_.Clear();
  portrait_.Clear();
  biography_.Clear();
  activity_period_.Clear();
  restriction_.Clear();
  related_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Artist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Artist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_popularity;
        break;
      }

      // optional sint32 popularity = 3;
      case 3: {
        if (tag == 24) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_top_track;
        break;
      }

      // repeated .spotify.metadata.proto.TopTracks top_track = 4;
      case 4: {
        if (tag == 34) {
         parse_top_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_top_track()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_top_track;
        if (input->ExpectTag(42)) goto parse_album_group;
        break;
      }

      // repeated .spotify.metadata.proto.AlbumGroup album_group = 5;
      case 5: {
        if (tag == 42) {
         parse_album_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_album_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_album_group;
        if (input->ExpectTag(50)) goto parse_single_group;
        break;
      }

      // repeated .spotify.metadata.proto.AlbumGroup single_group = 6;
      case 6: {
        if (tag == 50) {
         parse_single_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_single_group;
        if (input->ExpectTag(58)) goto parse_compilation_group;
        break;
      }

      // repeated .spotify.metadata.proto.AlbumGroup compilation_group = 7;
      case 7: {
        if (tag == 58) {
         parse_compilation_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compilation_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_compilation_group;
        if (input->ExpectTag(66)) goto parse_appears_on_group;
        break;
      }

      // repeated .spotify.metadata.proto.AlbumGroup appears_on_group = 8;
      case 8: {
        if (tag == 66) {
         parse_appears_on_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appears_on_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_appears_on_group;
        if (input->ExpectTag(74)) goto parse_genre;
        break;
      }

      // repeated string genre = 9;
      case 9: {
        if (tag == 74) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->genre(this->genre_size() - 1).data(),
            this->genre(this->genre_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "genre");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_genre;
        if (input->ExpectTag(82)) goto parse_external_id;
        break;
      }

      // repeated .spotify.metadata.proto.ExternalId external_id = 10;
      case 10: {
        if (tag == 82) {
         parse_external_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_external_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_external_id;
        if (input->ExpectTag(90)) goto parse_portrait;
        break;
      }

      // repeated .spotify.metadata.proto.Image portrait = 11;
      case 11: {
        if (tag == 90) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_portrait;
        if (input->ExpectTag(98)) goto parse_biography;
        break;
      }

      // repeated .spotify.metadata.proto.Biography biography = 12;
      case 12: {
        if (tag == 98) {
         parse_biography:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_biography()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_biography;
        if (input->ExpectTag(106)) goto parse_activity_period;
        break;
      }

      // repeated .spotify.metadata.proto.ActivityPeriod activity_period = 13;
      case 13: {
        if (tag == 106) {
         parse_activity_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_period()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_activity_period;
        if (input->ExpectTag(114)) goto parse_restriction;
        break;
      }

      // repeated .spotify.metadata.proto.Restriction restriction = 14;
      case 14: {
        if (tag == 114) {
         parse_restriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_restriction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_restriction;
        if (input->ExpectTag(122)) goto parse_related;
        break;
      }

      // repeated .spotify.metadata.proto.Artist related = 15;
      case 15: {
        if (tag == 122) {
         parse_related:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_related()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_related;
        if (input->ExpectTag(128)) goto parse_is_portrait_album_cover;
        break;
      }

      // optional bool is_portrait_album_cover = 16;
      case 16: {
        if (tag == 128) {
         parse_is_portrait_album_cover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_portrait_album_cover_)));
          set_has_is_portrait_album_cover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_portrait_group;
        break;
      }

      // optional .spotify.metadata.proto.ImageGroup portrait_group = 17;
      case 17: {
        if (tag == 138) {
         parse_portrait_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portrait_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Artist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Artist)
  return false;
#undef DO_
}

void Artist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Artist)
  // optional bytes gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional sint32 popularity = 3;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->popularity(), output);
  }

  // repeated .spotify.metadata.proto.TopTracks top_track = 4;
  for (int i = 0; i < this->top_track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->top_track(i), output);
  }

  // repeated .spotify.metadata.proto.AlbumGroup album_group = 5;
  for (int i = 0; i < this->album_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->album_group(i), output);
  }

  // repeated .spotify.metadata.proto.AlbumGroup single_group = 6;
  for (int i = 0; i < this->single_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->single_group(i), output);
  }

  // repeated .spotify.metadata.proto.AlbumGroup compilation_group = 7;
  for (int i = 0; i < this->compilation_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->compilation_group(i), output);
  }

  // repeated .spotify.metadata.proto.AlbumGroup appears_on_group = 8;
  for (int i = 0; i < this->appears_on_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->appears_on_group(i), output);
  }

  // repeated string genre = 9;
  for (int i = 0; i < this->genre_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->genre(i).data(), this->genre(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "genre");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->genre(i), output);
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  for (int i = 0; i < this->external_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->external_id(i), output);
  }

  // repeated .spotify.metadata.proto.Image portrait = 11;
  for (int i = 0; i < this->portrait_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->portrait(i), output);
  }

  // repeated .spotify.metadata.proto.Biography biography = 12;
  for (int i = 0; i < this->biography_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->biography(i), output);
  }

  // repeated .spotify.metadata.proto.ActivityPeriod activity_period = 13;
  for (int i = 0; i < this->activity_period_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->activity_period(i), output);
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 14;
  for (int i = 0; i < this->restriction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->restriction(i), output);
  }

  // repeated .spotify.metadata.proto.Artist related = 15;
  for (int i = 0; i < this->related_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->related(i), output);
  }

  // optional bool is_portrait_album_cover = 16;
  if (has_is_portrait_album_cover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_portrait_album_cover(), output);
  }

  // optional .spotify.metadata.proto.ImageGroup portrait_group = 17;
  if (has_portrait_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->portrait_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Artist)
}

::google::protobuf::uint8* Artist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Artist)
  // optional bytes gid = 1;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional sint32 popularity = 3;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->popularity(), target);
  }

  // repeated .spotify.metadata.proto.TopTracks top_track = 4;
  for (int i = 0; i < this->top_track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->top_track(i), target);
  }

  // repeated .spotify.metadata.proto.AlbumGroup album_group = 5;
  for (int i = 0; i < this->album_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->album_group(i), target);
  }

  // repeated .spotify.metadata.proto.AlbumGroup single_group = 6;
  for (int i = 0; i < this->single_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->single_group(i), target);
  }

  // repeated .spotify.metadata.proto.AlbumGroup compilation_group = 7;
  for (int i = 0; i < this->compilation_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->compilation_group(i), target);
  }

  // repeated .spotify.metadata.proto.AlbumGroup appears_on_group = 8;
  for (int i = 0; i < this->appears_on_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->appears_on_group(i), target);
  }

  // repeated string genre = 9;
  for (int i = 0; i < this->genre_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre(i).data(), this->genre(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "genre");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->genre(i), target);
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  for (int i = 0; i < this->external_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->external_id(i), target);
  }

  // repeated .spotify.metadata.proto.Image portrait = 11;
  for (int i = 0; i < this->portrait_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->portrait(i), target);
  }

  // repeated .spotify.metadata.proto.Biography biography = 12;
  for (int i = 0; i < this->biography_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->biography(i), target);
  }

  // repeated .spotify.metadata.proto.ActivityPeriod activity_period = 13;
  for (int i = 0; i < this->activity_period_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->activity_period(i), target);
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 14;
  for (int i = 0; i < this->restriction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->restriction(i), target);
  }

  // repeated .spotify.metadata.proto.Artist related = 15;
  for (int i = 0; i < this->related_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->related(i), target);
  }

  // optional bool is_portrait_album_cover = 16;
  if (has_is_portrait_album_cover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_portrait_album_cover(), target);
  }

  // optional .spotify.metadata.proto.ImageGroup portrait_group = 17;
  if (has_portrait_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->portrait_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Artist)
  return target;
}

int Artist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sint32 popularity = 3;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->popularity());
    }

  }
  if (_has_bits_[15 / 32] & (0xffu << (15 % 32))) {
    // optional bool is_portrait_album_cover = 16;
    if (has_is_portrait_album_cover()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .spotify.metadata.proto.ImageGroup portrait_group = 17;
    if (has_portrait_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portrait_group());
    }

  }
  // repeated .spotify.metadata.proto.TopTracks top_track = 4;
  total_size += 1 * this->top_track_size();
  for (int i = 0; i < this->top_track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->top_track(i));
  }

  // repeated .spotify.metadata.proto.AlbumGroup album_group = 5;
  total_size += 1 * this->album_group_size();
  for (int i = 0; i < this->album_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->album_group(i));
  }

  // repeated .spotify.metadata.proto.AlbumGroup single_group = 6;
  total_size += 1 * this->single_group_size();
  for (int i = 0; i < this->single_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single_group(i));
  }

  // repeated .spotify.metadata.proto.AlbumGroup compilation_group = 7;
  total_size += 1 * this->compilation_group_size();
  for (int i = 0; i < this->compilation_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compilation_group(i));
  }

  // repeated .spotify.metadata.proto.AlbumGroup appears_on_group = 8;
  total_size += 1 * this->appears_on_group_size();
  for (int i = 0; i < this->appears_on_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appears_on_group(i));
  }

  // repeated string genre = 9;
  total_size += 1 * this->genre_size();
  for (int i = 0; i < this->genre_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->genre(i));
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  total_size += 1 * this->external_id_size();
  for (int i = 0; i < this->external_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->external_id(i));
  }

  // repeated .spotify.metadata.proto.Image portrait = 11;
  total_size += 1 * this->portrait_size();
  for (int i = 0; i < this->portrait_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portrait(i));
  }

  // repeated .spotify.metadata.proto.Biography biography = 12;
  total_size += 1 * this->biography_size();
  for (int i = 0; i < this->biography_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->biography(i));
  }

  // repeated .spotify.metadata.proto.ActivityPeriod activity_period = 13;
  total_size += 1 * this->activity_period_size();
  for (int i = 0; i < this->activity_period_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_period(i));
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 14;
  total_size += 1 * this->restriction_size();
  for (int i = 0; i < this->restriction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->restriction(i));
  }

  // repeated .spotify.metadata.proto.Artist related = 15;
  total_size += 1 * this->related_size();
  for (int i = 0; i < this->related_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->related(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Artist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Artist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Artist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Artist::MergeFrom(const Artist& from) {
  GOOGLE_CHECK_NE(&from, this);
  top_track_.MergeFrom(from.top_track_);
  album_group_.MergeFrom(from.album_group_);
  single_group_.MergeFrom(from.single_group_);
  compilation_group_.MergeFrom(from.compilation_group_);
  appears_on_group_.MergeFrom(from.appears_on_group_);
  genre_.MergeFrom(from.genre_);
  external_id_.MergeFrom(from.external_id_);
  portrait_.MergeFrom(from.portrait_);
  biography_.MergeFrom(from.biography_);
  activity_period_.MergeFrom(from.activity_period_);
  restriction_.MergeFrom(from.restriction_);
  related_.MergeFrom(from.related_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
  }
  if (from._has_bits_[15 / 32] & (0xffu << (15 % 32))) {
    if (from.has_is_portrait_album_cover()) {
      set_is_portrait_album_cover(from.is_portrait_album_cover());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_portrait_group()) {
      mutable_portrait_group()->::spotify::metadata::proto::ImageGroup::MergeFrom(from.portrait_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Artist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Artist::CopyFrom(const Artist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Artist::IsInitialized() const {

  return true;
}

void Artist::Swap(Artist* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    std::swap(popularity_, other->popularity_);
    top_track_.Swap(&other->top_track_);
    album_group_.Swap(&other->album_group_);
    single_group_.Swap(&other->single_group_);
    compilation_group_.Swap(&other->compilation_group_);
    appears_on_group_.Swap(&other->appears_on_group_);
    genre_.Swap(&other->genre_);
    external_id_.Swap(&other->external_id_);
    portrait_.Swap(&other->portrait_);
    biography_.Swap(&other->biography_);
    activity_period_.Swap(&other->activity_period_);
    restriction_.Swap(&other->restriction_);
    related_.Swap(&other->related_);
    std::swap(is_portrait_album_cover_, other->is_portrait_album_cover_);
    std::swap(portrait_group_, other->portrait_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Artist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Artist_descriptor_;
  metadata.reflection = Artist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlbumGroup::kAlbumFieldNumber;
#endif  // !_MSC_VER

AlbumGroup::AlbumGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.AlbumGroup)
}

void AlbumGroup::InitAsDefaultInstance() {
}

AlbumGroup::AlbumGroup(const AlbumGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.AlbumGroup)
}

void AlbumGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlbumGroup::~AlbumGroup() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.AlbumGroup)
  SharedDtor();
}

void AlbumGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlbumGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlbumGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlbumGroup_descriptor_;
}

const AlbumGroup& AlbumGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

AlbumGroup* AlbumGroup::default_instance_ = NULL;

AlbumGroup* AlbumGroup::New() const {
  return new AlbumGroup;
}

void AlbumGroup::Clear() {
  album_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlbumGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.AlbumGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spotify.metadata.proto.Album album = 1;
      case 1: {
        if (tag == 10) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_album()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_album;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.AlbumGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.AlbumGroup)
  return false;
#undef DO_
}

void AlbumGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.AlbumGroup)
  // repeated .spotify.metadata.proto.Album album = 1;
  for (int i = 0; i < this->album_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->album(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.AlbumGroup)
}

::google::protobuf::uint8* AlbumGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.AlbumGroup)
  // repeated .spotify.metadata.proto.Album album = 1;
  for (int i = 0; i < this->album_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->album(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.AlbumGroup)
  return target;
}

int AlbumGroup::ByteSize() const {
  int total_size = 0;

  // repeated .spotify.metadata.proto.Album album = 1;
  total_size += 1 * this->album_size();
  for (int i = 0; i < this->album_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->album(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlbumGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlbumGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlbumGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlbumGroup::MergeFrom(const AlbumGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  album_.MergeFrom(from.album_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlbumGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlbumGroup::CopyFrom(const AlbumGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlbumGroup::IsInitialized() const {

  return true;
}

void AlbumGroup::Swap(AlbumGroup* other) {
  if (other != this) {
    album_.Swap(&other->album_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlbumGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlbumGroup_descriptor_;
  metadata.reflection = AlbumGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Date::kYearFieldNumber;
const int Date::kMonthFieldNumber;
const int Date::kDayFieldNumber;
#endif  // !_MSC_VER

Date::Date()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Date)
}

void Date::InitAsDefaultInstance() {
}

Date::Date(const Date& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Date)
}

void Date::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0;
  month_ = 0;
  day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Date)
  SharedDtor();
}

void Date::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Date::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Date::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Date_descriptor_;
}

const Date& Date::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Date* Date::default_instance_ = NULL;

Date* Date::New() const {
  return new Date;
}

void Date::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Date*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(year_, day_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Date)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional sint32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional sint32 day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Date)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Date)
  return false;
#undef DO_
}

void Date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Date)
  // optional sint32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->year(), output);
  }

  // optional sint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->month(), output);
  }

  // optional sint32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Date)
}

::google::protobuf::uint8* Date::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Date)
  // optional sint32 year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->year(), target);
  }

  // optional sint32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->month(), target);
  }

  // optional sint32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Date)
  return target;
}

int Date::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->year());
    }

    // optional sint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->month());
    }

    // optional sint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Date::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Date* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Date*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Date::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {

  return true;
}

void Date::Swap(Date* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Date::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Date_descriptor_;
  metadata.reflection = Date_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Album_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Album_Type_descriptor_;
}
bool Album_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Album_Type Album::ALBUM;
const Album_Type Album::SINGLE;
const Album_Type Album::COMPILATION;
const Album_Type Album::Type_MIN;
const Album_Type Album::Type_MAX;
const int Album::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Album::kGidFieldNumber;
const int Album::kNameFieldNumber;
const int Album::kArtistFieldNumber;
const int Album::kTypeFieldNumber;
const int Album::kLabelFieldNumber;
const int Album::kDateFieldNumber;
const int Album::kPopularityFieldNumber;
const int Album::kGenreFieldNumber;
const int Album::kCoverFieldNumber;
const int Album::kExternalIdFieldNumber;
const int Album::kDiscFieldNumber;
const int Album::kReviewFieldNumber;
const int Album::kCopyrightFieldNumber;
const int Album::kRestrictionFieldNumber;
const int Album::kRelatedFieldNumber;
const int Album::kSalePeriodFieldNumber;
const int Album::kCoverGroupFieldNumber;
#endif  // !_MSC_VER

Album::Album()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Album)
}

void Album::InitAsDefaultInstance() {
  date_ = const_cast< ::spotify::metadata::proto::Date*>(&::spotify::metadata::proto::Date::default_instance());
  cover_group_ = const_cast< ::spotify::metadata::proto::ImageGroup*>(&::spotify::metadata::proto::ImageGroup::default_instance());
}

Album::Album(const Album& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Album)
}

void Album::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_ = NULL;
  popularity_ = 0;
  cover_group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Album::~Album() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Album)
  SharedDtor();
}

void Album::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
    delete date_;
    delete cover_group_;
  }
}

void Album::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Album::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Album_descriptor_;
}

const Album& Album::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Album* Album::default_instance_ = NULL;

Album* Album::New() const {
  return new Album;
}

void Album::Clear() {
  if (_has_bits_[0 / 32] & 123) {
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    if (has_date()) {
      if (date_ != NULL) date_->::spotify::metadata::proto::Date::Clear();
    }
    popularity_ = 0;
  }
  if (has_cover_group()) {
    if (cover_group_ != NULL) cover_group_->::spotify::metadata::proto::ImageGroup::Clear();
  }
  artist_.Clear();
  genre_.Clear();
  cover_.Clear();
  external_id_.Clear();
  disc_.Clear();
  review_.Clear();
  copyright_.Clear();
  restriction_.Clear();
  related_.Clear();
  sale_period_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Album::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Album)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_artist;
        break;
      }

      // repeated .spotify.metadata.proto.Artist artist = 3;
      case 3: {
        if (tag == 26) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_artist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_artist;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .spotify.metadata.proto.Album.Type type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::metadata::proto::Album_Type_IsValid(value)) {
            set_type(static_cast< ::spotify::metadata::proto::Album_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_label;
        break;
      }

      // optional string label = 5;
      case 5: {
        if (tag == 42) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_date;
        break;
      }

      // optional .spotify.metadata.proto.Date date = 6;
      case 6: {
        if (tag == 50) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_popularity;
        break;
      }

      // optional sint32 popularity = 7;
      case 7: {
        if (tag == 56) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_genre;
        break;
      }

      // repeated string genre = 8;
      case 8: {
        if (tag == 66) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->genre(this->genre_size() - 1).data(),
            this->genre(this->genre_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "genre");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_genre;
        if (input->ExpectTag(74)) goto parse_cover;
        break;
      }

      // repeated .spotify.metadata.proto.Image cover = 9;
      case 9: {
        if (tag == 74) {
         parse_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cover;
        if (input->ExpectTag(82)) goto parse_external_id;
        break;
      }

      // repeated .spotify.metadata.proto.ExternalId external_id = 10;
      case 10: {
        if (tag == 82) {
         parse_external_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_external_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_external_id;
        if (input->ExpectTag(90)) goto parse_disc;
        break;
      }

      // repeated .spotify.metadata.proto.Disc disc = 11;
      case 11: {
        if (tag == 90) {
         parse_disc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_disc;
        if (input->ExpectTag(98)) goto parse_review;
        break;
      }

      // repeated string review = 12;
      case 12: {
        if (tag == 98) {
         parse_review:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_review()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->review(this->review_size() - 1).data(),
            this->review(this->review_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "review");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_review;
        if (input->ExpectTag(106)) goto parse_copyright;
        break;
      }

      // repeated .spotify.metadata.proto.Copyright copyright = 13;
      case 13: {
        if (tag == 106) {
         parse_copyright:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_copyright()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_copyright;
        if (input->ExpectTag(114)) goto parse_restriction;
        break;
      }

      // repeated .spotify.metadata.proto.Restriction restriction = 14;
      case 14: {
        if (tag == 114) {
         parse_restriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_restriction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_restriction;
        if (input->ExpectTag(122)) goto parse_related;
        break;
      }

      // repeated .spotify.metadata.proto.Album related = 15;
      case 15: {
        if (tag == 122) {
         parse_related:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_related()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_related;
        if (input->ExpectTag(130)) goto parse_sale_period;
        break;
      }

      // repeated .spotify.metadata.proto.SalePeriod sale_period = 16;
      case 16: {
        if (tag == 130) {
         parse_sale_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sale_period()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_sale_period;
        if (input->ExpectTag(138)) goto parse_cover_group;
        break;
      }

      // optional .spotify.metadata.proto.ImageGroup cover_group = 17;
      case 17: {
        if (tag == 138) {
         parse_cover_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cover_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Album)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Album)
  return false;
#undef DO_
}

void Album::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Album)
  // optional bytes gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .spotify.metadata.proto.Artist artist = 3;
  for (int i = 0; i < this->artist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->artist(i), output);
  }

  // optional .spotify.metadata.proto.Album.Type type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->label(), output);
  }

  // optional .spotify.metadata.proto.Date date = 6;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->date(), output);
  }

  // optional sint32 popularity = 7;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->popularity(), output);
  }

  // repeated string genre = 8;
  for (int i = 0; i < this->genre_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->genre(i).data(), this->genre(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "genre");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->genre(i), output);
  }

  // repeated .spotify.metadata.proto.Image cover = 9;
  for (int i = 0; i < this->cover_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->cover(i), output);
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  for (int i = 0; i < this->external_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->external_id(i), output);
  }

  // repeated .spotify.metadata.proto.Disc disc = 11;
  for (int i = 0; i < this->disc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->disc(i), output);
  }

  // repeated string review = 12;
  for (int i = 0; i < this->review_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->review(i).data(), this->review(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "review");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->review(i), output);
  }

  // repeated .spotify.metadata.proto.Copyright copyright = 13;
  for (int i = 0; i < this->copyright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->copyright(i), output);
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 14;
  for (int i = 0; i < this->restriction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->restriction(i), output);
  }

  // repeated .spotify.metadata.proto.Album related = 15;
  for (int i = 0; i < this->related_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->related(i), output);
  }

  // repeated .spotify.metadata.proto.SalePeriod sale_period = 16;
  for (int i = 0; i < this->sale_period_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sale_period(i), output);
  }

  // optional .spotify.metadata.proto.ImageGroup cover_group = 17;
  if (has_cover_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->cover_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Album)
}

::google::protobuf::uint8* Album::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Album)
  // optional bytes gid = 1;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .spotify.metadata.proto.Artist artist = 3;
  for (int i = 0; i < this->artist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->artist(i), target);
  }

  // optional .spotify.metadata.proto.Album.Type type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->label(), target);
  }

  // optional .spotify.metadata.proto.Date date = 6;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->date(), target);
  }

  // optional sint32 popularity = 7;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->popularity(), target);
  }

  // repeated string genre = 8;
  for (int i = 0; i < this->genre_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre(i).data(), this->genre(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "genre");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->genre(i), target);
  }

  // repeated .spotify.metadata.proto.Image cover = 9;
  for (int i = 0; i < this->cover_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->cover(i), target);
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  for (int i = 0; i < this->external_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->external_id(i), target);
  }

  // repeated .spotify.metadata.proto.Disc disc = 11;
  for (int i = 0; i < this->disc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->disc(i), target);
  }

  // repeated string review = 12;
  for (int i = 0; i < this->review_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->review(i).data(), this->review(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "review");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->review(i), target);
  }

  // repeated .spotify.metadata.proto.Copyright copyright = 13;
  for (int i = 0; i < this->copyright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->copyright(i), target);
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 14;
  for (int i = 0; i < this->restriction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->restriction(i), target);
  }

  // repeated .spotify.metadata.proto.Album related = 15;
  for (int i = 0; i < this->related_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->related(i), target);
  }

  // repeated .spotify.metadata.proto.SalePeriod sale_period = 16;
  for (int i = 0; i < this->sale_period_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->sale_period(i), target);
  }

  // optional .spotify.metadata.proto.ImageGroup cover_group = 17;
  if (has_cover_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->cover_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Album)
  return target;
}

int Album::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .spotify.metadata.proto.Album.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional .spotify.metadata.proto.Date date = 6;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

    // optional sint32 popularity = 7;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->popularity());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .spotify.metadata.proto.ImageGroup cover_group = 17;
    if (has_cover_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cover_group());
    }

  }
  // repeated .spotify.metadata.proto.Artist artist = 3;
  total_size += 1 * this->artist_size();
  for (int i = 0; i < this->artist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->artist(i));
  }

  // repeated string genre = 8;
  total_size += 1 * this->genre_size();
  for (int i = 0; i < this->genre_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->genre(i));
  }

  // repeated .spotify.metadata.proto.Image cover = 9;
  total_size += 1 * this->cover_size();
  for (int i = 0; i < this->cover_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cover(i));
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  total_size += 1 * this->external_id_size();
  for (int i = 0; i < this->external_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->external_id(i));
  }

  // repeated .spotify.metadata.proto.Disc disc = 11;
  total_size += 1 * this->disc_size();
  for (int i = 0; i < this->disc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disc(i));
  }

  // repeated string review = 12;
  total_size += 1 * this->review_size();
  for (int i = 0; i < this->review_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->review(i));
  }

  // repeated .spotify.metadata.proto.Copyright copyright = 13;
  total_size += 1 * this->copyright_size();
  for (int i = 0; i < this->copyright_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copyright(i));
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 14;
  total_size += 1 * this->restriction_size();
  for (int i = 0; i < this->restriction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->restriction(i));
  }

  // repeated .spotify.metadata.proto.Album related = 15;
  total_size += 1 * this->related_size();
  for (int i = 0; i < this->related_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->related(i));
  }

  // repeated .spotify.metadata.proto.SalePeriod sale_period = 16;
  total_size += 2 * this->sale_period_size();
  for (int i = 0; i < this->sale_period_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sale_period(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Album::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Album* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Album*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Album::MergeFrom(const Album& from) {
  GOOGLE_CHECK_NE(&from, this);
  artist_.MergeFrom(from.artist_);
  genre_.MergeFrom(from.genre_);
  cover_.MergeFrom(from.cover_);
  external_id_.MergeFrom(from.external_id_);
  disc_.MergeFrom(from.disc_);
  review_.MergeFrom(from.review_);
  copyright_.MergeFrom(from.copyright_);
  restriction_.MergeFrom(from.restriction_);
  related_.MergeFrom(from.related_);
  sale_period_.MergeFrom(from.sale_period_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_date()) {
      mutable_date()->::spotify::metadata::proto::Date::MergeFrom(from.date());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cover_group()) {
      mutable_cover_group()->::spotify::metadata::proto::ImageGroup::MergeFrom(from.cover_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Album::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Album::CopyFrom(const Album& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Album::IsInitialized() const {

  return true;
}

void Album::Swap(Album* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    artist_.Swap(&other->artist_);
    std::swap(type_, other->type_);
    std::swap(label_, other->label_);
    std::swap(date_, other->date_);
    std::swap(popularity_, other->popularity_);
    genre_.Swap(&other->genre_);
    cover_.Swap(&other->cover_);
    external_id_.Swap(&other->external_id_);
    disc_.Swap(&other->disc_);
    review_.Swap(&other->review_);
    copyright_.Swap(&other->copyright_);
    restriction_.Swap(&other->restriction_);
    related_.Swap(&other->related_);
    sale_period_.Swap(&other->sale_period_);
    std::swap(cover_group_, other->cover_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Album::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Album_descriptor_;
  metadata.reflection = Album_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Track::kGidFieldNumber;
const int Track::kNameFieldNumber;
const int Track::kAlbumFieldNumber;
const int Track::kArtistFieldNumber;
const int Track::kNumberFieldNumber;
const int Track::kDiscNumberFieldNumber;
const int Track::kDurationFieldNumber;
const int Track::kPopularityFieldNumber;
const int Track::kExplicitFieldNumber;
const int Track::kExternalIdFieldNumber;
const int Track::kRestrictionFieldNumber;
const int Track::kFileFieldNumber;
const int Track::kAlternativeFieldNumber;
const int Track::kSalePeriodFieldNumber;
const int Track::kPreviewFieldNumber;
#endif  // !_MSC_VER

Track::Track()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Track)
}

void Track::InitAsDefaultInstance() {
  album_ = const_cast< ::spotify::metadata::proto::Album*>(&::spotify::metadata::proto::Album::default_instance());
}

Track::Track(const Track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Track)
}

void Track::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_ = NULL;
  number_ = 0;
  disc_number_ = 0;
  duration_ = 0;
  popularity_ = 0;
  explicit__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Track)
  SharedDtor();
}

void Track::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete album_;
  }
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Track_descriptor_;
}

const Track& Track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Track* Track::default_instance_ = NULL;

Track* Track::New() const {
  return new Track;
}

void Track::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Track*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(number_, popularity_);
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_album()) {
      if (album_ != NULL) album_->::spotify::metadata::proto::Album::Clear();
    }
  }
  explicit__ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  artist_.Clear();
  external_id_.Clear();
  restriction_.Clear();
  file_.Clear();
  alternative_.Clear();
  sale_period_.Clear();
  preview_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Track)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_album;
        break;
      }

      // optional .spotify.metadata.proto.Album album = 3;
      case 3: {
        if (tag == 26) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_album()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_artist;
        break;
      }

      // repeated .spotify.metadata.proto.Artist artist = 4;
      case 4: {
        if (tag == 34) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_artist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_artist;
        if (input->ExpectTag(40)) goto parse_number;
        break;
      }

      // optional sint32 number = 5;
      case 5: {
        if (tag == 40) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_disc_number;
        break;
      }

      // optional sint32 disc_number = 6;
      case 6: {
        if (tag == 48) {
         parse_disc_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &disc_number_)));
          set_has_disc_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_duration;
        break;
      }

      // optional sint32 duration = 7;
      case 7: {
        if (tag == 56) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_popularity;
        break;
      }

      // optional sint32 popularity = 8;
      case 8: {
        if (tag == 64) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_explicit;
        break;
      }

      // optional bool explicit = 9;
      case 9: {
        if (tag == 72) {
         parse_explicit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit__)));
          set_has_explicit_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_external_id;
        break;
      }

      // repeated .spotify.metadata.proto.ExternalId external_id = 10;
      case 10: {
        if (tag == 82) {
         parse_external_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_external_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_external_id;
        if (input->ExpectTag(90)) goto parse_restriction;
        break;
      }

      // repeated .spotify.metadata.proto.Restriction restriction = 11;
      case 11: {
        if (tag == 90) {
         parse_restriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_restriction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_restriction;
        if (input->ExpectTag(98)) goto parse_file;
        break;
      }

      // repeated .spotify.metadata.proto.AudioFile file = 12;
      case 12: {
        if (tag == 98) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_file;
        if (input->ExpectTag(106)) goto parse_alternative;
        break;
      }

      // repeated .spotify.metadata.proto.Track alternative = 13;
      case 13: {
        if (tag == 106) {
         parse_alternative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alternative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_alternative;
        if (input->ExpectTag(114)) goto parse_sale_period;
        break;
      }

      // repeated .spotify.metadata.proto.SalePeriod sale_period = 14;
      case 14: {
        if (tag == 114) {
         parse_sale_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sale_period()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_sale_period;
        if (input->ExpectTag(122)) goto parse_preview;
        break;
      }

      // repeated .spotify.metadata.proto.AudioFile preview = 15;
      case 15: {
        if (tag == 122) {
         parse_preview:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preview()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_preview;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Track)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Track)
  return false;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Track)
  // optional bytes gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .spotify.metadata.proto.Album album = 3;
  if (has_album()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->album(), output);
  }

  // repeated .spotify.metadata.proto.Artist artist = 4;
  for (int i = 0; i < this->artist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->artist(i), output);
  }

  // optional sint32 number = 5;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->number(), output);
  }

  // optional sint32 disc_number = 6;
  if (has_disc_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->disc_number(), output);
  }

  // optional sint32 duration = 7;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->duration(), output);
  }

  // optional sint32 popularity = 8;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->popularity(), output);
  }

  // optional bool explicit = 9;
  if (has_explicit_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->explicit_(), output);
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  for (int i = 0; i < this->external_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->external_id(i), output);
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 11;
  for (int i = 0; i < this->restriction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->restriction(i), output);
  }

  // repeated .spotify.metadata.proto.AudioFile file = 12;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->file(i), output);
  }

  // repeated .spotify.metadata.proto.Track alternative = 13;
  for (int i = 0; i < this->alternative_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->alternative(i), output);
  }

  // repeated .spotify.metadata.proto.SalePeriod sale_period = 14;
  for (int i = 0; i < this->sale_period_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->sale_period(i), output);
  }

  // repeated .spotify.metadata.proto.AudioFile preview = 15;
  for (int i = 0; i < this->preview_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->preview(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Track)
}

::google::protobuf::uint8* Track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Track)
  // optional bytes gid = 1;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .spotify.metadata.proto.Album album = 3;
  if (has_album()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->album(), target);
  }

  // repeated .spotify.metadata.proto.Artist artist = 4;
  for (int i = 0; i < this->artist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->artist(i), target);
  }

  // optional sint32 number = 5;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->number(), target);
  }

  // optional sint32 disc_number = 6;
  if (has_disc_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->disc_number(), target);
  }

  // optional sint32 duration = 7;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->duration(), target);
  }

  // optional sint32 popularity = 8;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->popularity(), target);
  }

  // optional bool explicit = 9;
  if (has_explicit_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->explicit_(), target);
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  for (int i = 0; i < this->external_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->external_id(i), target);
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 11;
  for (int i = 0; i < this->restriction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->restriction(i), target);
  }

  // repeated .spotify.metadata.proto.AudioFile file = 12;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->file(i), target);
  }

  // repeated .spotify.metadata.proto.Track alternative = 13;
  for (int i = 0; i < this->alternative_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->alternative(i), target);
  }

  // repeated .spotify.metadata.proto.SalePeriod sale_period = 14;
  for (int i = 0; i < this->sale_period_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->sale_period(i), target);
  }

  // repeated .spotify.metadata.proto.AudioFile preview = 15;
  for (int i = 0; i < this->preview_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->preview(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Track)
  return target;
}

int Track::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .spotify.metadata.proto.Album album = 3;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->album());
    }

    // optional sint32 number = 5;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->number());
    }

    // optional sint32 disc_number = 6;
    if (has_disc_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->disc_number());
    }

    // optional sint32 duration = 7;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->duration());
    }

    // optional sint32 popularity = 8;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->popularity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool explicit = 9;
    if (has_explicit_()) {
      total_size += 1 + 1;
    }

  }
  // repeated .spotify.metadata.proto.Artist artist = 4;
  total_size += 1 * this->artist_size();
  for (int i = 0; i < this->artist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->artist(i));
  }

  // repeated .spotify.metadata.proto.ExternalId external_id = 10;
  total_size += 1 * this->external_id_size();
  for (int i = 0; i < this->external_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->external_id(i));
  }

  // repeated .spotify.metadata.proto.Restriction restriction = 11;
  total_size += 1 * this->restriction_size();
  for (int i = 0; i < this->restriction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->restriction(i));
  }

  // repeated .spotify.metadata.proto.AudioFile file = 12;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  // repeated .spotify.metadata.proto.Track alternative = 13;
  total_size += 1 * this->alternative_size();
  for (int i = 0; i < this->alternative_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alternative(i));
  }

  // repeated .spotify.metadata.proto.SalePeriod sale_period = 14;
  total_size += 1 * this->sale_period_size();
  for (int i = 0; i < this->sale_period_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sale_period(i));
  }

  // repeated .spotify.metadata.proto.AudioFile preview = 15;
  total_size += 1 * this->preview_size();
  for (int i = 0; i < this->preview_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preview(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
  GOOGLE_CHECK_NE(&from, this);
  artist_.MergeFrom(from.artist_);
  external_id_.MergeFrom(from.external_id_);
  restriction_.MergeFrom(from.restriction_);
  file_.MergeFrom(from.file_);
  alternative_.MergeFrom(from.alternative_);
  sale_period_.MergeFrom(from.sale_period_);
  preview_.MergeFrom(from.preview_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_album()) {
      mutable_album()->::spotify::metadata::proto::Album::MergeFrom(from.album());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_disc_number()) {
      set_disc_number(from.disc_number());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_explicit_()) {
      set_explicit_(from.explicit_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {

  return true;
}

void Track::Swap(Track* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    std::swap(album_, other->album_);
    artist_.Swap(&other->artist_);
    std::swap(number_, other->number_);
    std::swap(disc_number_, other->disc_number_);
    std::swap(duration_, other->duration_);
    std::swap(popularity_, other->popularity_);
    std::swap(explicit__, other->explicit__);
    external_id_.Swap(&other->external_id_);
    restriction_.Swap(&other->restriction_);
    file_.Swap(&other->file_);
    alternative_.Swap(&other->alternative_);
    sale_period_.Swap(&other->sale_period_);
    preview_.Swap(&other->preview_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Track_descriptor_;
  metadata.reflection = Track_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Image_Size_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_Size_descriptor_;
}
bool Image_Size_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Image_Size Image::DEFAULT;
const Image_Size Image::SMALL;
const Image_Size Image::LARGE;
const Image_Size Image::XLARGE;
const Image_Size Image::Size_MIN;
const Image_Size Image::Size_MAX;
const int Image::Size_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Image::kFileIdFieldNumber;
const int Image::kSizeFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Image)
}

void Image::InitAsDefaultInstance() {
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Image)
}

void Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Image*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(size_, height_);
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional .spotify.metadata.proto.Image.Size size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::metadata::proto::Image_Size_IsValid(value)) {
            set_size(static_cast< ::spotify::metadata::proto::Image_Size >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional sint32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional sint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Image)
  // optional bytes file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file_id(), output);
  }

  // optional .spotify.metadata.proto.Image.Size size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->size(), output);
  }

  // optional sint32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->width(), output);
  }

  // optional sint32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Image)
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Image)
  // optional bytes file_id = 1;
  if (has_file_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_id(), target);
  }

  // optional .spotify.metadata.proto.Image.Size size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->size(), target);
  }

  // optional sint32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->width(), target);
  }

  // optional sint32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Image)
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_id());
    }

    // optional .spotify.metadata.proto.Image.Size size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
    }

    // optional sint32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->width());
    }

    // optional sint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {

  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(size_, other->size_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageGroup::kImageFieldNumber;
#endif  // !_MSC_VER

ImageGroup::ImageGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.ImageGroup)
}

void ImageGroup::InitAsDefaultInstance() {
}

ImageGroup::ImageGroup(const ImageGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.ImageGroup)
}

void ImageGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageGroup::~ImageGroup() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.ImageGroup)
  SharedDtor();
}

void ImageGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageGroup_descriptor_;
}

const ImageGroup& ImageGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

ImageGroup* ImageGroup::default_instance_ = NULL;

ImageGroup* ImageGroup::New() const {
  return new ImageGroup;
}

void ImageGroup::Clear() {
  image_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.ImageGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spotify.metadata.proto.Image image = 1;
      case 1: {
        if (tag == 10) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_image;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.ImageGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.ImageGroup)
  return false;
#undef DO_
}

void ImageGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.ImageGroup)
  // repeated .spotify.metadata.proto.Image image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.ImageGroup)
}

::google::protobuf::uint8* ImageGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.ImageGroup)
  // repeated .spotify.metadata.proto.Image image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.ImageGroup)
  return target;
}

int ImageGroup::ByteSize() const {
  int total_size = 0;

  // repeated .spotify.metadata.proto.Image image = 1;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageGroup::MergeFrom(const ImageGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageGroup::CopyFrom(const ImageGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageGroup::IsInitialized() const {

  return true;
}

void ImageGroup::Swap(ImageGroup* other) {
  if (other != this) {
    image_.Swap(&other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageGroup_descriptor_;
  metadata.reflection = ImageGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Biography::kTextFieldNumber;
const int Biography::kPortraitFieldNumber;
const int Biography::kPortraitGroupFieldNumber;
#endif  // !_MSC_VER

Biography::Biography()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Biography)
}

void Biography::InitAsDefaultInstance() {
}

Biography::Biography(const Biography& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Biography)
}

void Biography::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Biography::~Biography() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Biography)
  SharedDtor();
}

void Biography::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Biography::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Biography::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Biography_descriptor_;
}

const Biography& Biography::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Biography* Biography::default_instance_ = NULL;

Biography* Biography::New() const {
  return new Biography;
}

void Biography::Clear() {
  if (has_text()) {
    if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      text_->clear();
    }
  }
  portrait_.Clear();
  portrait_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Biography::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Biography)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_portrait;
        break;
      }

      // repeated .spotify.metadata.proto.Image portrait = 2;
      case 2: {
        if (tag == 18) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_portrait;
        if (input->ExpectTag(26)) goto parse_portrait_group;
        break;
      }

      // repeated .spotify.metadata.proto.ImageGroup portrait_group = 3;
      case 3: {
        if (tag == 26) {
         parse_portrait_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_portrait_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_portrait_group;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Biography)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Biography)
  return false;
#undef DO_
}

void Biography::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Biography)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // repeated .spotify.metadata.proto.Image portrait = 2;
  for (int i = 0; i < this->portrait_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->portrait(i), output);
  }

  // repeated .spotify.metadata.proto.ImageGroup portrait_group = 3;
  for (int i = 0; i < this->portrait_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->portrait_group(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Biography)
}

::google::protobuf::uint8* Biography::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Biography)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // repeated .spotify.metadata.proto.Image portrait = 2;
  for (int i = 0; i < this->portrait_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->portrait(i), target);
  }

  // repeated .spotify.metadata.proto.ImageGroup portrait_group = 3;
  for (int i = 0; i < this->portrait_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->portrait_group(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Biography)
  return target;
}

int Biography::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  // repeated .spotify.metadata.proto.Image portrait = 2;
  total_size += 1 * this->portrait_size();
  for (int i = 0; i < this->portrait_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portrait(i));
  }

  // repeated .spotify.metadata.proto.ImageGroup portrait_group = 3;
  total_size += 1 * this->portrait_group_size();
  for (int i = 0; i < this->portrait_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portrait_group(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Biography::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Biography* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Biography*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Biography::MergeFrom(const Biography& from) {
  GOOGLE_CHECK_NE(&from, this);
  portrait_.MergeFrom(from.portrait_);
  portrait_group_.MergeFrom(from.portrait_group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Biography::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Biography::CopyFrom(const Biography& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Biography::IsInitialized() const {

  return true;
}

void Biography::Swap(Biography* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    portrait_.Swap(&other->portrait_);
    portrait_group_.Swap(&other->portrait_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Biography::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Biography_descriptor_;
  metadata.reflection = Biography_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Disc::kNumberFieldNumber;
const int Disc::kNameFieldNumber;
const int Disc::kTrackFieldNumber;
#endif  // !_MSC_VER

Disc::Disc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Disc)
}

void Disc::InitAsDefaultInstance() {
}

Disc::Disc(const Disc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Disc)
}

void Disc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Disc::~Disc() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Disc)
  SharedDtor();
}

void Disc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Disc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Disc_descriptor_;
}

const Disc& Disc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Disc* Disc::default_instance_ = NULL;

Disc* Disc::New() const {
  return new Disc;
}

void Disc::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    number_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Disc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Disc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_track;
        break;
      }

      // repeated .spotify.metadata.proto.Track track = 3;
      case 3: {
        if (tag == 26) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_track;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Disc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Disc)
  return false;
#undef DO_
}

void Disc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Disc)
  // optional sint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->number(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .spotify.metadata.proto.Track track = 3;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->track(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Disc)
}

::google::protobuf::uint8* Disc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Disc)
  // optional sint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->number(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .spotify.metadata.proto.Track track = 3;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->track(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Disc)
  return target;
}

int Disc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->number());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .spotify.metadata.proto.Track track = 3;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Disc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Disc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Disc::MergeFrom(const Disc& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Disc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disc::CopyFrom(const Disc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disc::IsInitialized() const {

  return true;
}

void Disc::Swap(Disc* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(name_, other->name_);
    track_.Swap(&other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Disc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Disc_descriptor_;
  metadata.reflection = Disc_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Copyright_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Copyright_Type_descriptor_;
}
bool Copyright_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Copyright_Type Copyright::P;
const Copyright_Type Copyright::C;
const Copyright_Type Copyright::Type_MIN;
const Copyright_Type Copyright::Type_MAX;
const int Copyright::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Copyright::kTypeFieldNumber;
const int Copyright::kTextFieldNumber;
#endif  // !_MSC_VER

Copyright::Copyright()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Copyright)
}

void Copyright::InitAsDefaultInstance() {
}

Copyright::Copyright(const Copyright& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Copyright)
}

void Copyright::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Copyright::~Copyright() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Copyright)
  SharedDtor();
}

void Copyright::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Copyright::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Copyright::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Copyright_descriptor_;
}

const Copyright& Copyright::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Copyright* Copyright::default_instance_ = NULL;

Copyright* Copyright::New() const {
  return new Copyright;
}

void Copyright::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Copyright::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Copyright)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .spotify.metadata.proto.Copyright.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::metadata::proto::Copyright_Type_IsValid(value)) {
            set_type(static_cast< ::spotify::metadata::proto::Copyright_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Copyright)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Copyright)
  return false;
#undef DO_
}

void Copyright::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Copyright)
  // optional .spotify.metadata.proto.Copyright.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Copyright)
}

::google::protobuf::uint8* Copyright::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Copyright)
  // optional .spotify.metadata.proto.Copyright.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Copyright)
  return target;
}

int Copyright::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .spotify.metadata.proto.Copyright.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Copyright::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Copyright* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Copyright*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Copyright::MergeFrom(const Copyright& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Copyright::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Copyright::CopyFrom(const Copyright& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Copyright::IsInitialized() const {

  return true;
}

void Copyright::Swap(Copyright* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Copyright::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Copyright_descriptor_;
  metadata.reflection = Copyright_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Restriction_Catalogue_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Restriction_Catalogue_descriptor_;
}
bool Restriction_Catalogue_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Restriction_Catalogue Restriction::AD;
const Restriction_Catalogue Restriction::SUBSCRIPTION;
const Restriction_Catalogue Restriction::SHUFFLE;
const Restriction_Catalogue Restriction::Catalogue_MIN;
const Restriction_Catalogue Restriction::Catalogue_MAX;
const int Restriction::Catalogue_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Restriction_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Restriction_Type_descriptor_;
}
bool Restriction_Type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Restriction_Type Restriction::STREAMING;
const Restriction_Type Restriction::Type_MIN;
const Restriction_Type Restriction::Type_MAX;
const int Restriction::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Restriction::kCatalogueFieldNumber;
const int Restriction::kCountriesAllowedFieldNumber;
const int Restriction::kCountriesForbiddenFieldNumber;
const int Restriction::kTypeFieldNumber;
#endif  // !_MSC_VER

Restriction::Restriction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.Restriction)
}

void Restriction::InitAsDefaultInstance() {
}

Restriction::Restriction(const Restriction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.Restriction)
}

void Restriction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  countries_allowed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countries_forbidden_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Restriction::~Restriction() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.Restriction)
  SharedDtor();
}

void Restriction::SharedDtor() {
  if (countries_allowed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countries_allowed_;
  }
  if (countries_forbidden_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countries_forbidden_;
  }
  if (this != default_instance_) {
  }
}

void Restriction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Restriction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Restriction_descriptor_;
}

const Restriction& Restriction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

Restriction* Restriction::default_instance_ = NULL;

Restriction* Restriction::New() const {
  return new Restriction;
}

void Restriction::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    if (has_countries_allowed()) {
      if (countries_allowed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        countries_allowed_->clear();
      }
    }
    if (has_countries_forbidden()) {
      if (countries_forbidden_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        countries_forbidden_->clear();
      }
    }
    type_ = 0;
  }
  catalogue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Restriction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.Restriction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spotify.metadata.proto.Restriction.Catalogue catalogue = 1;
      case 1: {
        if (tag == 8) {
         parse_catalogue:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::metadata::proto::Restriction_Catalogue_IsValid(value)) {
            add_catalogue(static_cast< ::spotify::metadata::proto::Restriction_Catalogue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::spotify::metadata::proto::Restriction_Catalogue_IsValid,
                 this->mutable_catalogue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_catalogue;
        if (input->ExpectTag(18)) goto parse_countries_allowed;
        break;
      }

      // optional string countries_allowed = 2;
      case 2: {
        if (tag == 18) {
         parse_countries_allowed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countries_allowed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countries_allowed().data(), this->countries_allowed().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countries_allowed");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_countries_forbidden;
        break;
      }

      // optional string countries_forbidden = 3;
      case 3: {
        if (tag == 26) {
         parse_countries_forbidden:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countries_forbidden()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countries_forbidden().data(), this->countries_forbidden().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countries_forbidden");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .spotify.metadata.proto.Restriction.Type type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::metadata::proto::Restriction_Type_IsValid(value)) {
            set_type(static_cast< ::spotify::metadata::proto::Restriction_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.Restriction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.Restriction)
  return false;
#undef DO_
}

void Restriction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.Restriction)
  // repeated .spotify.metadata.proto.Restriction.Catalogue catalogue = 1;
  for (int i = 0; i < this->catalogue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->catalogue(i), output);
  }

  // optional string countries_allowed = 2;
  if (has_countries_allowed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countries_allowed().data(), this->countries_allowed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countries_allowed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->countries_allowed(), output);
  }

  // optional string countries_forbidden = 3;
  if (has_countries_forbidden()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countries_forbidden().data(), this->countries_forbidden().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countries_forbidden");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->countries_forbidden(), output);
  }

  // optional .spotify.metadata.proto.Restriction.Type type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.Restriction)
}

::google::protobuf::uint8* Restriction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.Restriction)
  // repeated .spotify.metadata.proto.Restriction.Catalogue catalogue = 1;
  for (int i = 0; i < this->catalogue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->catalogue(i), target);
  }

  // optional string countries_allowed = 2;
  if (has_countries_allowed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countries_allowed().data(), this->countries_allowed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countries_allowed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countries_allowed(), target);
  }

  // optional string countries_forbidden = 3;
  if (has_countries_forbidden()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countries_forbidden().data(), this->countries_forbidden().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countries_forbidden");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->countries_forbidden(), target);
  }

  // optional .spotify.metadata.proto.Restriction.Type type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.Restriction)
  return target;
}

int Restriction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string countries_allowed = 2;
    if (has_countries_allowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countries_allowed());
    }

    // optional string countries_forbidden = 3;
    if (has_countries_forbidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countries_forbidden());
    }

    // optional .spotify.metadata.proto.Restriction.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .spotify.metadata.proto.Restriction.Catalogue catalogue = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->catalogue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->catalogue(i));
    }
    total_size += 1 * this->catalogue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Restriction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Restriction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Restriction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Restriction::MergeFrom(const Restriction& from) {
  GOOGLE_CHECK_NE(&from, this);
  catalogue_.MergeFrom(from.catalogue_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_countries_allowed()) {
      set_countries_allowed(from.countries_allowed());
    }
    if (from.has_countries_forbidden()) {
      set_countries_forbidden(from.countries_forbidden());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Restriction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Restriction::CopyFrom(const Restriction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Restriction::IsInitialized() const {

  return true;
}

void Restriction::Swap(Restriction* other) {
  if (other != this) {
    catalogue_.Swap(&other->catalogue_);
    std::swap(countries_allowed_, other->countries_allowed_);
    std::swap(countries_forbidden_, other->countries_forbidden_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Restriction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Restriction_descriptor_;
  metadata.reflection = Restriction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SalePeriod::kRestrictionFieldNumber;
const int SalePeriod::kStartFieldNumber;
const int SalePeriod::kEndFieldNumber;
#endif  // !_MSC_VER

SalePeriod::SalePeriod()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.SalePeriod)
}

void SalePeriod::InitAsDefaultInstance() {
  start_ = const_cast< ::spotify::metadata::proto::Date*>(&::spotify::metadata::proto::Date::default_instance());
  end_ = const_cast< ::spotify::metadata::proto::Date*>(&::spotify::metadata::proto::Date::default_instance());
}

SalePeriod::SalePeriod(const SalePeriod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.SalePeriod)
}

void SalePeriod::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SalePeriod::~SalePeriod() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.SalePeriod)
  SharedDtor();
}

void SalePeriod::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void SalePeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SalePeriod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SalePeriod_descriptor_;
}

const SalePeriod& SalePeriod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

SalePeriod* SalePeriod::default_instance_ = NULL;

SalePeriod* SalePeriod::New() const {
  return new SalePeriod;
}

void SalePeriod::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_start()) {
      if (start_ != NULL) start_->::spotify::metadata::proto::Date::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::spotify::metadata::proto::Date::Clear();
    }
  }
  restriction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SalePeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.SalePeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spotify.metadata.proto.Restriction restriction = 1;
      case 1: {
        if (tag == 10) {
         parse_restriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_restriction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_restriction;
        if (input->ExpectTag(18)) goto parse_start;
        break;
      }

      // optional .spotify.metadata.proto.Date start = 2;
      case 2: {
        if (tag == 18) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end;
        break;
      }

      // optional .spotify.metadata.proto.Date end = 3;
      case 3: {
        if (tag == 26) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.SalePeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.SalePeriod)
  return false;
#undef DO_
}

void SalePeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.SalePeriod)
  // repeated .spotify.metadata.proto.Restriction restriction = 1;
  for (int i = 0; i < this->restriction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->restriction(i), output);
  }

  // optional .spotify.metadata.proto.Date start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start(), output);
  }

  // optional .spotify.metadata.proto.Date end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.SalePeriod)
}

::google::protobuf::uint8* SalePeriod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.SalePeriod)
  // repeated .spotify.metadata.proto.Restriction restriction = 1;
  for (int i = 0; i < this->restriction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->restriction(i), target);
  }

  // optional .spotify.metadata.proto.Date start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start(), target);
  }

  // optional .spotify.metadata.proto.Date end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.SalePeriod)
  return target;
}

int SalePeriod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .spotify.metadata.proto.Date start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional .spotify.metadata.proto.Date end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

  }
  // repeated .spotify.metadata.proto.Restriction restriction = 1;
  total_size += 1 * this->restriction_size();
  for (int i = 0; i < this->restriction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->restriction(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SalePeriod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SalePeriod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SalePeriod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SalePeriod::MergeFrom(const SalePeriod& from) {
  GOOGLE_CHECK_NE(&from, this);
  restriction_.MergeFrom(from.restriction_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_start()) {
      mutable_start()->::spotify::metadata::proto::Date::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::spotify::metadata::proto::Date::MergeFrom(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SalePeriod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalePeriod::CopyFrom(const SalePeriod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalePeriod::IsInitialized() const {

  return true;
}

void SalePeriod::Swap(SalePeriod* other) {
  if (other != this) {
    restriction_.Swap(&other->restriction_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SalePeriod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SalePeriod_descriptor_;
  metadata.reflection = SalePeriod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExternalId::kTypeFieldNumber;
const int ExternalId::kIdFieldNumber;
#endif  // !_MSC_VER

ExternalId::ExternalId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.ExternalId)
}

void ExternalId::InitAsDefaultInstance() {
}

ExternalId::ExternalId(const ExternalId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.ExternalId)
}

void ExternalId::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalId::~ExternalId() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.ExternalId)
  SharedDtor();
}

void ExternalId::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ExternalId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalId_descriptor_;
}

const ExternalId& ExternalId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

ExternalId* ExternalId::default_instance_ = NULL;

ExternalId* ExternalId::New() const {
  return new ExternalId;
}

void ExternalId::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.ExternalId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.ExternalId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.ExternalId)
  return false;
#undef DO_
}

void ExternalId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.ExternalId)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.ExternalId)
}

::google::protobuf::uint8* ExternalId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.ExternalId)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.ExternalId)
  return target;
}

int ExternalId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalId::MergeFrom(const ExternalId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalId::CopyFrom(const ExternalId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalId::IsInitialized() const {

  return true;
}

void ExternalId::Swap(ExternalId* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalId_descriptor_;
  metadata.reflection = ExternalId_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AudioFile_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioFile_Format_descriptor_;
}
bool AudioFile_Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AudioFile_Format AudioFile::OGG_VORBIS_96;
const AudioFile_Format AudioFile::OGG_VORBIS_160;
const AudioFile_Format AudioFile::OGG_VORBIS_320;
const AudioFile_Format AudioFile::MP3_256;
const AudioFile_Format AudioFile::MP3_320;
const AudioFile_Format AudioFile::MP3_160;
const AudioFile_Format AudioFile::MP3_96;
const AudioFile_Format AudioFile::Format_MIN;
const AudioFile_Format AudioFile::Format_MAX;
const int AudioFile::Format_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AudioFile::kFileIdFieldNumber;
const int AudioFile::kFormatFieldNumber;
#endif  // !_MSC_VER

AudioFile::AudioFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.metadata.proto.AudioFile)
}

void AudioFile::InitAsDefaultInstance() {
}

AudioFile::AudioFile(const AudioFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.metadata.proto.AudioFile)
}

void AudioFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioFile::~AudioFile() {
  // @@protoc_insertion_point(destructor:spotify.metadata.proto.AudioFile)
  SharedDtor();
}

void AudioFile::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void AudioFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioFile_descriptor_;
}

const AudioFile& AudioFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();
  return *default_instance_;
}

AudioFile* AudioFile::default_instance_ = NULL;

AudioFile* AudioFile::New() const {
  return new AudioFile;
}

void AudioFile::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_id_->clear();
      }
    }
    format_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.metadata.proto.AudioFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_format;
        break;
      }

      // optional .spotify.metadata.proto.AudioFile.Format format = 2;
      case 2: {
        if (tag == 16) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::metadata::proto::AudioFile_Format_IsValid(value)) {
            set_format(static_cast< ::spotify::metadata::proto::AudioFile_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.metadata.proto.AudioFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.metadata.proto.AudioFile)
  return false;
#undef DO_
}

void AudioFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.metadata.proto.AudioFile)
  // optional bytes file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file_id(), output);
  }

  // optional .spotify.metadata.proto.AudioFile.Format format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.metadata.proto.AudioFile)
}

::google::protobuf::uint8* AudioFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.metadata.proto.AudioFile)
  // optional bytes file_id = 1;
  if (has_file_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_id(), target);
  }

  // optional .spotify.metadata.proto.AudioFile.Format format = 2;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.metadata.proto.AudioFile)
  return target;
}

int AudioFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_id());
    }

    // optional .spotify.metadata.proto.AudioFile.Format format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioFile::MergeFrom(const AudioFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFile::CopyFrom(const AudioFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFile::IsInitialized() const {

  return true;
}

void AudioFile::Swap(AudioFile* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(format_, other->format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioFile_descriptor_;
  metadata.reflection = AudioFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace metadata
}  // namespace spotify

// @@protoc_insertion_point(global_scope)
