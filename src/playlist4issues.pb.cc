// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4issues.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playlist4issues.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ClientIssue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientIssue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientIssue_Level_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientIssue_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientResolveAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientResolveAction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientResolveAction_Code_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientResolveAction_Initiator_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_playlist4issues_2eproto() {
  protobuf_AddDesc_playlist4issues_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playlist4issues.proto");
  GOOGLE_CHECK(file != NULL);
  ClientIssue_descriptor_ = file->message_type(0);
  static const int ClientIssue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIssue, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIssue, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIssue, repeatcount_),
  };
  ClientIssue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientIssue_descriptor_,
      ClientIssue::default_instance_,
      ClientIssue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIssue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIssue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientIssue));
  ClientIssue_Level_descriptor_ = ClientIssue_descriptor_->enum_type(0);
  ClientIssue_Code_descriptor_ = ClientIssue_descriptor_->enum_type(1);
  ClientResolveAction_descriptor_ = file->message_type(1);
  static const int ClientResolveAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResolveAction, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResolveAction, initiator_),
  };
  ClientResolveAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientResolveAction_descriptor_,
      ClientResolveAction::default_instance_,
      ClientResolveAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResolveAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResolveAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientResolveAction));
  ClientResolveAction_Code_descriptor_ = ClientResolveAction_descriptor_->enum_type(0);
  ClientResolveAction_Initiator_descriptor_ = ClientResolveAction_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playlist4issues_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientIssue_descriptor_, &ClientIssue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientResolveAction_descriptor_, &ClientResolveAction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playlist4issues_2eproto() {
  delete ClientIssue::default_instance_;
  delete ClientIssue_reflection_;
  delete ClientResolveAction::default_instance_;
  delete ClientResolveAction_reflection_;
}

void protobuf_AddDesc_playlist4issues_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025playlist4issues.proto\022\027spotify.playlis"
    "t4.proto\"\252\003\n\013ClientIssue\0229\n\005level\030\001 \001(\0162"
    "*.spotify.playlist4.proto.ClientIssue.Le"
    "vel\0227\n\004code\030\002 \001(\0162).spotify.playlist4.pr"
    "oto.ClientIssue.Code\022\023\n\013repeatCount\030\003 \001("
    "\005\"q\n\005Level\022\021\n\rLEVEL_UNKNOWN\020\000\022\017\n\013LEVEL_D"
    "EBUG\020\001\022\016\n\nLEVEL_INFO\020\002\022\020\n\014LEVEL_NOTICE\020\003"
    "\022\021\n\rLEVEL_WARNING\020\004\022\017\n\013LEVEL_ERROR\020\005\"\236\001\n"
    "\004Code\022\020\n\014CODE_UNKNOWN\020\000\022\034\n\030CODE_INDEX_OU"
    "T_OF_BOUNDS\020\001\022\031\n\025CODE_VERSION_MISMATCH\020\002"
    "\022\026\n\022CODE_CACHED_CHANGE\020\003\022\027\n\023CODE_OFFLINE"
    "_CHANGE\020\004\022\032\n\026CODE_CONCURRENT_CHANGE\020\005\"\225\003"
    "\n\023ClientResolveAction\022\?\n\004code\030\001 \001(\01621.sp"
    "otify.playlist4.proto.ClientResolveActio"
    "n.Code\022I\n\tinitiator\030\002 \001(\01626.spotify.play"
    "list4.proto.ClientResolveAction.Initiato"
    "r\"\241\001\n\004Code\022\020\n\014CODE_UNKNOWN\020\000\022\022\n\016CODE_NO_"
    "ACTION\020\001\022\016\n\nCODE_RETRY\020\002\022\017\n\013CODE_RELOAD\020"
    "\003\022\036\n\032CODE_DISCARD_LOCAL_CHANGES\020\004\022\022\n\016COD"
    "E_SEND_DUMP\020\005\022\036\n\032CODE_DISPLAY_ERROR_MESS"
    "AGE\020\006\"N\n\tInitiator\022\025\n\021INITIATOR_UNKNOWN\020"
    "\000\022\024\n\020INITIATOR_SERVER\020\001\022\024\n\020INITIATOR_CLI"
    "ENT\020\002B\037\n\033com.spotify.playlist4.protoH\001", 918);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playlist4issues.proto", &protobuf_RegisterTypes);
  ClientIssue::default_instance_ = new ClientIssue();
  ClientResolveAction::default_instance_ = new ClientResolveAction();
  ClientIssue::default_instance_->InitAsDefaultInstance();
  ClientResolveAction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playlist4issues_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playlist4issues_2eproto {
  StaticDescriptorInitializer_playlist4issues_2eproto() {
    protobuf_AddDesc_playlist4issues_2eproto();
  }
} static_descriptor_initializer_playlist4issues_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientIssue_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientIssue_Level_descriptor_;
}
bool ClientIssue_Level_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientIssue_Level ClientIssue::LEVEL_UNKNOWN;
const ClientIssue_Level ClientIssue::LEVEL_DEBUG;
const ClientIssue_Level ClientIssue::LEVEL_INFO;
const ClientIssue_Level ClientIssue::LEVEL_NOTICE;
const ClientIssue_Level ClientIssue::LEVEL_WARNING;
const ClientIssue_Level ClientIssue::LEVEL_ERROR;
const ClientIssue_Level ClientIssue::Level_MIN;
const ClientIssue_Level ClientIssue::Level_MAX;
const int ClientIssue::Level_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ClientIssue_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientIssue_Code_descriptor_;
}
bool ClientIssue_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientIssue_Code ClientIssue::CODE_UNKNOWN;
const ClientIssue_Code ClientIssue::CODE_INDEX_OUT_OF_BOUNDS;
const ClientIssue_Code ClientIssue::CODE_VERSION_MISMATCH;
const ClientIssue_Code ClientIssue::CODE_CACHED_CHANGE;
const ClientIssue_Code ClientIssue::CODE_OFFLINE_CHANGE;
const ClientIssue_Code ClientIssue::CODE_CONCURRENT_CHANGE;
const ClientIssue_Code ClientIssue::Code_MIN;
const ClientIssue_Code ClientIssue::Code_MAX;
const int ClientIssue::Code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientIssue::kLevelFieldNumber;
const int ClientIssue::kCodeFieldNumber;
const int ClientIssue::kRepeatCountFieldNumber;
#endif  // !_MSC_VER

ClientIssue::ClientIssue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ClientIssue)
}

void ClientIssue::InitAsDefaultInstance() {
}

ClientIssue::ClientIssue(const ClientIssue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ClientIssue)
}

void ClientIssue::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  code_ = 0;
  repeatcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientIssue::~ClientIssue() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ClientIssue)
  SharedDtor();
}

void ClientIssue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientIssue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientIssue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientIssue_descriptor_;
}

const ClientIssue& ClientIssue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4issues_2eproto();
  return *default_instance_;
}

ClientIssue* ClientIssue::default_instance_ = NULL;

ClientIssue* ClientIssue::New() const {
  return new ClientIssue;
}

void ClientIssue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientIssue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, repeatcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientIssue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ClientIssue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .spotify.playlist4.proto.ClientIssue.Level level = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::playlist4::proto::ClientIssue_Level_IsValid(value)) {
            set_level(static_cast< ::spotify::playlist4::proto::ClientIssue_Level >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional .spotify.playlist4.proto.ClientIssue.Code code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::playlist4::proto::ClientIssue_Code_IsValid(value)) {
            set_code(static_cast< ::spotify::playlist4::proto::ClientIssue_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_repeatCount;
        break;
      }

      // optional int32 repeatCount = 3;
      case 3: {
        if (tag == 24) {
         parse_repeatCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ClientIssue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ClientIssue)
  return false;
#undef DO_
}

void ClientIssue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ClientIssue)
  // optional .spotify.playlist4.proto.ClientIssue.Level level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // optional .spotify.playlist4.proto.ClientIssue.Code code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // optional int32 repeatCount = 3;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->repeatcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ClientIssue)
}

::google::protobuf::uint8* ClientIssue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ClientIssue)
  // optional .spotify.playlist4.proto.ClientIssue.Level level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // optional .spotify.playlist4.proto.ClientIssue.Code code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // optional int32 repeatCount = 3;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->repeatcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ClientIssue)
  return target;
}

int ClientIssue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .spotify.playlist4.proto.ClientIssue.Level level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // optional .spotify.playlist4.proto.ClientIssue.Code code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional int32 repeatCount = 3;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repeatcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientIssue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientIssue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientIssue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientIssue::MergeFrom(const ClientIssue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientIssue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientIssue::CopyFrom(const ClientIssue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIssue::IsInitialized() const {

  return true;
}

void ClientIssue::Swap(ClientIssue* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(code_, other->code_);
    std::swap(repeatcount_, other->repeatcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientIssue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientIssue_descriptor_;
  metadata.reflection = ClientIssue_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientResolveAction_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResolveAction_Code_descriptor_;
}
bool ClientResolveAction_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientResolveAction_Code ClientResolveAction::CODE_UNKNOWN;
const ClientResolveAction_Code ClientResolveAction::CODE_NO_ACTION;
const ClientResolveAction_Code ClientResolveAction::CODE_RETRY;
const ClientResolveAction_Code ClientResolveAction::CODE_RELOAD;
const ClientResolveAction_Code ClientResolveAction::CODE_DISCARD_LOCAL_CHANGES;
const ClientResolveAction_Code ClientResolveAction::CODE_SEND_DUMP;
const ClientResolveAction_Code ClientResolveAction::CODE_DISPLAY_ERROR_MESSAGE;
const ClientResolveAction_Code ClientResolveAction::Code_MIN;
const ClientResolveAction_Code ClientResolveAction::Code_MAX;
const int ClientResolveAction::Code_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ClientResolveAction_Initiator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResolveAction_Initiator_descriptor_;
}
bool ClientResolveAction_Initiator_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientResolveAction_Initiator ClientResolveAction::INITIATOR_UNKNOWN;
const ClientResolveAction_Initiator ClientResolveAction::INITIATOR_SERVER;
const ClientResolveAction_Initiator ClientResolveAction::INITIATOR_CLIENT;
const ClientResolveAction_Initiator ClientResolveAction::Initiator_MIN;
const ClientResolveAction_Initiator ClientResolveAction::Initiator_MAX;
const int ClientResolveAction::Initiator_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientResolveAction::kCodeFieldNumber;
const int ClientResolveAction::kInitiatorFieldNumber;
#endif  // !_MSC_VER

ClientResolveAction::ClientResolveAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.playlist4.proto.ClientResolveAction)
}

void ClientResolveAction::InitAsDefaultInstance() {
}

ClientResolveAction::ClientResolveAction(const ClientResolveAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.playlist4.proto.ClientResolveAction)
}

void ClientResolveAction::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  initiator_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientResolveAction::~ClientResolveAction() {
  // @@protoc_insertion_point(destructor:spotify.playlist4.proto.ClientResolveAction)
  SharedDtor();
}

void ClientResolveAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientResolveAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientResolveAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResolveAction_descriptor_;
}

const ClientResolveAction& ClientResolveAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlist4issues_2eproto();
  return *default_instance_;
}

ClientResolveAction* ClientResolveAction::default_instance_ = NULL;

ClientResolveAction* ClientResolveAction::New() const {
  return new ClientResolveAction;
}

void ClientResolveAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientResolveAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(code_, initiator_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientResolveAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.playlist4.proto.ClientResolveAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .spotify.playlist4.proto.ClientResolveAction.Code code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::playlist4::proto::ClientResolveAction_Code_IsValid(value)) {
            set_code(static_cast< ::spotify::playlist4::proto::ClientResolveAction_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_initiator;
        break;
      }

      // optional .spotify.playlist4.proto.ClientResolveAction.Initiator initiator = 2;
      case 2: {
        if (tag == 16) {
         parse_initiator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::playlist4::proto::ClientResolveAction_Initiator_IsValid(value)) {
            set_initiator(static_cast< ::spotify::playlist4::proto::ClientResolveAction_Initiator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.playlist4.proto.ClientResolveAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.playlist4.proto.ClientResolveAction)
  return false;
#undef DO_
}

void ClientResolveAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.playlist4.proto.ClientResolveAction)
  // optional .spotify.playlist4.proto.ClientResolveAction.Code code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional .spotify.playlist4.proto.ClientResolveAction.Initiator initiator = 2;
  if (has_initiator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->initiator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.playlist4.proto.ClientResolveAction)
}

::google::protobuf::uint8* ClientResolveAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.playlist4.proto.ClientResolveAction)
  // optional .spotify.playlist4.proto.ClientResolveAction.Code code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional .spotify.playlist4.proto.ClientResolveAction.Initiator initiator = 2;
  if (has_initiator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->initiator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.playlist4.proto.ClientResolveAction)
  return target;
}

int ClientResolveAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .spotify.playlist4.proto.ClientResolveAction.Code code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional .spotify.playlist4.proto.ClientResolveAction.Initiator initiator = 2;
    if (has_initiator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initiator());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResolveAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientResolveAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientResolveAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientResolveAction::MergeFrom(const ClientResolveAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_initiator()) {
      set_initiator(from.initiator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientResolveAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientResolveAction::CopyFrom(const ClientResolveAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResolveAction::IsInitialized() const {

  return true;
}

void ClientResolveAction::Swap(ClientResolveAction* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(initiator_, other->initiator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientResolveAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientResolveAction_descriptor_;
  metadata.reflection = ClientResolveAction_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

// @@protoc_insertion_point(global_scope)
