// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4service.proto

#ifndef PROTOBUF_playlist4service_2eproto__INCLUDED
#define PROTOBUF_playlist4service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "playlist4changes.pb.h"
#include "playlist4content.pb.h"
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playlist4service_2eproto();
void protobuf_AssignDesc_playlist4service_2eproto();
void protobuf_ShutdownFile_playlist4service_2eproto();

class RequestContext;
class GetCurrentRevisionArgs;
class GetChangesInSequenceRangeArgs;
class GetChangesInSequenceRangeMatchingPl3VersionArgs;
class GetChangesInSequenceRangeReturn;
class ObliterateListArgs;
class UpdatePublishedArgs;
class SynchronizeArgs;
class GetSnapshotAtRevisionArgs;
class SubscribeRequest;
class UnsubscribeRequest;
class Playlist4ServiceException;
class SynchronizeReturn;
class Playlist4ServiceCall;
class Playlist4ServiceReturn;
class CreateListReply;
class ModifyReply;
class PlaylistModificationInfo;

enum Playlist4InboxErrorKind {
  INBOX_NOT_ALLOWED = 2,
  INBOX_INVALID_USER = 3,
  INBOX_INVALID_URI = 4,
  INBOX_LIST_TOO_LONG = 5
};
bool Playlist4InboxErrorKind_IsValid(int value);
const Playlist4InboxErrorKind Playlist4InboxErrorKind_MIN = INBOX_NOT_ALLOWED;
const Playlist4InboxErrorKind Playlist4InboxErrorKind_MAX = INBOX_LIST_TOO_LONG;
const int Playlist4InboxErrorKind_ARRAYSIZE = Playlist4InboxErrorKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Playlist4InboxErrorKind_descriptor();
inline const ::std::string& Playlist4InboxErrorKind_Name(Playlist4InboxErrorKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Playlist4InboxErrorKind_descriptor(), value);
}
inline bool Playlist4InboxErrorKind_Parse(
    const ::std::string& name, Playlist4InboxErrorKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Playlist4InboxErrorKind>(
    Playlist4InboxErrorKind_descriptor(), name, value);
}
enum Playlist4ServiceMethodKind {
  METHOD_UNKNOWN = 0,
  METHOD_GET_CURRENT_REVISION = 2,
  METHOD_GET_CHANGES_IN_SEQUENCE_RANGE = 3,
  METHOD_OBLITERATE_LIST = 4,
  METHOD_SYNCHRONIZE = 5,
  METHOD_UPDATE_PUBLISHED = 6,
  METHOD_GET_CHANGES_IN_SEQUENCE_RANGE_MATCHING_PL3_VERSION = 7,
  METHOD_GET_SNAPSHOT_AT_REVISION = 8
};
bool Playlist4ServiceMethodKind_IsValid(int value);
const Playlist4ServiceMethodKind Playlist4ServiceMethodKind_MIN = METHOD_UNKNOWN;
const Playlist4ServiceMethodKind Playlist4ServiceMethodKind_MAX = METHOD_GET_SNAPSHOT_AT_REVISION;
const int Playlist4ServiceMethodKind_ARRAYSIZE = Playlist4ServiceMethodKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Playlist4ServiceMethodKind_descriptor();
inline const ::std::string& Playlist4ServiceMethodKind_Name(Playlist4ServiceMethodKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Playlist4ServiceMethodKind_descriptor(), value);
}
inline bool Playlist4ServiceMethodKind_Parse(
    const ::std::string& name, Playlist4ServiceMethodKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Playlist4ServiceMethodKind>(
    Playlist4ServiceMethodKind_descriptor(), name, value);
}
// ===================================================================

class RequestContext : public ::google::protobuf::Message {
 public:
  RequestContext();
  virtual ~RequestContext();

  RequestContext(const RequestContext& from);

  inline RequestContext& operator=(const RequestContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestContext& default_instance();

  void Swap(RequestContext* other);

  // implements Message ----------------------------------------------

  RequestContext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestContext& from);
  void MergeFrom(const RequestContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool administrative = 2;
  inline bool has_administrative() const;
  inline void clear_administrative();
  static const int kAdministrativeFieldNumber = 2;
  inline bool administrative() const;
  inline void set_administrative(bool value);

  // optional bool migration = 4;
  inline bool has_migration() const;
  inline void clear_migration();
  static const int kMigrationFieldNumber = 4;
  inline bool migration() const;
  inline void set_migration(bool value);

  // optional string tag = 7;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 7;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // optional bool useStarredView = 8;
  inline bool has_usestarredview() const;
  inline void clear_usestarredview();
  static const int kUseStarredViewFieldNumber = 8;
  inline bool usestarredview() const;
  inline void set_usestarredview(bool value);

  // optional bool syncWithPublished = 9;
  inline bool has_syncwithpublished() const;
  inline void clear_syncwithpublished();
  static const int kSyncWithPublishedFieldNumber = 9;
  inline bool syncwithpublished() const;
  inline void set_syncwithpublished(bool value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.RequestContext)
 private:
  inline void set_has_administrative();
  inline void clear_has_administrative();
  inline void set_has_migration();
  inline void clear_has_migration();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_usestarredview();
  inline void clear_has_usestarredview();
  inline void set_has_syncwithpublished();
  inline void clear_has_syncwithpublished();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tag_;
  bool administrative_;
  bool migration_;
  bool usestarredview_;
  bool syncwithpublished_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static RequestContext* default_instance_;
};
// -------------------------------------------------------------------

class GetCurrentRevisionArgs : public ::google::protobuf::Message {
 public:
  GetCurrentRevisionArgs();
  virtual ~GetCurrentRevisionArgs();

  GetCurrentRevisionArgs(const GetCurrentRevisionArgs& from);

  inline GetCurrentRevisionArgs& operator=(const GetCurrentRevisionArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCurrentRevisionArgs& default_instance();

  void Swap(GetCurrentRevisionArgs* other);

  // implements Message ----------------------------------------------

  GetCurrentRevisionArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCurrentRevisionArgs& from);
  void MergeFrom(const GetCurrentRevisionArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional .spotify.playlist4.proto.RequestContext context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::spotify::playlist4::proto::RequestContext& context() const;
  inline ::spotify::playlist4::proto::RequestContext* mutable_context();
  inline ::spotify::playlist4::proto::RequestContext* release_context();
  inline void set_allocated_context(::spotify::playlist4::proto::RequestContext* context);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.GetCurrentRevisionArgs)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::spotify::playlist4::proto::RequestContext* context_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static GetCurrentRevisionArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetChangesInSequenceRangeArgs : public ::google::protobuf::Message {
 public:
  GetChangesInSequenceRangeArgs();
  virtual ~GetChangesInSequenceRangeArgs();

  GetChangesInSequenceRangeArgs(const GetChangesInSequenceRangeArgs& from);

  inline GetChangesInSequenceRangeArgs& operator=(const GetChangesInSequenceRangeArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChangesInSequenceRangeArgs& default_instance();

  void Swap(GetChangesInSequenceRangeArgs* other);

  // implements Message ----------------------------------------------

  GetChangesInSequenceRangeArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChangesInSequenceRangeArgs& from);
  void MergeFrom(const GetChangesInSequenceRangeArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional .spotify.playlist4.proto.RequestContext context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::spotify::playlist4::proto::RequestContext& context() const;
  inline ::spotify::playlist4::proto::RequestContext* mutable_context();
  inline ::spotify::playlist4::proto::RequestContext* release_context();
  inline void set_allocated_context(::spotify::playlist4::proto::RequestContext* context);

  // optional int32 fromSequenceNumber = 3;
  inline bool has_fromsequencenumber() const;
  inline void clear_fromsequencenumber();
  static const int kFromSequenceNumberFieldNumber = 3;
  inline ::google::protobuf::int32 fromsequencenumber() const;
  inline void set_fromsequencenumber(::google::protobuf::int32 value);

  // optional int32 toSequenceNumber = 4;
  inline bool has_tosequencenumber() const;
  inline void clear_tosequencenumber();
  static const int kToSequenceNumberFieldNumber = 4;
  inline ::google::protobuf::int32 tosequencenumber() const;
  inline void set_tosequencenumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.GetChangesInSequenceRangeArgs)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_fromsequencenumber();
  inline void clear_has_fromsequencenumber();
  inline void set_has_tosequencenumber();
  inline void clear_has_tosequencenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::spotify::playlist4::proto::RequestContext* context_;
  ::google::protobuf::int32 fromsequencenumber_;
  ::google::protobuf::int32 tosequencenumber_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static GetChangesInSequenceRangeArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetChangesInSequenceRangeMatchingPl3VersionArgs : public ::google::protobuf::Message {
 public:
  GetChangesInSequenceRangeMatchingPl3VersionArgs();
  virtual ~GetChangesInSequenceRangeMatchingPl3VersionArgs();

  GetChangesInSequenceRangeMatchingPl3VersionArgs(const GetChangesInSequenceRangeMatchingPl3VersionArgs& from);

  inline GetChangesInSequenceRangeMatchingPl3VersionArgs& operator=(const GetChangesInSequenceRangeMatchingPl3VersionArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChangesInSequenceRangeMatchingPl3VersionArgs& default_instance();

  void Swap(GetChangesInSequenceRangeMatchingPl3VersionArgs* other);

  // implements Message ----------------------------------------------

  GetChangesInSequenceRangeMatchingPl3VersionArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChangesInSequenceRangeMatchingPl3VersionArgs& from);
  void MergeFrom(const GetChangesInSequenceRangeMatchingPl3VersionArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional .spotify.playlist4.proto.RequestContext context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::spotify::playlist4::proto::RequestContext& context() const;
  inline ::spotify::playlist4::proto::RequestContext* mutable_context();
  inline ::spotify::playlist4::proto::RequestContext* release_context();
  inline void set_allocated_context(::spotify::playlist4::proto::RequestContext* context);

  // optional int32 fromSequenceNumber = 3;
  inline bool has_fromsequencenumber() const;
  inline void clear_fromsequencenumber();
  static const int kFromSequenceNumberFieldNumber = 3;
  inline ::google::protobuf::int32 fromsequencenumber() const;
  inline void set_fromsequencenumber(::google::protobuf::int32 value);

  // optional int32 toSequenceNumber = 4;
  inline bool has_tosequencenumber() const;
  inline void clear_tosequencenumber();
  static const int kToSequenceNumberFieldNumber = 4;
  inline ::google::protobuf::int32 tosequencenumber() const;
  inline void set_tosequencenumber(::google::protobuf::int32 value);

  // optional string pl3Version = 5;
  inline bool has_pl3version() const;
  inline void clear_pl3version();
  static const int kPl3VersionFieldNumber = 5;
  inline const ::std::string& pl3version() const;
  inline void set_pl3version(const ::std::string& value);
  inline void set_pl3version(const char* value);
  inline void set_pl3version(const char* value, size_t size);
  inline ::std::string* mutable_pl3version();
  inline ::std::string* release_pl3version();
  inline void set_allocated_pl3version(::std::string* pl3version);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_fromsequencenumber();
  inline void clear_has_fromsequencenumber();
  inline void set_has_tosequencenumber();
  inline void clear_has_tosequencenumber();
  inline void set_has_pl3version();
  inline void clear_has_pl3version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::spotify::playlist4::proto::RequestContext* context_;
  ::google::protobuf::int32 fromsequencenumber_;
  ::google::protobuf::int32 tosequencenumber_;
  ::std::string* pl3version_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static GetChangesInSequenceRangeMatchingPl3VersionArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetChangesInSequenceRangeReturn : public ::google::protobuf::Message {
 public:
  GetChangesInSequenceRangeReturn();
  virtual ~GetChangesInSequenceRangeReturn();

  GetChangesInSequenceRangeReturn(const GetChangesInSequenceRangeReturn& from);

  inline GetChangesInSequenceRangeReturn& operator=(const GetChangesInSequenceRangeReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChangesInSequenceRangeReturn& default_instance();

  void Swap(GetChangesInSequenceRangeReturn* other);

  // implements Message ----------------------------------------------

  GetChangesInSequenceRangeReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChangesInSequenceRangeReturn& from);
  void MergeFrom(const GetChangesInSequenceRangeReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .spotify.playlist4.proto.RevisionTaggedChangeSet result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::spotify::playlist4::proto::RevisionTaggedChangeSet& result(int index) const;
  inline ::spotify::playlist4::proto::RevisionTaggedChangeSet* mutable_result(int index);
  inline ::spotify::playlist4::proto::RevisionTaggedChangeSet* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::RevisionTaggedChangeSet >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::RevisionTaggedChangeSet >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.GetChangesInSequenceRangeReturn)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::RevisionTaggedChangeSet > result_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static GetChangesInSequenceRangeReturn* default_instance_;
};
// -------------------------------------------------------------------

class ObliterateListArgs : public ::google::protobuf::Message {
 public:
  ObliterateListArgs();
  virtual ~ObliterateListArgs();

  ObliterateListArgs(const ObliterateListArgs& from);

  inline ObliterateListArgs& operator=(const ObliterateListArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObliterateListArgs& default_instance();

  void Swap(ObliterateListArgs* other);

  // implements Message ----------------------------------------------

  ObliterateListArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObliterateListArgs& from);
  void MergeFrom(const ObliterateListArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional .spotify.playlist4.proto.RequestContext context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::spotify::playlist4::proto::RequestContext& context() const;
  inline ::spotify::playlist4::proto::RequestContext* mutable_context();
  inline ::spotify::playlist4::proto::RequestContext* release_context();
  inline void set_allocated_context(::spotify::playlist4::proto::RequestContext* context);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ObliterateListArgs)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::spotify::playlist4::proto::RequestContext* context_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static ObliterateListArgs* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePublishedArgs : public ::google::protobuf::Message {
 public:
  UpdatePublishedArgs();
  virtual ~UpdatePublishedArgs();

  UpdatePublishedArgs(const UpdatePublishedArgs& from);

  inline UpdatePublishedArgs& operator=(const UpdatePublishedArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePublishedArgs& default_instance();

  void Swap(UpdatePublishedArgs* other);

  // implements Message ----------------------------------------------

  UpdatePublishedArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePublishedArgs& from);
  void MergeFrom(const UpdatePublishedArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes publishedUri = 1;
  inline bool has_publisheduri() const;
  inline void clear_publisheduri();
  static const int kPublishedUriFieldNumber = 1;
  inline const ::std::string& publisheduri() const;
  inline void set_publisheduri(const ::std::string& value);
  inline void set_publisheduri(const char* value);
  inline void set_publisheduri(const void* value, size_t size);
  inline ::std::string* mutable_publisheduri();
  inline ::std::string* release_publisheduri();
  inline void set_allocated_publisheduri(::std::string* publisheduri);

  // optional .spotify.playlist4.proto.RequestContext context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::spotify::playlist4::proto::RequestContext& context() const;
  inline ::spotify::playlist4::proto::RequestContext* mutable_context();
  inline ::spotify::playlist4::proto::RequestContext* release_context();
  inline void set_allocated_context(::spotify::playlist4::proto::RequestContext* context);

  // optional bytes uri = 3;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 3;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional bool isPublished = 4;
  inline bool has_ispublished() const;
  inline void clear_ispublished();
  static const int kIsPublishedFieldNumber = 4;
  inline bool ispublished() const;
  inline void set_ispublished(bool value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.UpdatePublishedArgs)
 private:
  inline void set_has_publisheduri();
  inline void clear_has_publisheduri();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_ispublished();
  inline void clear_has_ispublished();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* publisheduri_;
  ::spotify::playlist4::proto::RequestContext* context_;
  ::std::string* uri_;
  bool ispublished_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static UpdatePublishedArgs* default_instance_;
};
// -------------------------------------------------------------------

class SynchronizeArgs : public ::google::protobuf::Message {
 public:
  SynchronizeArgs();
  virtual ~SynchronizeArgs();

  SynchronizeArgs(const SynchronizeArgs& from);

  inline SynchronizeArgs& operator=(const SynchronizeArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchronizeArgs& default_instance();

  void Swap(SynchronizeArgs* other);

  // implements Message ----------------------------------------------

  SynchronizeArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchronizeArgs& from);
  void MergeFrom(const SynchronizeArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional .spotify.playlist4.proto.RequestContext context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::spotify::playlist4::proto::RequestContext& context() const;
  inline ::spotify::playlist4::proto::RequestContext* mutable_context();
  inline ::spotify::playlist4::proto::RequestContext* release_context();
  inline void set_allocated_context(::spotify::playlist4::proto::RequestContext* context);

  // optional .spotify.playlist4.proto.ListContentSelection selection = 3;
  inline bool has_selection() const;
  inline void clear_selection();
  static const int kSelectionFieldNumber = 3;
  inline const ::spotify::playlist4::proto::ListContentSelection& selection() const;
  inline ::spotify::playlist4::proto::ListContentSelection* mutable_selection();
  inline ::spotify::playlist4::proto::ListContentSelection* release_selection();
  inline void set_allocated_selection(::spotify::playlist4::proto::ListContentSelection* selection);

  // optional .spotify.playlist4.proto.ListChanges changes = 4;
  inline bool has_changes() const;
  inline void clear_changes();
  static const int kChangesFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ListChanges& changes() const;
  inline ::spotify::playlist4::proto::ListChanges* mutable_changes();
  inline ::spotify::playlist4::proto::ListChanges* release_changes();
  inline void set_allocated_changes(::spotify::playlist4::proto::ListChanges* changes);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.SynchronizeArgs)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_selection();
  inline void clear_has_selection();
  inline void set_has_changes();
  inline void clear_has_changes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::spotify::playlist4::proto::RequestContext* context_;
  ::spotify::playlist4::proto::ListContentSelection* selection_;
  ::spotify::playlist4::proto::ListChanges* changes_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static SynchronizeArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetSnapshotAtRevisionArgs : public ::google::protobuf::Message {
 public:
  GetSnapshotAtRevisionArgs();
  virtual ~GetSnapshotAtRevisionArgs();

  GetSnapshotAtRevisionArgs(const GetSnapshotAtRevisionArgs& from);

  inline GetSnapshotAtRevisionArgs& operator=(const GetSnapshotAtRevisionArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSnapshotAtRevisionArgs& default_instance();

  void Swap(GetSnapshotAtRevisionArgs* other);

  // implements Message ----------------------------------------------

  GetSnapshotAtRevisionArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSnapshotAtRevisionArgs& from);
  void MergeFrom(const GetSnapshotAtRevisionArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional .spotify.playlist4.proto.RequestContext context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::spotify::playlist4::proto::RequestContext& context() const;
  inline ::spotify::playlist4::proto::RequestContext* mutable_context();
  inline ::spotify::playlist4::proto::RequestContext* release_context();
  inline void set_allocated_context(::spotify::playlist4::proto::RequestContext* context);

  // optional bytes revision = 3;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 3;
  inline const ::std::string& revision() const;
  inline void set_revision(const ::std::string& value);
  inline void set_revision(const char* value);
  inline void set_revision(const void* value, size_t size);
  inline ::std::string* mutable_revision();
  inline ::std::string* release_revision();
  inline void set_allocated_revision(::std::string* revision);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.GetSnapshotAtRevisionArgs)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_revision();
  inline void clear_has_revision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::spotify::playlist4::proto::RequestContext* context_;
  ::std::string* revision_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static GetSnapshotAtRevisionArgs* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeRequest : public ::google::protobuf::Message {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  void Swap(SubscribeRequest* other);

  // implements Message ----------------------------------------------

  SubscribeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes uris = 1;
  inline int uris_size() const;
  inline void clear_uris();
  static const int kUrisFieldNumber = 1;
  inline const ::std::string& uris(int index) const;
  inline ::std::string* mutable_uris(int index);
  inline void set_uris(int index, const ::std::string& value);
  inline void set_uris(int index, const char* value);
  inline void set_uris(int index, const void* value, size_t size);
  inline ::std::string* add_uris();
  inline void add_uris(const ::std::string& value);
  inline void add_uris(const char* value);
  inline void add_uris(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& uris() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_uris();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.SubscribeRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> uris_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static SubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnsubscribeRequest : public ::google::protobuf::Message {
 public:
  UnsubscribeRequest();
  virtual ~UnsubscribeRequest();

  UnsubscribeRequest(const UnsubscribeRequest& from);

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribeRequest& default_instance();

  void Swap(UnsubscribeRequest* other);

  // implements Message ----------------------------------------------

  UnsubscribeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnsubscribeRequest& from);
  void MergeFrom(const UnsubscribeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes uris = 1;
  inline int uris_size() const;
  inline void clear_uris();
  static const int kUrisFieldNumber = 1;
  inline const ::std::string& uris(int index) const;
  inline ::std::string* mutable_uris(int index);
  inline void set_uris(int index, const ::std::string& value);
  inline void set_uris(int index, const char* value);
  inline void set_uris(int index, const void* value, size_t size);
  inline ::std::string* add_uris();
  inline void add_uris(const ::std::string& value);
  inline void add_uris(const char* value);
  inline void add_uris(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& uris() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_uris();

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.UnsubscribeRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> uris_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static UnsubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class Playlist4ServiceException : public ::google::protobuf::Message {
 public:
  Playlist4ServiceException();
  virtual ~Playlist4ServiceException();

  Playlist4ServiceException(const Playlist4ServiceException& from);

  inline Playlist4ServiceException& operator=(const Playlist4ServiceException& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Playlist4ServiceException& default_instance();

  void Swap(Playlist4ServiceException* other);

  // implements Message ----------------------------------------------

  Playlist4ServiceException* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Playlist4ServiceException& from);
  void MergeFrom(const Playlist4ServiceException& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string why = 1;
  inline bool has_why() const;
  inline void clear_why();
  static const int kWhyFieldNumber = 1;
  inline const ::std::string& why() const;
  inline void set_why(const ::std::string& value);
  inline void set_why(const char* value);
  inline void set_why(const char* value, size_t size);
  inline ::std::string* mutable_why();
  inline ::std::string* release_why();
  inline void set_allocated_why(::std::string* why);

  // optional string symbol = 2;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional bool permanent = 3;
  inline bool has_permanent() const;
  inline void clear_permanent();
  static const int kPermanentFieldNumber = 3;
  inline bool permanent() const;
  inline void set_permanent(bool value);

  // optional string serviceErrorClass = 4;
  inline bool has_serviceerrorclass() const;
  inline void clear_serviceerrorclass();
  static const int kServiceErrorClassFieldNumber = 4;
  inline const ::std::string& serviceerrorclass() const;
  inline void set_serviceerrorclass(const ::std::string& value);
  inline void set_serviceerrorclass(const char* value);
  inline void set_serviceerrorclass(const char* value, size_t size);
  inline ::std::string* mutable_serviceerrorclass();
  inline ::std::string* release_serviceerrorclass();
  inline void set_allocated_serviceerrorclass(::std::string* serviceerrorclass);

  // optional .spotify.playlist4.proto.Playlist4InboxErrorKind inboxErrorKind = 5;
  inline bool has_inboxerrorkind() const;
  inline void clear_inboxerrorkind();
  static const int kInboxErrorKindFieldNumber = 5;
  inline ::spotify::playlist4::proto::Playlist4InboxErrorKind inboxerrorkind() const;
  inline void set_inboxerrorkind(::spotify::playlist4::proto::Playlist4InboxErrorKind value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Playlist4ServiceException)
 private:
  inline void set_has_why();
  inline void clear_has_why();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_permanent();
  inline void clear_has_permanent();
  inline void set_has_serviceerrorclass();
  inline void clear_has_serviceerrorclass();
  inline void set_has_inboxerrorkind();
  inline void clear_has_inboxerrorkind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* why_;
  ::std::string* symbol_;
  ::std::string* serviceerrorclass_;
  bool permanent_;
  int inboxerrorkind_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static Playlist4ServiceException* default_instance_;
};
// -------------------------------------------------------------------

class SynchronizeReturn : public ::google::protobuf::Message {
 public:
  SynchronizeReturn();
  virtual ~SynchronizeReturn();

  SynchronizeReturn(const SynchronizeReturn& from);

  inline SynchronizeReturn& operator=(const SynchronizeReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchronizeReturn& default_instance();

  void Swap(SynchronizeReturn* other);

  // implements Message ----------------------------------------------

  SynchronizeReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchronizeReturn& from);
  void MergeFrom(const SynchronizeReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .spotify.playlist4.proto.SelectedListContent result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::spotify::playlist4::proto::SelectedListContent& result() const;
  inline ::spotify::playlist4::proto::SelectedListContent* mutable_result();
  inline ::spotify::playlist4::proto::SelectedListContent* release_result();
  inline void set_allocated_result(::spotify::playlist4::proto::SelectedListContent* result);

  // optional .spotify.playlist4.proto.Playlist4ServiceException exception = 4;
  inline bool has_exception() const;
  inline void clear_exception();
  static const int kExceptionFieldNumber = 4;
  inline const ::spotify::playlist4::proto::Playlist4ServiceException& exception() const;
  inline ::spotify::playlist4::proto::Playlist4ServiceException* mutable_exception();
  inline ::spotify::playlist4::proto::Playlist4ServiceException* release_exception();
  inline void set_allocated_exception(::spotify::playlist4::proto::Playlist4ServiceException* exception);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.SynchronizeReturn)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_exception();
  inline void clear_has_exception();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::SelectedListContent* result_;
  ::spotify::playlist4::proto::Playlist4ServiceException* exception_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static SynchronizeReturn* default_instance_;
};
// -------------------------------------------------------------------

class Playlist4ServiceCall : public ::google::protobuf::Message {
 public:
  Playlist4ServiceCall();
  virtual ~Playlist4ServiceCall();

  Playlist4ServiceCall(const Playlist4ServiceCall& from);

  inline Playlist4ServiceCall& operator=(const Playlist4ServiceCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Playlist4ServiceCall& default_instance();

  void Swap(Playlist4ServiceCall* other);

  // implements Message ----------------------------------------------

  Playlist4ServiceCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Playlist4ServiceCall& from);
  void MergeFrom(const Playlist4ServiceCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .spotify.playlist4.proto.Playlist4ServiceMethodKind kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::spotify::playlist4::proto::Playlist4ServiceMethodKind kind() const;
  inline void set_kind(::spotify::playlist4::proto::Playlist4ServiceMethodKind value);

  // optional .spotify.playlist4.proto.GetCurrentRevisionArgs getCurrentRevisionArgs = 2;
  inline bool has_getcurrentrevisionargs() const;
  inline void clear_getcurrentrevisionargs();
  static const int kGetCurrentRevisionArgsFieldNumber = 2;
  inline const ::spotify::playlist4::proto::GetCurrentRevisionArgs& getcurrentrevisionargs() const;
  inline ::spotify::playlist4::proto::GetCurrentRevisionArgs* mutable_getcurrentrevisionargs();
  inline ::spotify::playlist4::proto::GetCurrentRevisionArgs* release_getcurrentrevisionargs();
  inline void set_allocated_getcurrentrevisionargs(::spotify::playlist4::proto::GetCurrentRevisionArgs* getcurrentrevisionargs);

  // optional .spotify.playlist4.proto.GetChangesInSequenceRangeArgs getChangesInSequenceRangeArgs = 3;
  inline bool has_getchangesinsequencerangeargs() const;
  inline void clear_getchangesinsequencerangeargs();
  static const int kGetChangesInSequenceRangeArgsFieldNumber = 3;
  inline const ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs& getchangesinsequencerangeargs() const;
  inline ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs* mutable_getchangesinsequencerangeargs();
  inline ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs* release_getchangesinsequencerangeargs();
  inline void set_allocated_getchangesinsequencerangeargs(::spotify::playlist4::proto::GetChangesInSequenceRangeArgs* getchangesinsequencerangeargs);

  // optional .spotify.playlist4.proto.ObliterateListArgs obliterateListArgs = 4;
  inline bool has_obliteratelistargs() const;
  inline void clear_obliteratelistargs();
  static const int kObliterateListArgsFieldNumber = 4;
  inline const ::spotify::playlist4::proto::ObliterateListArgs& obliteratelistargs() const;
  inline ::spotify::playlist4::proto::ObliterateListArgs* mutable_obliteratelistargs();
  inline ::spotify::playlist4::proto::ObliterateListArgs* release_obliteratelistargs();
  inline void set_allocated_obliteratelistargs(::spotify::playlist4::proto::ObliterateListArgs* obliteratelistargs);

  // optional .spotify.playlist4.proto.SynchronizeArgs synchronizeArgs = 5;
  inline bool has_synchronizeargs() const;
  inline void clear_synchronizeargs();
  static const int kSynchronizeArgsFieldNumber = 5;
  inline const ::spotify::playlist4::proto::SynchronizeArgs& synchronizeargs() const;
  inline ::spotify::playlist4::proto::SynchronizeArgs* mutable_synchronizeargs();
  inline ::spotify::playlist4::proto::SynchronizeArgs* release_synchronizeargs();
  inline void set_allocated_synchronizeargs(::spotify::playlist4::proto::SynchronizeArgs* synchronizeargs);

  // optional .spotify.playlist4.proto.UpdatePublishedArgs updatePublishedArgs = 6;
  inline bool has_updatepublishedargs() const;
  inline void clear_updatepublishedargs();
  static const int kUpdatePublishedArgsFieldNumber = 6;
  inline const ::spotify::playlist4::proto::UpdatePublishedArgs& updatepublishedargs() const;
  inline ::spotify::playlist4::proto::UpdatePublishedArgs* mutable_updatepublishedargs();
  inline ::spotify::playlist4::proto::UpdatePublishedArgs* release_updatepublishedargs();
  inline void set_allocated_updatepublishedargs(::spotify::playlist4::proto::UpdatePublishedArgs* updatepublishedargs);

  // optional .spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs getChangesInSequenceRangeMatchingPl3VersionArgs = 7;
  inline bool has_getchangesinsequencerangematchingpl3versionargs() const;
  inline void clear_getchangesinsequencerangematchingpl3versionargs();
  static const int kGetChangesInSequenceRangeMatchingPl3VersionArgsFieldNumber = 7;
  inline const ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs& getchangesinsequencerangematchingpl3versionargs() const;
  inline ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs* mutable_getchangesinsequencerangematchingpl3versionargs();
  inline ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs* release_getchangesinsequencerangematchingpl3versionargs();
  inline void set_allocated_getchangesinsequencerangematchingpl3versionargs(::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs* getchangesinsequencerangematchingpl3versionargs);

  // optional .spotify.playlist4.proto.GetSnapshotAtRevisionArgs getSnapshotAtRevisionArgs = 8;
  inline bool has_getsnapshotatrevisionargs() const;
  inline void clear_getsnapshotatrevisionargs();
  static const int kGetSnapshotAtRevisionArgsFieldNumber = 8;
  inline const ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs& getsnapshotatrevisionargs() const;
  inline ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs* mutable_getsnapshotatrevisionargs();
  inline ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs* release_getsnapshotatrevisionargs();
  inline void set_allocated_getsnapshotatrevisionargs(::spotify::playlist4::proto::GetSnapshotAtRevisionArgs* getsnapshotatrevisionargs);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Playlist4ServiceCall)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_getcurrentrevisionargs();
  inline void clear_has_getcurrentrevisionargs();
  inline void set_has_getchangesinsequencerangeargs();
  inline void clear_has_getchangesinsequencerangeargs();
  inline void set_has_obliteratelistargs();
  inline void clear_has_obliteratelistargs();
  inline void set_has_synchronizeargs();
  inline void clear_has_synchronizeargs();
  inline void set_has_updatepublishedargs();
  inline void clear_has_updatepublishedargs();
  inline void set_has_getchangesinsequencerangematchingpl3versionargs();
  inline void clear_has_getchangesinsequencerangematchingpl3versionargs();
  inline void set_has_getsnapshotatrevisionargs();
  inline void clear_has_getsnapshotatrevisionargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::GetCurrentRevisionArgs* getcurrentrevisionargs_;
  ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs* getchangesinsequencerangeargs_;
  ::spotify::playlist4::proto::ObliterateListArgs* obliteratelistargs_;
  ::spotify::playlist4::proto::SynchronizeArgs* synchronizeargs_;
  ::spotify::playlist4::proto::UpdatePublishedArgs* updatepublishedargs_;
  ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs* getchangesinsequencerangematchingpl3versionargs_;
  ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs* getsnapshotatrevisionargs_;
  int kind_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static Playlist4ServiceCall* default_instance_;
};
// -------------------------------------------------------------------

class Playlist4ServiceReturn : public ::google::protobuf::Message {
 public:
  Playlist4ServiceReturn();
  virtual ~Playlist4ServiceReturn();

  Playlist4ServiceReturn(const Playlist4ServiceReturn& from);

  inline Playlist4ServiceReturn& operator=(const Playlist4ServiceReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Playlist4ServiceReturn& default_instance();

  void Swap(Playlist4ServiceReturn* other);

  // implements Message ----------------------------------------------

  Playlist4ServiceReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Playlist4ServiceReturn& from);
  void MergeFrom(const Playlist4ServiceReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .spotify.playlist4.proto.Playlist4ServiceMethodKind kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::spotify::playlist4::proto::Playlist4ServiceMethodKind kind() const;
  inline void set_kind(::spotify::playlist4::proto::Playlist4ServiceMethodKind value);

  // optional .spotify.playlist4.proto.Playlist4ServiceException exception = 2;
  inline bool has_exception() const;
  inline void clear_exception();
  static const int kExceptionFieldNumber = 2;
  inline const ::spotify::playlist4::proto::Playlist4ServiceException& exception() const;
  inline ::spotify::playlist4::proto::Playlist4ServiceException* mutable_exception();
  inline ::spotify::playlist4::proto::Playlist4ServiceException* release_exception();
  inline void set_allocated_exception(::spotify::playlist4::proto::Playlist4ServiceException* exception);

  // optional bytes getCurrentRevisionReturn = 3;
  inline bool has_getcurrentrevisionreturn() const;
  inline void clear_getcurrentrevisionreturn();
  static const int kGetCurrentRevisionReturnFieldNumber = 3;
  inline const ::std::string& getcurrentrevisionreturn() const;
  inline void set_getcurrentrevisionreturn(const ::std::string& value);
  inline void set_getcurrentrevisionreturn(const char* value);
  inline void set_getcurrentrevisionreturn(const void* value, size_t size);
  inline ::std::string* mutable_getcurrentrevisionreturn();
  inline ::std::string* release_getcurrentrevisionreturn();
  inline void set_allocated_getcurrentrevisionreturn(::std::string* getcurrentrevisionreturn);

  // optional .spotify.playlist4.proto.GetChangesInSequenceRangeReturn getChangesInSequenceRangeReturn = 4;
  inline bool has_getchangesinsequencerangereturn() const;
  inline void clear_getchangesinsequencerangereturn();
  static const int kGetChangesInSequenceRangeReturnFieldNumber = 4;
  inline const ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn& getchangesinsequencerangereturn() const;
  inline ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* mutable_getchangesinsequencerangereturn();
  inline ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* release_getchangesinsequencerangereturn();
  inline void set_allocated_getchangesinsequencerangereturn(::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* getchangesinsequencerangereturn);

  // optional bool obliterateListReturn = 5;
  inline bool has_obliteratelistreturn() const;
  inline void clear_obliteratelistreturn();
  static const int kObliterateListReturnFieldNumber = 5;
  inline bool obliteratelistreturn() const;
  inline void set_obliteratelistreturn(bool value);

  // optional .spotify.playlist4.proto.SynchronizeReturn synchronizeReturn = 6;
  inline bool has_synchronizereturn() const;
  inline void clear_synchronizereturn();
  static const int kSynchronizeReturnFieldNumber = 6;
  inline const ::spotify::playlist4::proto::SynchronizeReturn& synchronizereturn() const;
  inline ::spotify::playlist4::proto::SynchronizeReturn* mutable_synchronizereturn();
  inline ::spotify::playlist4::proto::SynchronizeReturn* release_synchronizereturn();
  inline void set_allocated_synchronizereturn(::spotify::playlist4::proto::SynchronizeReturn* synchronizereturn);

  // optional bool updatePublishedReturn = 7;
  inline bool has_updatepublishedreturn() const;
  inline void clear_updatepublishedreturn();
  static const int kUpdatePublishedReturnFieldNumber = 7;
  inline bool updatepublishedreturn() const;
  inline void set_updatepublishedreturn(bool value);

  // optional .spotify.playlist4.proto.GetChangesInSequenceRangeReturn getChangesInSequenceRangeMatchingPl3VersionReturn = 8;
  inline bool has_getchangesinsequencerangematchingpl3versionreturn() const;
  inline void clear_getchangesinsequencerangematchingpl3versionreturn();
  static const int kGetChangesInSequenceRangeMatchingPl3VersionReturnFieldNumber = 8;
  inline const ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn& getchangesinsequencerangematchingpl3versionreturn() const;
  inline ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* mutable_getchangesinsequencerangematchingpl3versionreturn();
  inline ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* release_getchangesinsequencerangematchingpl3versionreturn();
  inline void set_allocated_getchangesinsequencerangematchingpl3versionreturn(::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* getchangesinsequencerangematchingpl3versionreturn);

  // optional bytes getSnapshotAtRevisionReturn = 9;
  inline bool has_getsnapshotatrevisionreturn() const;
  inline void clear_getsnapshotatrevisionreturn();
  static const int kGetSnapshotAtRevisionReturnFieldNumber = 9;
  inline const ::std::string& getsnapshotatrevisionreturn() const;
  inline void set_getsnapshotatrevisionreturn(const ::std::string& value);
  inline void set_getsnapshotatrevisionreturn(const char* value);
  inline void set_getsnapshotatrevisionreturn(const void* value, size_t size);
  inline ::std::string* mutable_getsnapshotatrevisionreturn();
  inline ::std::string* release_getsnapshotatrevisionreturn();
  inline void set_allocated_getsnapshotatrevisionreturn(::std::string* getsnapshotatrevisionreturn);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.Playlist4ServiceReturn)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_exception();
  inline void clear_has_exception();
  inline void set_has_getcurrentrevisionreturn();
  inline void clear_has_getcurrentrevisionreturn();
  inline void set_has_getchangesinsequencerangereturn();
  inline void clear_has_getchangesinsequencerangereturn();
  inline void set_has_obliteratelistreturn();
  inline void clear_has_obliteratelistreturn();
  inline void set_has_synchronizereturn();
  inline void clear_has_synchronizereturn();
  inline void set_has_updatepublishedreturn();
  inline void clear_has_updatepublishedreturn();
  inline void set_has_getchangesinsequencerangematchingpl3versionreturn();
  inline void clear_has_getchangesinsequencerangematchingpl3versionreturn();
  inline void set_has_getsnapshotatrevisionreturn();
  inline void clear_has_getsnapshotatrevisionreturn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::spotify::playlist4::proto::Playlist4ServiceException* exception_;
  ::std::string* getcurrentrevisionreturn_;
  ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* getchangesinsequencerangereturn_;
  int kind_;
  bool obliteratelistreturn_;
  bool updatepublishedreturn_;
  ::spotify::playlist4::proto::SynchronizeReturn* synchronizereturn_;
  ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* getchangesinsequencerangematchingpl3versionreturn_;
  ::std::string* getsnapshotatrevisionreturn_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static Playlist4ServiceReturn* default_instance_;
};
// -------------------------------------------------------------------

class CreateListReply : public ::google::protobuf::Message {
 public:
  CreateListReply();
  virtual ~CreateListReply();

  CreateListReply(const CreateListReply& from);

  inline CreateListReply& operator=(const CreateListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateListReply& default_instance();

  void Swap(CreateListReply* other);

  // implements Message ----------------------------------------------

  CreateListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateListReply& from);
  void MergeFrom(const CreateListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional bytes revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline const ::std::string& revision() const;
  inline void set_revision(const ::std::string& value);
  inline void set_revision(const char* value);
  inline void set_revision(const void* value, size_t size);
  inline ::std::string* mutable_revision();
  inline ::std::string* release_revision();
  inline void set_allocated_revision(::std::string* revision);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.CreateListReply)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_revision();
  inline void clear_has_revision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* revision_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static CreateListReply* default_instance_;
};
// -------------------------------------------------------------------

class ModifyReply : public ::google::protobuf::Message {
 public:
  ModifyReply();
  virtual ~ModifyReply();

  ModifyReply(const ModifyReply& from);

  inline ModifyReply& operator=(const ModifyReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyReply& default_instance();

  void Swap(ModifyReply* other);

  // implements Message ----------------------------------------------

  ModifyReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyReply& from);
  void MergeFrom(const ModifyReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional bytes revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline const ::std::string& revision() const;
  inline void set_revision(const ::std::string& value);
  inline void set_revision(const char* value);
  inline void set_revision(const void* value, size_t size);
  inline ::std::string* mutable_revision();
  inline ::std::string* release_revision();
  inline void set_allocated_revision(::std::string* revision);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ModifyReply)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_revision();
  inline void clear_has_revision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* revision_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static ModifyReply* default_instance_;
};
// -------------------------------------------------------------------

class PlaylistModificationInfo : public ::google::protobuf::Message {
 public:
  PlaylistModificationInfo();
  virtual ~PlaylistModificationInfo();

  PlaylistModificationInfo(const PlaylistModificationInfo& from);

  inline PlaylistModificationInfo& operator=(const PlaylistModificationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaylistModificationInfo& default_instance();

  void Swap(PlaylistModificationInfo* other);

  // implements Message ----------------------------------------------

  PlaylistModificationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaylistModificationInfo& from);
  void MergeFrom(const PlaylistModificationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const void* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional bytes new_revision = 2;
  inline bool has_new_revision() const;
  inline void clear_new_revision();
  static const int kNewRevisionFieldNumber = 2;
  inline const ::std::string& new_revision() const;
  inline void set_new_revision(const ::std::string& value);
  inline void set_new_revision(const char* value);
  inline void set_new_revision(const void* value, size_t size);
  inline ::std::string* mutable_new_revision();
  inline ::std::string* release_new_revision();
  inline void set_allocated_new_revision(::std::string* new_revision);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.PlaylistModificationInfo)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_new_revision();
  inline void clear_has_new_revision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* new_revision_;
  friend void  protobuf_AddDesc_playlist4service_2eproto();
  friend void protobuf_AssignDesc_playlist4service_2eproto();
  friend void protobuf_ShutdownFile_playlist4service_2eproto();

  void InitAsDefaultInstance();
  static PlaylistModificationInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestContext

// optional bool administrative = 2;
inline bool RequestContext::has_administrative() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestContext::set_has_administrative() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestContext::clear_has_administrative() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestContext::clear_administrative() {
  administrative_ = false;
  clear_has_administrative();
}
inline bool RequestContext::administrative() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.RequestContext.administrative)
  return administrative_;
}
inline void RequestContext::set_administrative(bool value) {
  set_has_administrative();
  administrative_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.RequestContext.administrative)
}

// optional bool migration = 4;
inline bool RequestContext::has_migration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestContext::set_has_migration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestContext::clear_has_migration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestContext::clear_migration() {
  migration_ = false;
  clear_has_migration();
}
inline bool RequestContext::migration() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.RequestContext.migration)
  return migration_;
}
inline void RequestContext::set_migration(bool value) {
  set_has_migration();
  migration_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.RequestContext.migration)
}

// optional string tag = 7;
inline bool RequestContext::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestContext::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestContext::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestContext::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& RequestContext::tag() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.RequestContext.tag)
  return *tag_;
}
inline void RequestContext::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.RequestContext.tag)
}
inline void RequestContext::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.RequestContext.tag)
}
inline void RequestContext::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.RequestContext.tag)
}
inline ::std::string* RequestContext::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.RequestContext.tag)
  return tag_;
}
inline ::std::string* RequestContext::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestContext::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.RequestContext.tag)
}

// optional bool useStarredView = 8;
inline bool RequestContext::has_usestarredview() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestContext::set_has_usestarredview() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestContext::clear_has_usestarredview() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestContext::clear_usestarredview() {
  usestarredview_ = false;
  clear_has_usestarredview();
}
inline bool RequestContext::usestarredview() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.RequestContext.useStarredView)
  return usestarredview_;
}
inline void RequestContext::set_usestarredview(bool value) {
  set_has_usestarredview();
  usestarredview_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.RequestContext.useStarredView)
}

// optional bool syncWithPublished = 9;
inline bool RequestContext::has_syncwithpublished() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestContext::set_has_syncwithpublished() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestContext::clear_has_syncwithpublished() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestContext::clear_syncwithpublished() {
  syncwithpublished_ = false;
  clear_has_syncwithpublished();
}
inline bool RequestContext::syncwithpublished() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.RequestContext.syncWithPublished)
  return syncwithpublished_;
}
inline void RequestContext::set_syncwithpublished(bool value) {
  set_has_syncwithpublished();
  syncwithpublished_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.RequestContext.syncWithPublished)
}

// -------------------------------------------------------------------

// GetCurrentRevisionArgs

// optional bytes uri = 1;
inline bool GetCurrentRevisionArgs::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCurrentRevisionArgs::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCurrentRevisionArgs::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCurrentRevisionArgs::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& GetCurrentRevisionArgs::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetCurrentRevisionArgs.uri)
  return *uri_;
}
inline void GetCurrentRevisionArgs::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetCurrentRevisionArgs.uri)
}
inline void GetCurrentRevisionArgs::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.GetCurrentRevisionArgs.uri)
}
inline void GetCurrentRevisionArgs::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.GetCurrentRevisionArgs.uri)
}
inline ::std::string* GetCurrentRevisionArgs::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetCurrentRevisionArgs.uri)
  return uri_;
}
inline ::std::string* GetCurrentRevisionArgs::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetCurrentRevisionArgs::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetCurrentRevisionArgs.uri)
}

// optional .spotify.playlist4.proto.RequestContext context = 2;
inline bool GetCurrentRevisionArgs::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCurrentRevisionArgs::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCurrentRevisionArgs::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCurrentRevisionArgs::clear_context() {
  if (context_ != NULL) context_->::spotify::playlist4::proto::RequestContext::Clear();
  clear_has_context();
}
inline const ::spotify::playlist4::proto::RequestContext& GetCurrentRevisionArgs::context() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetCurrentRevisionArgs.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::spotify::playlist4::proto::RequestContext* GetCurrentRevisionArgs::mutable_context() {
  set_has_context();
  if (context_ == NULL) context_ = new ::spotify::playlist4::proto::RequestContext;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetCurrentRevisionArgs.context)
  return context_;
}
inline ::spotify::playlist4::proto::RequestContext* GetCurrentRevisionArgs::release_context() {
  clear_has_context();
  ::spotify::playlist4::proto::RequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void GetCurrentRevisionArgs::set_allocated_context(::spotify::playlist4::proto::RequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetCurrentRevisionArgs.context)
}

// -------------------------------------------------------------------

// GetChangesInSequenceRangeArgs

// optional bytes uri = 1;
inline bool GetChangesInSequenceRangeArgs::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChangesInSequenceRangeArgs::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChangesInSequenceRangeArgs::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChangesInSequenceRangeArgs::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& GetChangesInSequenceRangeArgs::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.uri)
  return *uri_;
}
inline void GetChangesInSequenceRangeArgs::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.uri)
}
inline void GetChangesInSequenceRangeArgs::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.uri)
}
inline void GetChangesInSequenceRangeArgs::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.uri)
}
inline ::std::string* GetChangesInSequenceRangeArgs::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.uri)
  return uri_;
}
inline ::std::string* GetChangesInSequenceRangeArgs::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetChangesInSequenceRangeArgs::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.uri)
}

// optional .spotify.playlist4.proto.RequestContext context = 2;
inline bool GetChangesInSequenceRangeArgs::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChangesInSequenceRangeArgs::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChangesInSequenceRangeArgs::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChangesInSequenceRangeArgs::clear_context() {
  if (context_ != NULL) context_->::spotify::playlist4::proto::RequestContext::Clear();
  clear_has_context();
}
inline const ::spotify::playlist4::proto::RequestContext& GetChangesInSequenceRangeArgs::context() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::spotify::playlist4::proto::RequestContext* GetChangesInSequenceRangeArgs::mutable_context() {
  set_has_context();
  if (context_ == NULL) context_ = new ::spotify::playlist4::proto::RequestContext;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.context)
  return context_;
}
inline ::spotify::playlist4::proto::RequestContext* GetChangesInSequenceRangeArgs::release_context() {
  clear_has_context();
  ::spotify::playlist4::proto::RequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void GetChangesInSequenceRangeArgs::set_allocated_context(::spotify::playlist4::proto::RequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.context)
}

// optional int32 fromSequenceNumber = 3;
inline bool GetChangesInSequenceRangeArgs::has_fromsequencenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChangesInSequenceRangeArgs::set_has_fromsequencenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChangesInSequenceRangeArgs::clear_has_fromsequencenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChangesInSequenceRangeArgs::clear_fromsequencenumber() {
  fromsequencenumber_ = 0;
  clear_has_fromsequencenumber();
}
inline ::google::protobuf::int32 GetChangesInSequenceRangeArgs::fromsequencenumber() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.fromSequenceNumber)
  return fromsequencenumber_;
}
inline void GetChangesInSequenceRangeArgs::set_fromsequencenumber(::google::protobuf::int32 value) {
  set_has_fromsequencenumber();
  fromsequencenumber_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.fromSequenceNumber)
}

// optional int32 toSequenceNumber = 4;
inline bool GetChangesInSequenceRangeArgs::has_tosequencenumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetChangesInSequenceRangeArgs::set_has_tosequencenumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetChangesInSequenceRangeArgs::clear_has_tosequencenumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetChangesInSequenceRangeArgs::clear_tosequencenumber() {
  tosequencenumber_ = 0;
  clear_has_tosequencenumber();
}
inline ::google::protobuf::int32 GetChangesInSequenceRangeArgs::tosequencenumber() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.toSequenceNumber)
  return tosequencenumber_;
}
inline void GetChangesInSequenceRangeArgs::set_tosequencenumber(::google::protobuf::int32 value) {
  set_has_tosequencenumber();
  tosequencenumber_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetChangesInSequenceRangeArgs.toSequenceNumber)
}

// -------------------------------------------------------------------

// GetChangesInSequenceRangeMatchingPl3VersionArgs

// optional bytes uri = 1;
inline bool GetChangesInSequenceRangeMatchingPl3VersionArgs::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& GetChangesInSequenceRangeMatchingPl3VersionArgs::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.uri)
  return *uri_;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.uri)
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.uri)
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.uri)
}
inline ::std::string* GetChangesInSequenceRangeMatchingPl3VersionArgs::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.uri)
  return uri_;
}
inline ::std::string* GetChangesInSequenceRangeMatchingPl3VersionArgs::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.uri)
}

// optional .spotify.playlist4.proto.RequestContext context = 2;
inline bool GetChangesInSequenceRangeMatchingPl3VersionArgs::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_context() {
  if (context_ != NULL) context_->::spotify::playlist4::proto::RequestContext::Clear();
  clear_has_context();
}
inline const ::spotify::playlist4::proto::RequestContext& GetChangesInSequenceRangeMatchingPl3VersionArgs::context() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::spotify::playlist4::proto::RequestContext* GetChangesInSequenceRangeMatchingPl3VersionArgs::mutable_context() {
  set_has_context();
  if (context_ == NULL) context_ = new ::spotify::playlist4::proto::RequestContext;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.context)
  return context_;
}
inline ::spotify::playlist4::proto::RequestContext* GetChangesInSequenceRangeMatchingPl3VersionArgs::release_context() {
  clear_has_context();
  ::spotify::playlist4::proto::RequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_allocated_context(::spotify::playlist4::proto::RequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.context)
}

// optional int32 fromSequenceNumber = 3;
inline bool GetChangesInSequenceRangeMatchingPl3VersionArgs::has_fromsequencenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_has_fromsequencenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_has_fromsequencenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_fromsequencenumber() {
  fromsequencenumber_ = 0;
  clear_has_fromsequencenumber();
}
inline ::google::protobuf::int32 GetChangesInSequenceRangeMatchingPl3VersionArgs::fromsequencenumber() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.fromSequenceNumber)
  return fromsequencenumber_;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_fromsequencenumber(::google::protobuf::int32 value) {
  set_has_fromsequencenumber();
  fromsequencenumber_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.fromSequenceNumber)
}

// optional int32 toSequenceNumber = 4;
inline bool GetChangesInSequenceRangeMatchingPl3VersionArgs::has_tosequencenumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_has_tosequencenumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_has_tosequencenumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_tosequencenumber() {
  tosequencenumber_ = 0;
  clear_has_tosequencenumber();
}
inline ::google::protobuf::int32 GetChangesInSequenceRangeMatchingPl3VersionArgs::tosequencenumber() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.toSequenceNumber)
  return tosequencenumber_;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_tosequencenumber(::google::protobuf::int32 value) {
  set_has_tosequencenumber();
  tosequencenumber_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.toSequenceNumber)
}

// optional string pl3Version = 5;
inline bool GetChangesInSequenceRangeMatchingPl3VersionArgs::has_pl3version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_has_pl3version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_has_pl3version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::clear_pl3version() {
  if (pl3version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3version_->clear();
  }
  clear_has_pl3version();
}
inline const ::std::string& GetChangesInSequenceRangeMatchingPl3VersionArgs::pl3version() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.pl3Version)
  return *pl3version_;
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_pl3version(const ::std::string& value) {
  set_has_pl3version();
  if (pl3version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3version_ = new ::std::string;
  }
  pl3version_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.pl3Version)
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_pl3version(const char* value) {
  set_has_pl3version();
  if (pl3version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3version_ = new ::std::string;
  }
  pl3version_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.pl3Version)
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_pl3version(const char* value, size_t size) {
  set_has_pl3version();
  if (pl3version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3version_ = new ::std::string;
  }
  pl3version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.pl3Version)
}
inline ::std::string* GetChangesInSequenceRangeMatchingPl3VersionArgs::mutable_pl3version() {
  set_has_pl3version();
  if (pl3version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pl3version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.pl3Version)
  return pl3version_;
}
inline ::std::string* GetChangesInSequenceRangeMatchingPl3VersionArgs::release_pl3version() {
  clear_has_pl3version();
  if (pl3version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pl3version_;
    pl3version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetChangesInSequenceRangeMatchingPl3VersionArgs::set_allocated_pl3version(::std::string* pl3version) {
  if (pl3version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pl3version_;
  }
  if (pl3version) {
    set_has_pl3version();
    pl3version_ = pl3version;
  } else {
    clear_has_pl3version();
    pl3version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs.pl3Version)
}

// -------------------------------------------------------------------

// GetChangesInSequenceRangeReturn

// repeated .spotify.playlist4.proto.RevisionTaggedChangeSet result = 1;
inline int GetChangesInSequenceRangeReturn::result_size() const {
  return result_.size();
}
inline void GetChangesInSequenceRangeReturn::clear_result() {
  result_.Clear();
}
inline const ::spotify::playlist4::proto::RevisionTaggedChangeSet& GetChangesInSequenceRangeReturn::result(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetChangesInSequenceRangeReturn.result)
  return result_.Get(index);
}
inline ::spotify::playlist4::proto::RevisionTaggedChangeSet* GetChangesInSequenceRangeReturn::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetChangesInSequenceRangeReturn.result)
  return result_.Mutable(index);
}
inline ::spotify::playlist4::proto::RevisionTaggedChangeSet* GetChangesInSequenceRangeReturn::add_result() {
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.GetChangesInSequenceRangeReturn.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::RevisionTaggedChangeSet >&
GetChangesInSequenceRangeReturn::result() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.GetChangesInSequenceRangeReturn.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::playlist4::proto::RevisionTaggedChangeSet >*
GetChangesInSequenceRangeReturn::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.GetChangesInSequenceRangeReturn.result)
  return &result_;
}

// -------------------------------------------------------------------

// ObliterateListArgs

// optional bytes uri = 1;
inline bool ObliterateListArgs::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObliterateListArgs::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObliterateListArgs::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObliterateListArgs::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& ObliterateListArgs::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ObliterateListArgs.uri)
  return *uri_;
}
inline void ObliterateListArgs::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ObliterateListArgs.uri)
}
inline void ObliterateListArgs::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ObliterateListArgs.uri)
}
inline void ObliterateListArgs::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ObliterateListArgs.uri)
}
inline ::std::string* ObliterateListArgs::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ObliterateListArgs.uri)
  return uri_;
}
inline ::std::string* ObliterateListArgs::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ObliterateListArgs::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ObliterateListArgs.uri)
}

// optional .spotify.playlist4.proto.RequestContext context = 2;
inline bool ObliterateListArgs::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObliterateListArgs::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObliterateListArgs::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObliterateListArgs::clear_context() {
  if (context_ != NULL) context_->::spotify::playlist4::proto::RequestContext::Clear();
  clear_has_context();
}
inline const ::spotify::playlist4::proto::RequestContext& ObliterateListArgs::context() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ObliterateListArgs.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::spotify::playlist4::proto::RequestContext* ObliterateListArgs::mutable_context() {
  set_has_context();
  if (context_ == NULL) context_ = new ::spotify::playlist4::proto::RequestContext;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ObliterateListArgs.context)
  return context_;
}
inline ::spotify::playlist4::proto::RequestContext* ObliterateListArgs::release_context() {
  clear_has_context();
  ::spotify::playlist4::proto::RequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void ObliterateListArgs::set_allocated_context(::spotify::playlist4::proto::RequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ObliterateListArgs.context)
}

// -------------------------------------------------------------------

// UpdatePublishedArgs

// optional bytes publishedUri = 1;
inline bool UpdatePublishedArgs::has_publisheduri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePublishedArgs::set_has_publisheduri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePublishedArgs::clear_has_publisheduri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePublishedArgs::clear_publisheduri() {
  if (publisheduri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisheduri_->clear();
  }
  clear_has_publisheduri();
}
inline const ::std::string& UpdatePublishedArgs::publisheduri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdatePublishedArgs.publishedUri)
  return *publisheduri_;
}
inline void UpdatePublishedArgs::set_publisheduri(const ::std::string& value) {
  set_has_publisheduri();
  if (publisheduri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisheduri_ = new ::std::string;
  }
  publisheduri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.UpdatePublishedArgs.publishedUri)
}
inline void UpdatePublishedArgs::set_publisheduri(const char* value) {
  set_has_publisheduri();
  if (publisheduri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisheduri_ = new ::std::string;
  }
  publisheduri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.UpdatePublishedArgs.publishedUri)
}
inline void UpdatePublishedArgs::set_publisheduri(const void* value, size_t size) {
  set_has_publisheduri();
  if (publisheduri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisheduri_ = new ::std::string;
  }
  publisheduri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.UpdatePublishedArgs.publishedUri)
}
inline ::std::string* UpdatePublishedArgs::mutable_publisheduri() {
  set_has_publisheduri();
  if (publisheduri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publisheduri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdatePublishedArgs.publishedUri)
  return publisheduri_;
}
inline ::std::string* UpdatePublishedArgs::release_publisheduri() {
  clear_has_publisheduri();
  if (publisheduri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = publisheduri_;
    publisheduri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdatePublishedArgs::set_allocated_publisheduri(::std::string* publisheduri) {
  if (publisheduri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publisheduri_;
  }
  if (publisheduri) {
    set_has_publisheduri();
    publisheduri_ = publisheduri;
  } else {
    clear_has_publisheduri();
    publisheduri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdatePublishedArgs.publishedUri)
}

// optional .spotify.playlist4.proto.RequestContext context = 2;
inline bool UpdatePublishedArgs::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePublishedArgs::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdatePublishedArgs::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdatePublishedArgs::clear_context() {
  if (context_ != NULL) context_->::spotify::playlist4::proto::RequestContext::Clear();
  clear_has_context();
}
inline const ::spotify::playlist4::proto::RequestContext& UpdatePublishedArgs::context() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdatePublishedArgs.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::spotify::playlist4::proto::RequestContext* UpdatePublishedArgs::mutable_context() {
  set_has_context();
  if (context_ == NULL) context_ = new ::spotify::playlist4::proto::RequestContext;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdatePublishedArgs.context)
  return context_;
}
inline ::spotify::playlist4::proto::RequestContext* UpdatePublishedArgs::release_context() {
  clear_has_context();
  ::spotify::playlist4::proto::RequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void UpdatePublishedArgs::set_allocated_context(::spotify::playlist4::proto::RequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdatePublishedArgs.context)
}

// optional bytes uri = 3;
inline bool UpdatePublishedArgs::has_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdatePublishedArgs::set_has_uri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdatePublishedArgs::clear_has_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdatePublishedArgs::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& UpdatePublishedArgs::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdatePublishedArgs.uri)
  return *uri_;
}
inline void UpdatePublishedArgs::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.UpdatePublishedArgs.uri)
}
inline void UpdatePublishedArgs::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.UpdatePublishedArgs.uri)
}
inline void UpdatePublishedArgs::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.UpdatePublishedArgs.uri)
}
inline ::std::string* UpdatePublishedArgs::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UpdatePublishedArgs.uri)
  return uri_;
}
inline ::std::string* UpdatePublishedArgs::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdatePublishedArgs::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.UpdatePublishedArgs.uri)
}

// optional bool isPublished = 4;
inline bool UpdatePublishedArgs::has_ispublished() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdatePublishedArgs::set_has_ispublished() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdatePublishedArgs::clear_has_ispublished() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdatePublishedArgs::clear_ispublished() {
  ispublished_ = false;
  clear_has_ispublished();
}
inline bool UpdatePublishedArgs::ispublished() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UpdatePublishedArgs.isPublished)
  return ispublished_;
}
inline void UpdatePublishedArgs::set_ispublished(bool value) {
  set_has_ispublished();
  ispublished_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.UpdatePublishedArgs.isPublished)
}

// -------------------------------------------------------------------

// SynchronizeArgs

// optional bytes uri = 1;
inline bool SynchronizeArgs::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchronizeArgs::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchronizeArgs::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchronizeArgs::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& SynchronizeArgs::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SynchronizeArgs.uri)
  return *uri_;
}
inline void SynchronizeArgs::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.SynchronizeArgs.uri)
}
inline void SynchronizeArgs::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.SynchronizeArgs.uri)
}
inline void SynchronizeArgs::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.SynchronizeArgs.uri)
}
inline ::std::string* SynchronizeArgs::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SynchronizeArgs.uri)
  return uri_;
}
inline ::std::string* SynchronizeArgs::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SynchronizeArgs::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SynchronizeArgs.uri)
}

// optional .spotify.playlist4.proto.RequestContext context = 2;
inline bool SynchronizeArgs::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchronizeArgs::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchronizeArgs::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchronizeArgs::clear_context() {
  if (context_ != NULL) context_->::spotify::playlist4::proto::RequestContext::Clear();
  clear_has_context();
}
inline const ::spotify::playlist4::proto::RequestContext& SynchronizeArgs::context() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SynchronizeArgs.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::spotify::playlist4::proto::RequestContext* SynchronizeArgs::mutable_context() {
  set_has_context();
  if (context_ == NULL) context_ = new ::spotify::playlist4::proto::RequestContext;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SynchronizeArgs.context)
  return context_;
}
inline ::spotify::playlist4::proto::RequestContext* SynchronizeArgs::release_context() {
  clear_has_context();
  ::spotify::playlist4::proto::RequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void SynchronizeArgs::set_allocated_context(::spotify::playlist4::proto::RequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SynchronizeArgs.context)
}

// optional .spotify.playlist4.proto.ListContentSelection selection = 3;
inline bool SynchronizeArgs::has_selection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynchronizeArgs::set_has_selection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynchronizeArgs::clear_has_selection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynchronizeArgs::clear_selection() {
  if (selection_ != NULL) selection_->::spotify::playlist4::proto::ListContentSelection::Clear();
  clear_has_selection();
}
inline const ::spotify::playlist4::proto::ListContentSelection& SynchronizeArgs::selection() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SynchronizeArgs.selection)
  return selection_ != NULL ? *selection_ : *default_instance_->selection_;
}
inline ::spotify::playlist4::proto::ListContentSelection* SynchronizeArgs::mutable_selection() {
  set_has_selection();
  if (selection_ == NULL) selection_ = new ::spotify::playlist4::proto::ListContentSelection;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SynchronizeArgs.selection)
  return selection_;
}
inline ::spotify::playlist4::proto::ListContentSelection* SynchronizeArgs::release_selection() {
  clear_has_selection();
  ::spotify::playlist4::proto::ListContentSelection* temp = selection_;
  selection_ = NULL;
  return temp;
}
inline void SynchronizeArgs::set_allocated_selection(::spotify::playlist4::proto::ListContentSelection* selection) {
  delete selection_;
  selection_ = selection;
  if (selection) {
    set_has_selection();
  } else {
    clear_has_selection();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SynchronizeArgs.selection)
}

// optional .spotify.playlist4.proto.ListChanges changes = 4;
inline bool SynchronizeArgs::has_changes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SynchronizeArgs::set_has_changes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SynchronizeArgs::clear_has_changes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SynchronizeArgs::clear_changes() {
  if (changes_ != NULL) changes_->::spotify::playlist4::proto::ListChanges::Clear();
  clear_has_changes();
}
inline const ::spotify::playlist4::proto::ListChanges& SynchronizeArgs::changes() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SynchronizeArgs.changes)
  return changes_ != NULL ? *changes_ : *default_instance_->changes_;
}
inline ::spotify::playlist4::proto::ListChanges* SynchronizeArgs::mutable_changes() {
  set_has_changes();
  if (changes_ == NULL) changes_ = new ::spotify::playlist4::proto::ListChanges;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SynchronizeArgs.changes)
  return changes_;
}
inline ::spotify::playlist4::proto::ListChanges* SynchronizeArgs::release_changes() {
  clear_has_changes();
  ::spotify::playlist4::proto::ListChanges* temp = changes_;
  changes_ = NULL;
  return temp;
}
inline void SynchronizeArgs::set_allocated_changes(::spotify::playlist4::proto::ListChanges* changes) {
  delete changes_;
  changes_ = changes;
  if (changes) {
    set_has_changes();
  } else {
    clear_has_changes();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SynchronizeArgs.changes)
}

// -------------------------------------------------------------------

// GetSnapshotAtRevisionArgs

// optional bytes uri = 1;
inline bool GetSnapshotAtRevisionArgs::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSnapshotAtRevisionArgs::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSnapshotAtRevisionArgs::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSnapshotAtRevisionArgs::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& GetSnapshotAtRevisionArgs::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.uri)
  return *uri_;
}
inline void GetSnapshotAtRevisionArgs::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.uri)
}
inline void GetSnapshotAtRevisionArgs::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.uri)
}
inline void GetSnapshotAtRevisionArgs::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.uri)
}
inline ::std::string* GetSnapshotAtRevisionArgs::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.uri)
  return uri_;
}
inline ::std::string* GetSnapshotAtRevisionArgs::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetSnapshotAtRevisionArgs::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.uri)
}

// optional .spotify.playlist4.proto.RequestContext context = 2;
inline bool GetSnapshotAtRevisionArgs::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSnapshotAtRevisionArgs::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSnapshotAtRevisionArgs::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSnapshotAtRevisionArgs::clear_context() {
  if (context_ != NULL) context_->::spotify::playlist4::proto::RequestContext::Clear();
  clear_has_context();
}
inline const ::spotify::playlist4::proto::RequestContext& GetSnapshotAtRevisionArgs::context() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
inline ::spotify::playlist4::proto::RequestContext* GetSnapshotAtRevisionArgs::mutable_context() {
  set_has_context();
  if (context_ == NULL) context_ = new ::spotify::playlist4::proto::RequestContext;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.context)
  return context_;
}
inline ::spotify::playlist4::proto::RequestContext* GetSnapshotAtRevisionArgs::release_context() {
  clear_has_context();
  ::spotify::playlist4::proto::RequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void GetSnapshotAtRevisionArgs::set_allocated_context(::spotify::playlist4::proto::RequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.context)
}

// optional bytes revision = 3;
inline bool GetSnapshotAtRevisionArgs::has_revision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetSnapshotAtRevisionArgs::set_has_revision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetSnapshotAtRevisionArgs::clear_has_revision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetSnapshotAtRevisionArgs::clear_revision() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_->clear();
  }
  clear_has_revision();
}
inline const ::std::string& GetSnapshotAtRevisionArgs::revision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.revision)
  return *revision_;
}
inline void GetSnapshotAtRevisionArgs::set_revision(const ::std::string& value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.revision)
}
inline void GetSnapshotAtRevisionArgs::set_revision(const char* value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.revision)
}
inline void GetSnapshotAtRevisionArgs::set_revision(const void* value, size_t size) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.revision)
}
inline ::std::string* GetSnapshotAtRevisionArgs::mutable_revision() {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.revision)
  return revision_;
}
inline ::std::string* GetSnapshotAtRevisionArgs::release_revision() {
  clear_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = revision_;
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetSnapshotAtRevisionArgs::set_allocated_revision(::std::string* revision) {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (revision) {
    set_has_revision();
    revision_ = revision;
  } else {
    clear_has_revision();
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.GetSnapshotAtRevisionArgs.revision)
}

// -------------------------------------------------------------------

// SubscribeRequest

// repeated bytes uris = 1;
inline int SubscribeRequest::uris_size() const {
  return uris_.size();
}
inline void SubscribeRequest::clear_uris() {
  uris_.Clear();
}
inline const ::std::string& SubscribeRequest::uris(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SubscribeRequest.uris)
  return uris_.Get(index);
}
inline ::std::string* SubscribeRequest::mutable_uris(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SubscribeRequest.uris)
  return uris_.Mutable(index);
}
inline void SubscribeRequest::set_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.SubscribeRequest.uris)
  uris_.Mutable(index)->assign(value);
}
inline void SubscribeRequest::set_uris(int index, const char* value) {
  uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.SubscribeRequest.uris)
}
inline void SubscribeRequest::set_uris(int index, const void* value, size_t size) {
  uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.SubscribeRequest.uris)
}
inline ::std::string* SubscribeRequest::add_uris() {
  return uris_.Add();
}
inline void SubscribeRequest::add_uris(const ::std::string& value) {
  uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.SubscribeRequest.uris)
}
inline void SubscribeRequest::add_uris(const char* value) {
  uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spotify.playlist4.proto.SubscribeRequest.uris)
}
inline void SubscribeRequest::add_uris(const void* value, size_t size) {
  uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spotify.playlist4.proto.SubscribeRequest.uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscribeRequest::uris() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.SubscribeRequest.uris)
  return uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscribeRequest::mutable_uris() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.SubscribeRequest.uris)
  return &uris_;
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// repeated bytes uris = 1;
inline int UnsubscribeRequest::uris_size() const {
  return uris_.size();
}
inline void UnsubscribeRequest::clear_uris() {
  uris_.Clear();
}
inline const ::std::string& UnsubscribeRequest::uris(int index) const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.UnsubscribeRequest.uris)
  return uris_.Get(index);
}
inline ::std::string* UnsubscribeRequest::mutable_uris(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.UnsubscribeRequest.uris)
  return uris_.Mutable(index);
}
inline void UnsubscribeRequest::set_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.UnsubscribeRequest.uris)
  uris_.Mutable(index)->assign(value);
}
inline void UnsubscribeRequest::set_uris(int index, const char* value) {
  uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.UnsubscribeRequest.uris)
}
inline void UnsubscribeRequest::set_uris(int index, const void* value, size_t size) {
  uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.UnsubscribeRequest.uris)
}
inline ::std::string* UnsubscribeRequest::add_uris() {
  return uris_.Add();
}
inline void UnsubscribeRequest::add_uris(const ::std::string& value) {
  uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spotify.playlist4.proto.UnsubscribeRequest.uris)
}
inline void UnsubscribeRequest::add_uris(const char* value) {
  uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spotify.playlist4.proto.UnsubscribeRequest.uris)
}
inline void UnsubscribeRequest::add_uris(const void* value, size_t size) {
  uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spotify.playlist4.proto.UnsubscribeRequest.uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnsubscribeRequest::uris() const {
  // @@protoc_insertion_point(field_list:spotify.playlist4.proto.UnsubscribeRequest.uris)
  return uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnsubscribeRequest::mutable_uris() {
  // @@protoc_insertion_point(field_mutable_list:spotify.playlist4.proto.UnsubscribeRequest.uris)
  return &uris_;
}

// -------------------------------------------------------------------

// Playlist4ServiceException

// optional string why = 1;
inline bool Playlist4ServiceException::has_why() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Playlist4ServiceException::set_has_why() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Playlist4ServiceException::clear_has_why() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Playlist4ServiceException::clear_why() {
  if (why_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    why_->clear();
  }
  clear_has_why();
}
inline const ::std::string& Playlist4ServiceException::why() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceException.why)
  return *why_;
}
inline void Playlist4ServiceException::set_why(const ::std::string& value) {
  set_has_why();
  if (why_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    why_ = new ::std::string;
  }
  why_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceException.why)
}
inline void Playlist4ServiceException::set_why(const char* value) {
  set_has_why();
  if (why_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    why_ = new ::std::string;
  }
  why_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Playlist4ServiceException.why)
}
inline void Playlist4ServiceException::set_why(const char* value, size_t size) {
  set_has_why();
  if (why_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    why_ = new ::std::string;
  }
  why_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Playlist4ServiceException.why)
}
inline ::std::string* Playlist4ServiceException::mutable_why() {
  set_has_why();
  if (why_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    why_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceException.why)
  return why_;
}
inline ::std::string* Playlist4ServiceException::release_why() {
  clear_has_why();
  if (why_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = why_;
    why_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Playlist4ServiceException::set_allocated_why(::std::string* why) {
  if (why_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete why_;
  }
  if (why) {
    set_has_why();
    why_ = why;
  } else {
    clear_has_why();
    why_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceException.why)
}

// optional string symbol = 2;
inline bool Playlist4ServiceException::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Playlist4ServiceException::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Playlist4ServiceException::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Playlist4ServiceException::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& Playlist4ServiceException::symbol() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceException.symbol)
  return *symbol_;
}
inline void Playlist4ServiceException::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceException.symbol)
}
inline void Playlist4ServiceException::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Playlist4ServiceException.symbol)
}
inline void Playlist4ServiceException::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Playlist4ServiceException.symbol)
}
inline ::std::string* Playlist4ServiceException::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceException.symbol)
  return symbol_;
}
inline ::std::string* Playlist4ServiceException::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Playlist4ServiceException::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceException.symbol)
}

// optional bool permanent = 3;
inline bool Playlist4ServiceException::has_permanent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Playlist4ServiceException::set_has_permanent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Playlist4ServiceException::clear_has_permanent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Playlist4ServiceException::clear_permanent() {
  permanent_ = false;
  clear_has_permanent();
}
inline bool Playlist4ServiceException::permanent() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceException.permanent)
  return permanent_;
}
inline void Playlist4ServiceException::set_permanent(bool value) {
  set_has_permanent();
  permanent_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceException.permanent)
}

// optional string serviceErrorClass = 4;
inline bool Playlist4ServiceException::has_serviceerrorclass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Playlist4ServiceException::set_has_serviceerrorclass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Playlist4ServiceException::clear_has_serviceerrorclass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Playlist4ServiceException::clear_serviceerrorclass() {
  if (serviceerrorclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceerrorclass_->clear();
  }
  clear_has_serviceerrorclass();
}
inline const ::std::string& Playlist4ServiceException::serviceerrorclass() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceException.serviceErrorClass)
  return *serviceerrorclass_;
}
inline void Playlist4ServiceException::set_serviceerrorclass(const ::std::string& value) {
  set_has_serviceerrorclass();
  if (serviceerrorclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceerrorclass_ = new ::std::string;
  }
  serviceerrorclass_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceException.serviceErrorClass)
}
inline void Playlist4ServiceException::set_serviceerrorclass(const char* value) {
  set_has_serviceerrorclass();
  if (serviceerrorclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceerrorclass_ = new ::std::string;
  }
  serviceerrorclass_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Playlist4ServiceException.serviceErrorClass)
}
inline void Playlist4ServiceException::set_serviceerrorclass(const char* value, size_t size) {
  set_has_serviceerrorclass();
  if (serviceerrorclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceerrorclass_ = new ::std::string;
  }
  serviceerrorclass_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Playlist4ServiceException.serviceErrorClass)
}
inline ::std::string* Playlist4ServiceException::mutable_serviceerrorclass() {
  set_has_serviceerrorclass();
  if (serviceerrorclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceerrorclass_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceException.serviceErrorClass)
  return serviceerrorclass_;
}
inline ::std::string* Playlist4ServiceException::release_serviceerrorclass() {
  clear_has_serviceerrorclass();
  if (serviceerrorclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceerrorclass_;
    serviceerrorclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Playlist4ServiceException::set_allocated_serviceerrorclass(::std::string* serviceerrorclass) {
  if (serviceerrorclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceerrorclass_;
  }
  if (serviceerrorclass) {
    set_has_serviceerrorclass();
    serviceerrorclass_ = serviceerrorclass;
  } else {
    clear_has_serviceerrorclass();
    serviceerrorclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceException.serviceErrorClass)
}

// optional .spotify.playlist4.proto.Playlist4InboxErrorKind inboxErrorKind = 5;
inline bool Playlist4ServiceException::has_inboxerrorkind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Playlist4ServiceException::set_has_inboxerrorkind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Playlist4ServiceException::clear_has_inboxerrorkind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Playlist4ServiceException::clear_inboxerrorkind() {
  inboxerrorkind_ = 2;
  clear_has_inboxerrorkind();
}
inline ::spotify::playlist4::proto::Playlist4InboxErrorKind Playlist4ServiceException::inboxerrorkind() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceException.inboxErrorKind)
  return static_cast< ::spotify::playlist4::proto::Playlist4InboxErrorKind >(inboxerrorkind_);
}
inline void Playlist4ServiceException::set_inboxerrorkind(::spotify::playlist4::proto::Playlist4InboxErrorKind value) {
  assert(::spotify::playlist4::proto::Playlist4InboxErrorKind_IsValid(value));
  set_has_inboxerrorkind();
  inboxerrorkind_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceException.inboxErrorKind)
}

// -------------------------------------------------------------------

// SynchronizeReturn

// optional .spotify.playlist4.proto.SelectedListContent result = 1;
inline bool SynchronizeReturn::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchronizeReturn::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchronizeReturn::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchronizeReturn::clear_result() {
  if (result_ != NULL) result_->::spotify::playlist4::proto::SelectedListContent::Clear();
  clear_has_result();
}
inline const ::spotify::playlist4::proto::SelectedListContent& SynchronizeReturn::result() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SynchronizeReturn.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::spotify::playlist4::proto::SelectedListContent* SynchronizeReturn::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::spotify::playlist4::proto::SelectedListContent;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SynchronizeReturn.result)
  return result_;
}
inline ::spotify::playlist4::proto::SelectedListContent* SynchronizeReturn::release_result() {
  clear_has_result();
  ::spotify::playlist4::proto::SelectedListContent* temp = result_;
  result_ = NULL;
  return temp;
}
inline void SynchronizeReturn::set_allocated_result(::spotify::playlist4::proto::SelectedListContent* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SynchronizeReturn.result)
}

// optional .spotify.playlist4.proto.Playlist4ServiceException exception = 4;
inline bool SynchronizeReturn::has_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchronizeReturn::set_has_exception() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchronizeReturn::clear_has_exception() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchronizeReturn::clear_exception() {
  if (exception_ != NULL) exception_->::spotify::playlist4::proto::Playlist4ServiceException::Clear();
  clear_has_exception();
}
inline const ::spotify::playlist4::proto::Playlist4ServiceException& SynchronizeReturn::exception() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.SynchronizeReturn.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::spotify::playlist4::proto::Playlist4ServiceException* SynchronizeReturn::mutable_exception() {
  set_has_exception();
  if (exception_ == NULL) exception_ = new ::spotify::playlist4::proto::Playlist4ServiceException;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.SynchronizeReturn.exception)
  return exception_;
}
inline ::spotify::playlist4::proto::Playlist4ServiceException* SynchronizeReturn::release_exception() {
  clear_has_exception();
  ::spotify::playlist4::proto::Playlist4ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void SynchronizeReturn::set_allocated_exception(::spotify::playlist4::proto::Playlist4ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    set_has_exception();
  } else {
    clear_has_exception();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.SynchronizeReturn.exception)
}

// -------------------------------------------------------------------

// Playlist4ServiceCall

// optional .spotify.playlist4.proto.Playlist4ServiceMethodKind kind = 1;
inline bool Playlist4ServiceCall::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Playlist4ServiceCall::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Playlist4ServiceCall::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Playlist4ServiceCall::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::spotify::playlist4::proto::Playlist4ServiceMethodKind Playlist4ServiceCall::kind() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceCall.kind)
  return static_cast< ::spotify::playlist4::proto::Playlist4ServiceMethodKind >(kind_);
}
inline void Playlist4ServiceCall::set_kind(::spotify::playlist4::proto::Playlist4ServiceMethodKind value) {
  assert(::spotify::playlist4::proto::Playlist4ServiceMethodKind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceCall.kind)
}

// optional .spotify.playlist4.proto.GetCurrentRevisionArgs getCurrentRevisionArgs = 2;
inline bool Playlist4ServiceCall::has_getcurrentrevisionargs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Playlist4ServiceCall::set_has_getcurrentrevisionargs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Playlist4ServiceCall::clear_has_getcurrentrevisionargs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Playlist4ServiceCall::clear_getcurrentrevisionargs() {
  if (getcurrentrevisionargs_ != NULL) getcurrentrevisionargs_->::spotify::playlist4::proto::GetCurrentRevisionArgs::Clear();
  clear_has_getcurrentrevisionargs();
}
inline const ::spotify::playlist4::proto::GetCurrentRevisionArgs& Playlist4ServiceCall::getcurrentrevisionargs() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceCall.getCurrentRevisionArgs)
  return getcurrentrevisionargs_ != NULL ? *getcurrentrevisionargs_ : *default_instance_->getcurrentrevisionargs_;
}
inline ::spotify::playlist4::proto::GetCurrentRevisionArgs* Playlist4ServiceCall::mutable_getcurrentrevisionargs() {
  set_has_getcurrentrevisionargs();
  if (getcurrentrevisionargs_ == NULL) getcurrentrevisionargs_ = new ::spotify::playlist4::proto::GetCurrentRevisionArgs;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceCall.getCurrentRevisionArgs)
  return getcurrentrevisionargs_;
}
inline ::spotify::playlist4::proto::GetCurrentRevisionArgs* Playlist4ServiceCall::release_getcurrentrevisionargs() {
  clear_has_getcurrentrevisionargs();
  ::spotify::playlist4::proto::GetCurrentRevisionArgs* temp = getcurrentrevisionargs_;
  getcurrentrevisionargs_ = NULL;
  return temp;
}
inline void Playlist4ServiceCall::set_allocated_getcurrentrevisionargs(::spotify::playlist4::proto::GetCurrentRevisionArgs* getcurrentrevisionargs) {
  delete getcurrentrevisionargs_;
  getcurrentrevisionargs_ = getcurrentrevisionargs;
  if (getcurrentrevisionargs) {
    set_has_getcurrentrevisionargs();
  } else {
    clear_has_getcurrentrevisionargs();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceCall.getCurrentRevisionArgs)
}

// optional .spotify.playlist4.proto.GetChangesInSequenceRangeArgs getChangesInSequenceRangeArgs = 3;
inline bool Playlist4ServiceCall::has_getchangesinsequencerangeargs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Playlist4ServiceCall::set_has_getchangesinsequencerangeargs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Playlist4ServiceCall::clear_has_getchangesinsequencerangeargs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Playlist4ServiceCall::clear_getchangesinsequencerangeargs() {
  if (getchangesinsequencerangeargs_ != NULL) getchangesinsequencerangeargs_->::spotify::playlist4::proto::GetChangesInSequenceRangeArgs::Clear();
  clear_has_getchangesinsequencerangeargs();
}
inline const ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs& Playlist4ServiceCall::getchangesinsequencerangeargs() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceCall.getChangesInSequenceRangeArgs)
  return getchangesinsequencerangeargs_ != NULL ? *getchangesinsequencerangeargs_ : *default_instance_->getchangesinsequencerangeargs_;
}
inline ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs* Playlist4ServiceCall::mutable_getchangesinsequencerangeargs() {
  set_has_getchangesinsequencerangeargs();
  if (getchangesinsequencerangeargs_ == NULL) getchangesinsequencerangeargs_ = new ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceCall.getChangesInSequenceRangeArgs)
  return getchangesinsequencerangeargs_;
}
inline ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs* Playlist4ServiceCall::release_getchangesinsequencerangeargs() {
  clear_has_getchangesinsequencerangeargs();
  ::spotify::playlist4::proto::GetChangesInSequenceRangeArgs* temp = getchangesinsequencerangeargs_;
  getchangesinsequencerangeargs_ = NULL;
  return temp;
}
inline void Playlist4ServiceCall::set_allocated_getchangesinsequencerangeargs(::spotify::playlist4::proto::GetChangesInSequenceRangeArgs* getchangesinsequencerangeargs) {
  delete getchangesinsequencerangeargs_;
  getchangesinsequencerangeargs_ = getchangesinsequencerangeargs;
  if (getchangesinsequencerangeargs) {
    set_has_getchangesinsequencerangeargs();
  } else {
    clear_has_getchangesinsequencerangeargs();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceCall.getChangesInSequenceRangeArgs)
}

// optional .spotify.playlist4.proto.ObliterateListArgs obliterateListArgs = 4;
inline bool Playlist4ServiceCall::has_obliteratelistargs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Playlist4ServiceCall::set_has_obliteratelistargs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Playlist4ServiceCall::clear_has_obliteratelistargs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Playlist4ServiceCall::clear_obliteratelistargs() {
  if (obliteratelistargs_ != NULL) obliteratelistargs_->::spotify::playlist4::proto::ObliterateListArgs::Clear();
  clear_has_obliteratelistargs();
}
inline const ::spotify::playlist4::proto::ObliterateListArgs& Playlist4ServiceCall::obliteratelistargs() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceCall.obliterateListArgs)
  return obliteratelistargs_ != NULL ? *obliteratelistargs_ : *default_instance_->obliteratelistargs_;
}
inline ::spotify::playlist4::proto::ObliterateListArgs* Playlist4ServiceCall::mutable_obliteratelistargs() {
  set_has_obliteratelistargs();
  if (obliteratelistargs_ == NULL) obliteratelistargs_ = new ::spotify::playlist4::proto::ObliterateListArgs;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceCall.obliterateListArgs)
  return obliteratelistargs_;
}
inline ::spotify::playlist4::proto::ObliterateListArgs* Playlist4ServiceCall::release_obliteratelistargs() {
  clear_has_obliteratelistargs();
  ::spotify::playlist4::proto::ObliterateListArgs* temp = obliteratelistargs_;
  obliteratelistargs_ = NULL;
  return temp;
}
inline void Playlist4ServiceCall::set_allocated_obliteratelistargs(::spotify::playlist4::proto::ObliterateListArgs* obliteratelistargs) {
  delete obliteratelistargs_;
  obliteratelistargs_ = obliteratelistargs;
  if (obliteratelistargs) {
    set_has_obliteratelistargs();
  } else {
    clear_has_obliteratelistargs();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceCall.obliterateListArgs)
}

// optional .spotify.playlist4.proto.SynchronizeArgs synchronizeArgs = 5;
inline bool Playlist4ServiceCall::has_synchronizeargs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Playlist4ServiceCall::set_has_synchronizeargs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Playlist4ServiceCall::clear_has_synchronizeargs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Playlist4ServiceCall::clear_synchronizeargs() {
  if (synchronizeargs_ != NULL) synchronizeargs_->::spotify::playlist4::proto::SynchronizeArgs::Clear();
  clear_has_synchronizeargs();
}
inline const ::spotify::playlist4::proto::SynchronizeArgs& Playlist4ServiceCall::synchronizeargs() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceCall.synchronizeArgs)
  return synchronizeargs_ != NULL ? *synchronizeargs_ : *default_instance_->synchronizeargs_;
}
inline ::spotify::playlist4::proto::SynchronizeArgs* Playlist4ServiceCall::mutable_synchronizeargs() {
  set_has_synchronizeargs();
  if (synchronizeargs_ == NULL) synchronizeargs_ = new ::spotify::playlist4::proto::SynchronizeArgs;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceCall.synchronizeArgs)
  return synchronizeargs_;
}
inline ::spotify::playlist4::proto::SynchronizeArgs* Playlist4ServiceCall::release_synchronizeargs() {
  clear_has_synchronizeargs();
  ::spotify::playlist4::proto::SynchronizeArgs* temp = synchronizeargs_;
  synchronizeargs_ = NULL;
  return temp;
}
inline void Playlist4ServiceCall::set_allocated_synchronizeargs(::spotify::playlist4::proto::SynchronizeArgs* synchronizeargs) {
  delete synchronizeargs_;
  synchronizeargs_ = synchronizeargs;
  if (synchronizeargs) {
    set_has_synchronizeargs();
  } else {
    clear_has_synchronizeargs();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceCall.synchronizeArgs)
}

// optional .spotify.playlist4.proto.UpdatePublishedArgs updatePublishedArgs = 6;
inline bool Playlist4ServiceCall::has_updatepublishedargs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Playlist4ServiceCall::set_has_updatepublishedargs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Playlist4ServiceCall::clear_has_updatepublishedargs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Playlist4ServiceCall::clear_updatepublishedargs() {
  if (updatepublishedargs_ != NULL) updatepublishedargs_->::spotify::playlist4::proto::UpdatePublishedArgs::Clear();
  clear_has_updatepublishedargs();
}
inline const ::spotify::playlist4::proto::UpdatePublishedArgs& Playlist4ServiceCall::updatepublishedargs() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceCall.updatePublishedArgs)
  return updatepublishedargs_ != NULL ? *updatepublishedargs_ : *default_instance_->updatepublishedargs_;
}
inline ::spotify::playlist4::proto::UpdatePublishedArgs* Playlist4ServiceCall::mutable_updatepublishedargs() {
  set_has_updatepublishedargs();
  if (updatepublishedargs_ == NULL) updatepublishedargs_ = new ::spotify::playlist4::proto::UpdatePublishedArgs;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceCall.updatePublishedArgs)
  return updatepublishedargs_;
}
inline ::spotify::playlist4::proto::UpdatePublishedArgs* Playlist4ServiceCall::release_updatepublishedargs() {
  clear_has_updatepublishedargs();
  ::spotify::playlist4::proto::UpdatePublishedArgs* temp = updatepublishedargs_;
  updatepublishedargs_ = NULL;
  return temp;
}
inline void Playlist4ServiceCall::set_allocated_updatepublishedargs(::spotify::playlist4::proto::UpdatePublishedArgs* updatepublishedargs) {
  delete updatepublishedargs_;
  updatepublishedargs_ = updatepublishedargs;
  if (updatepublishedargs) {
    set_has_updatepublishedargs();
  } else {
    clear_has_updatepublishedargs();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceCall.updatePublishedArgs)
}

// optional .spotify.playlist4.proto.GetChangesInSequenceRangeMatchingPl3VersionArgs getChangesInSequenceRangeMatchingPl3VersionArgs = 7;
inline bool Playlist4ServiceCall::has_getchangesinsequencerangematchingpl3versionargs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Playlist4ServiceCall::set_has_getchangesinsequencerangematchingpl3versionargs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Playlist4ServiceCall::clear_has_getchangesinsequencerangematchingpl3versionargs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Playlist4ServiceCall::clear_getchangesinsequencerangematchingpl3versionargs() {
  if (getchangesinsequencerangematchingpl3versionargs_ != NULL) getchangesinsequencerangematchingpl3versionargs_->::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs::Clear();
  clear_has_getchangesinsequencerangematchingpl3versionargs();
}
inline const ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs& Playlist4ServiceCall::getchangesinsequencerangematchingpl3versionargs() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceCall.getChangesInSequenceRangeMatchingPl3VersionArgs)
  return getchangesinsequencerangematchingpl3versionargs_ != NULL ? *getchangesinsequencerangematchingpl3versionargs_ : *default_instance_->getchangesinsequencerangematchingpl3versionargs_;
}
inline ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs* Playlist4ServiceCall::mutable_getchangesinsequencerangematchingpl3versionargs() {
  set_has_getchangesinsequencerangematchingpl3versionargs();
  if (getchangesinsequencerangematchingpl3versionargs_ == NULL) getchangesinsequencerangematchingpl3versionargs_ = new ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceCall.getChangesInSequenceRangeMatchingPl3VersionArgs)
  return getchangesinsequencerangematchingpl3versionargs_;
}
inline ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs* Playlist4ServiceCall::release_getchangesinsequencerangematchingpl3versionargs() {
  clear_has_getchangesinsequencerangematchingpl3versionargs();
  ::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs* temp = getchangesinsequencerangematchingpl3versionargs_;
  getchangesinsequencerangematchingpl3versionargs_ = NULL;
  return temp;
}
inline void Playlist4ServiceCall::set_allocated_getchangesinsequencerangematchingpl3versionargs(::spotify::playlist4::proto::GetChangesInSequenceRangeMatchingPl3VersionArgs* getchangesinsequencerangematchingpl3versionargs) {
  delete getchangesinsequencerangematchingpl3versionargs_;
  getchangesinsequencerangematchingpl3versionargs_ = getchangesinsequencerangematchingpl3versionargs;
  if (getchangesinsequencerangematchingpl3versionargs) {
    set_has_getchangesinsequencerangematchingpl3versionargs();
  } else {
    clear_has_getchangesinsequencerangematchingpl3versionargs();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceCall.getChangesInSequenceRangeMatchingPl3VersionArgs)
}

// optional .spotify.playlist4.proto.GetSnapshotAtRevisionArgs getSnapshotAtRevisionArgs = 8;
inline bool Playlist4ServiceCall::has_getsnapshotatrevisionargs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Playlist4ServiceCall::set_has_getsnapshotatrevisionargs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Playlist4ServiceCall::clear_has_getsnapshotatrevisionargs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Playlist4ServiceCall::clear_getsnapshotatrevisionargs() {
  if (getsnapshotatrevisionargs_ != NULL) getsnapshotatrevisionargs_->::spotify::playlist4::proto::GetSnapshotAtRevisionArgs::Clear();
  clear_has_getsnapshotatrevisionargs();
}
inline const ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs& Playlist4ServiceCall::getsnapshotatrevisionargs() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceCall.getSnapshotAtRevisionArgs)
  return getsnapshotatrevisionargs_ != NULL ? *getsnapshotatrevisionargs_ : *default_instance_->getsnapshotatrevisionargs_;
}
inline ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs* Playlist4ServiceCall::mutable_getsnapshotatrevisionargs() {
  set_has_getsnapshotatrevisionargs();
  if (getsnapshotatrevisionargs_ == NULL) getsnapshotatrevisionargs_ = new ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceCall.getSnapshotAtRevisionArgs)
  return getsnapshotatrevisionargs_;
}
inline ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs* Playlist4ServiceCall::release_getsnapshotatrevisionargs() {
  clear_has_getsnapshotatrevisionargs();
  ::spotify::playlist4::proto::GetSnapshotAtRevisionArgs* temp = getsnapshotatrevisionargs_;
  getsnapshotatrevisionargs_ = NULL;
  return temp;
}
inline void Playlist4ServiceCall::set_allocated_getsnapshotatrevisionargs(::spotify::playlist4::proto::GetSnapshotAtRevisionArgs* getsnapshotatrevisionargs) {
  delete getsnapshotatrevisionargs_;
  getsnapshotatrevisionargs_ = getsnapshotatrevisionargs;
  if (getsnapshotatrevisionargs) {
    set_has_getsnapshotatrevisionargs();
  } else {
    clear_has_getsnapshotatrevisionargs();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceCall.getSnapshotAtRevisionArgs)
}

// -------------------------------------------------------------------

// Playlist4ServiceReturn

// optional .spotify.playlist4.proto.Playlist4ServiceMethodKind kind = 1;
inline bool Playlist4ServiceReturn::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Playlist4ServiceReturn::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Playlist4ServiceReturn::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Playlist4ServiceReturn::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::spotify::playlist4::proto::Playlist4ServiceMethodKind Playlist4ServiceReturn::kind() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.kind)
  return static_cast< ::spotify::playlist4::proto::Playlist4ServiceMethodKind >(kind_);
}
inline void Playlist4ServiceReturn::set_kind(::spotify::playlist4::proto::Playlist4ServiceMethodKind value) {
  assert(::spotify::playlist4::proto::Playlist4ServiceMethodKind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceReturn.kind)
}

// optional .spotify.playlist4.proto.Playlist4ServiceException exception = 2;
inline bool Playlist4ServiceReturn::has_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Playlist4ServiceReturn::set_has_exception() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Playlist4ServiceReturn::clear_has_exception() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Playlist4ServiceReturn::clear_exception() {
  if (exception_ != NULL) exception_->::spotify::playlist4::proto::Playlist4ServiceException::Clear();
  clear_has_exception();
}
inline const ::spotify::playlist4::proto::Playlist4ServiceException& Playlist4ServiceReturn::exception() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::spotify::playlist4::proto::Playlist4ServiceException* Playlist4ServiceReturn::mutable_exception() {
  set_has_exception();
  if (exception_ == NULL) exception_ = new ::spotify::playlist4::proto::Playlist4ServiceException;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceReturn.exception)
  return exception_;
}
inline ::spotify::playlist4::proto::Playlist4ServiceException* Playlist4ServiceReturn::release_exception() {
  clear_has_exception();
  ::spotify::playlist4::proto::Playlist4ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void Playlist4ServiceReturn::set_allocated_exception(::spotify::playlist4::proto::Playlist4ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    set_has_exception();
  } else {
    clear_has_exception();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceReturn.exception)
}

// optional bytes getCurrentRevisionReturn = 3;
inline bool Playlist4ServiceReturn::has_getcurrentrevisionreturn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Playlist4ServiceReturn::set_has_getcurrentrevisionreturn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Playlist4ServiceReturn::clear_has_getcurrentrevisionreturn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Playlist4ServiceReturn::clear_getcurrentrevisionreturn() {
  if (getcurrentrevisionreturn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getcurrentrevisionreturn_->clear();
  }
  clear_has_getcurrentrevisionreturn();
}
inline const ::std::string& Playlist4ServiceReturn::getcurrentrevisionreturn() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.getCurrentRevisionReturn)
  return *getcurrentrevisionreturn_;
}
inline void Playlist4ServiceReturn::set_getcurrentrevisionreturn(const ::std::string& value) {
  set_has_getcurrentrevisionreturn();
  if (getcurrentrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getcurrentrevisionreturn_ = new ::std::string;
  }
  getcurrentrevisionreturn_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceReturn.getCurrentRevisionReturn)
}
inline void Playlist4ServiceReturn::set_getcurrentrevisionreturn(const char* value) {
  set_has_getcurrentrevisionreturn();
  if (getcurrentrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getcurrentrevisionreturn_ = new ::std::string;
  }
  getcurrentrevisionreturn_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Playlist4ServiceReturn.getCurrentRevisionReturn)
}
inline void Playlist4ServiceReturn::set_getcurrentrevisionreturn(const void* value, size_t size) {
  set_has_getcurrentrevisionreturn();
  if (getcurrentrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getcurrentrevisionreturn_ = new ::std::string;
  }
  getcurrentrevisionreturn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Playlist4ServiceReturn.getCurrentRevisionReturn)
}
inline ::std::string* Playlist4ServiceReturn::mutable_getcurrentrevisionreturn() {
  set_has_getcurrentrevisionreturn();
  if (getcurrentrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getcurrentrevisionreturn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceReturn.getCurrentRevisionReturn)
  return getcurrentrevisionreturn_;
}
inline ::std::string* Playlist4ServiceReturn::release_getcurrentrevisionreturn() {
  clear_has_getcurrentrevisionreturn();
  if (getcurrentrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = getcurrentrevisionreturn_;
    getcurrentrevisionreturn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Playlist4ServiceReturn::set_allocated_getcurrentrevisionreturn(::std::string* getcurrentrevisionreturn) {
  if (getcurrentrevisionreturn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getcurrentrevisionreturn_;
  }
  if (getcurrentrevisionreturn) {
    set_has_getcurrentrevisionreturn();
    getcurrentrevisionreturn_ = getcurrentrevisionreturn;
  } else {
    clear_has_getcurrentrevisionreturn();
    getcurrentrevisionreturn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceReturn.getCurrentRevisionReturn)
}

// optional .spotify.playlist4.proto.GetChangesInSequenceRangeReturn getChangesInSequenceRangeReturn = 4;
inline bool Playlist4ServiceReturn::has_getchangesinsequencerangereturn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Playlist4ServiceReturn::set_has_getchangesinsequencerangereturn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Playlist4ServiceReturn::clear_has_getchangesinsequencerangereturn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Playlist4ServiceReturn::clear_getchangesinsequencerangereturn() {
  if (getchangesinsequencerangereturn_ != NULL) getchangesinsequencerangereturn_->::spotify::playlist4::proto::GetChangesInSequenceRangeReturn::Clear();
  clear_has_getchangesinsequencerangereturn();
}
inline const ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn& Playlist4ServiceReturn::getchangesinsequencerangereturn() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.getChangesInSequenceRangeReturn)
  return getchangesinsequencerangereturn_ != NULL ? *getchangesinsequencerangereturn_ : *default_instance_->getchangesinsequencerangereturn_;
}
inline ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* Playlist4ServiceReturn::mutable_getchangesinsequencerangereturn() {
  set_has_getchangesinsequencerangereturn();
  if (getchangesinsequencerangereturn_ == NULL) getchangesinsequencerangereturn_ = new ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceReturn.getChangesInSequenceRangeReturn)
  return getchangesinsequencerangereturn_;
}
inline ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* Playlist4ServiceReturn::release_getchangesinsequencerangereturn() {
  clear_has_getchangesinsequencerangereturn();
  ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* temp = getchangesinsequencerangereturn_;
  getchangesinsequencerangereturn_ = NULL;
  return temp;
}
inline void Playlist4ServiceReturn::set_allocated_getchangesinsequencerangereturn(::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* getchangesinsequencerangereturn) {
  delete getchangesinsequencerangereturn_;
  getchangesinsequencerangereturn_ = getchangesinsequencerangereturn;
  if (getchangesinsequencerangereturn) {
    set_has_getchangesinsequencerangereturn();
  } else {
    clear_has_getchangesinsequencerangereturn();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceReturn.getChangesInSequenceRangeReturn)
}

// optional bool obliterateListReturn = 5;
inline bool Playlist4ServiceReturn::has_obliteratelistreturn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Playlist4ServiceReturn::set_has_obliteratelistreturn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Playlist4ServiceReturn::clear_has_obliteratelistreturn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Playlist4ServiceReturn::clear_obliteratelistreturn() {
  obliteratelistreturn_ = false;
  clear_has_obliteratelistreturn();
}
inline bool Playlist4ServiceReturn::obliteratelistreturn() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.obliterateListReturn)
  return obliteratelistreturn_;
}
inline void Playlist4ServiceReturn::set_obliteratelistreturn(bool value) {
  set_has_obliteratelistreturn();
  obliteratelistreturn_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceReturn.obliterateListReturn)
}

// optional .spotify.playlist4.proto.SynchronizeReturn synchronizeReturn = 6;
inline bool Playlist4ServiceReturn::has_synchronizereturn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Playlist4ServiceReturn::set_has_synchronizereturn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Playlist4ServiceReturn::clear_has_synchronizereturn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Playlist4ServiceReturn::clear_synchronizereturn() {
  if (synchronizereturn_ != NULL) synchronizereturn_->::spotify::playlist4::proto::SynchronizeReturn::Clear();
  clear_has_synchronizereturn();
}
inline const ::spotify::playlist4::proto::SynchronizeReturn& Playlist4ServiceReturn::synchronizereturn() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.synchronizeReturn)
  return synchronizereturn_ != NULL ? *synchronizereturn_ : *default_instance_->synchronizereturn_;
}
inline ::spotify::playlist4::proto::SynchronizeReturn* Playlist4ServiceReturn::mutable_synchronizereturn() {
  set_has_synchronizereturn();
  if (synchronizereturn_ == NULL) synchronizereturn_ = new ::spotify::playlist4::proto::SynchronizeReturn;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceReturn.synchronizeReturn)
  return synchronizereturn_;
}
inline ::spotify::playlist4::proto::SynchronizeReturn* Playlist4ServiceReturn::release_synchronizereturn() {
  clear_has_synchronizereturn();
  ::spotify::playlist4::proto::SynchronizeReturn* temp = synchronizereturn_;
  synchronizereturn_ = NULL;
  return temp;
}
inline void Playlist4ServiceReturn::set_allocated_synchronizereturn(::spotify::playlist4::proto::SynchronizeReturn* synchronizereturn) {
  delete synchronizereturn_;
  synchronizereturn_ = synchronizereturn;
  if (synchronizereturn) {
    set_has_synchronizereturn();
  } else {
    clear_has_synchronizereturn();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceReturn.synchronizeReturn)
}

// optional bool updatePublishedReturn = 7;
inline bool Playlist4ServiceReturn::has_updatepublishedreturn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Playlist4ServiceReturn::set_has_updatepublishedreturn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Playlist4ServiceReturn::clear_has_updatepublishedreturn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Playlist4ServiceReturn::clear_updatepublishedreturn() {
  updatepublishedreturn_ = false;
  clear_has_updatepublishedreturn();
}
inline bool Playlist4ServiceReturn::updatepublishedreturn() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.updatePublishedReturn)
  return updatepublishedreturn_;
}
inline void Playlist4ServiceReturn::set_updatepublishedreturn(bool value) {
  set_has_updatepublishedreturn();
  updatepublishedreturn_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceReturn.updatePublishedReturn)
}

// optional .spotify.playlist4.proto.GetChangesInSequenceRangeReturn getChangesInSequenceRangeMatchingPl3VersionReturn = 8;
inline bool Playlist4ServiceReturn::has_getchangesinsequencerangematchingpl3versionreturn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Playlist4ServiceReturn::set_has_getchangesinsequencerangematchingpl3versionreturn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Playlist4ServiceReturn::clear_has_getchangesinsequencerangematchingpl3versionreturn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Playlist4ServiceReturn::clear_getchangesinsequencerangematchingpl3versionreturn() {
  if (getchangesinsequencerangematchingpl3versionreturn_ != NULL) getchangesinsequencerangematchingpl3versionreturn_->::spotify::playlist4::proto::GetChangesInSequenceRangeReturn::Clear();
  clear_has_getchangesinsequencerangematchingpl3versionreturn();
}
inline const ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn& Playlist4ServiceReturn::getchangesinsequencerangematchingpl3versionreturn() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.getChangesInSequenceRangeMatchingPl3VersionReturn)
  return getchangesinsequencerangematchingpl3versionreturn_ != NULL ? *getchangesinsequencerangematchingpl3versionreturn_ : *default_instance_->getchangesinsequencerangematchingpl3versionreturn_;
}
inline ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* Playlist4ServiceReturn::mutable_getchangesinsequencerangematchingpl3versionreturn() {
  set_has_getchangesinsequencerangematchingpl3versionreturn();
  if (getchangesinsequencerangematchingpl3versionreturn_ == NULL) getchangesinsequencerangematchingpl3versionreturn_ = new ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn;
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceReturn.getChangesInSequenceRangeMatchingPl3VersionReturn)
  return getchangesinsequencerangematchingpl3versionreturn_;
}
inline ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* Playlist4ServiceReturn::release_getchangesinsequencerangematchingpl3versionreturn() {
  clear_has_getchangesinsequencerangematchingpl3versionreturn();
  ::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* temp = getchangesinsequencerangematchingpl3versionreturn_;
  getchangesinsequencerangematchingpl3versionreturn_ = NULL;
  return temp;
}
inline void Playlist4ServiceReturn::set_allocated_getchangesinsequencerangematchingpl3versionreturn(::spotify::playlist4::proto::GetChangesInSequenceRangeReturn* getchangesinsequencerangematchingpl3versionreturn) {
  delete getchangesinsequencerangematchingpl3versionreturn_;
  getchangesinsequencerangematchingpl3versionreturn_ = getchangesinsequencerangematchingpl3versionreturn;
  if (getchangesinsequencerangematchingpl3versionreturn) {
    set_has_getchangesinsequencerangematchingpl3versionreturn();
  } else {
    clear_has_getchangesinsequencerangematchingpl3versionreturn();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceReturn.getChangesInSequenceRangeMatchingPl3VersionReturn)
}

// optional bytes getSnapshotAtRevisionReturn = 9;
inline bool Playlist4ServiceReturn::has_getsnapshotatrevisionreturn() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Playlist4ServiceReturn::set_has_getsnapshotatrevisionreturn() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Playlist4ServiceReturn::clear_has_getsnapshotatrevisionreturn() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Playlist4ServiceReturn::clear_getsnapshotatrevisionreturn() {
  if (getsnapshotatrevisionreturn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getsnapshotatrevisionreturn_->clear();
  }
  clear_has_getsnapshotatrevisionreturn();
}
inline const ::std::string& Playlist4ServiceReturn::getsnapshotatrevisionreturn() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.Playlist4ServiceReturn.getSnapshotAtRevisionReturn)
  return *getsnapshotatrevisionreturn_;
}
inline void Playlist4ServiceReturn::set_getsnapshotatrevisionreturn(const ::std::string& value) {
  set_has_getsnapshotatrevisionreturn();
  if (getsnapshotatrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getsnapshotatrevisionreturn_ = new ::std::string;
  }
  getsnapshotatrevisionreturn_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.Playlist4ServiceReturn.getSnapshotAtRevisionReturn)
}
inline void Playlist4ServiceReturn::set_getsnapshotatrevisionreturn(const char* value) {
  set_has_getsnapshotatrevisionreturn();
  if (getsnapshotatrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getsnapshotatrevisionreturn_ = new ::std::string;
  }
  getsnapshotatrevisionreturn_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.Playlist4ServiceReturn.getSnapshotAtRevisionReturn)
}
inline void Playlist4ServiceReturn::set_getsnapshotatrevisionreturn(const void* value, size_t size) {
  set_has_getsnapshotatrevisionreturn();
  if (getsnapshotatrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getsnapshotatrevisionreturn_ = new ::std::string;
  }
  getsnapshotatrevisionreturn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.Playlist4ServiceReturn.getSnapshotAtRevisionReturn)
}
inline ::std::string* Playlist4ServiceReturn::mutable_getsnapshotatrevisionreturn() {
  set_has_getsnapshotatrevisionreturn();
  if (getsnapshotatrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    getsnapshotatrevisionreturn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.Playlist4ServiceReturn.getSnapshotAtRevisionReturn)
  return getsnapshotatrevisionreturn_;
}
inline ::std::string* Playlist4ServiceReturn::release_getsnapshotatrevisionreturn() {
  clear_has_getsnapshotatrevisionreturn();
  if (getsnapshotatrevisionreturn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = getsnapshotatrevisionreturn_;
    getsnapshotatrevisionreturn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Playlist4ServiceReturn::set_allocated_getsnapshotatrevisionreturn(::std::string* getsnapshotatrevisionreturn) {
  if (getsnapshotatrevisionreturn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete getsnapshotatrevisionreturn_;
  }
  if (getsnapshotatrevisionreturn) {
    set_has_getsnapshotatrevisionreturn();
    getsnapshotatrevisionreturn_ = getsnapshotatrevisionreturn;
  } else {
    clear_has_getsnapshotatrevisionreturn();
    getsnapshotatrevisionreturn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.Playlist4ServiceReturn.getSnapshotAtRevisionReturn)
}

// -------------------------------------------------------------------

// CreateListReply

// required bytes uri = 1;
inline bool CreateListReply::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateListReply::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateListReply::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateListReply::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& CreateListReply::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.CreateListReply.uri)
  return *uri_;
}
inline void CreateListReply::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.CreateListReply.uri)
}
inline void CreateListReply::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.CreateListReply.uri)
}
inline void CreateListReply::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.CreateListReply.uri)
}
inline ::std::string* CreateListReply::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.CreateListReply.uri)
  return uri_;
}
inline ::std::string* CreateListReply::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateListReply::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.CreateListReply.uri)
}

// optional bytes revision = 2;
inline bool CreateListReply::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateListReply::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateListReply::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateListReply::clear_revision() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_->clear();
  }
  clear_has_revision();
}
inline const ::std::string& CreateListReply::revision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.CreateListReply.revision)
  return *revision_;
}
inline void CreateListReply::set_revision(const ::std::string& value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.CreateListReply.revision)
}
inline void CreateListReply::set_revision(const char* value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.CreateListReply.revision)
}
inline void CreateListReply::set_revision(const void* value, size_t size) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.CreateListReply.revision)
}
inline ::std::string* CreateListReply::mutable_revision() {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.CreateListReply.revision)
  return revision_;
}
inline ::std::string* CreateListReply::release_revision() {
  clear_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = revision_;
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateListReply::set_allocated_revision(::std::string* revision) {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (revision) {
    set_has_revision();
    revision_ = revision;
  } else {
    clear_has_revision();
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.CreateListReply.revision)
}

// -------------------------------------------------------------------

// ModifyReply

// required bytes uri = 1;
inline bool ModifyReply::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyReply::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyReply::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyReply::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& ModifyReply::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ModifyReply.uri)
  return *uri_;
}
inline void ModifyReply::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ModifyReply.uri)
}
inline void ModifyReply::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ModifyReply.uri)
}
inline void ModifyReply::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ModifyReply.uri)
}
inline ::std::string* ModifyReply::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ModifyReply.uri)
  return uri_;
}
inline ::std::string* ModifyReply::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModifyReply::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ModifyReply.uri)
}

// optional bytes revision = 2;
inline bool ModifyReply::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyReply::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyReply::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyReply::clear_revision() {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_->clear();
  }
  clear_has_revision();
}
inline const ::std::string& ModifyReply::revision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ModifyReply.revision)
  return *revision_;
}
inline void ModifyReply::set_revision(const ::std::string& value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ModifyReply.revision)
}
inline void ModifyReply::set_revision(const char* value) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.ModifyReply.revision)
}
inline void ModifyReply::set_revision(const void* value, size_t size) {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.ModifyReply.revision)
}
inline ::std::string* ModifyReply::mutable_revision() {
  set_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.ModifyReply.revision)
  return revision_;
}
inline ::std::string* ModifyReply::release_revision() {
  clear_has_revision();
  if (revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = revision_;
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModifyReply::set_allocated_revision(::std::string* revision) {
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (revision) {
    set_has_revision();
    revision_ = revision;
  } else {
    clear_has_revision();
    revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.ModifyReply.revision)
}

// -------------------------------------------------------------------

// PlaylistModificationInfo

// optional bytes uri = 1;
inline bool PlaylistModificationInfo::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaylistModificationInfo::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaylistModificationInfo::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaylistModificationInfo::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& PlaylistModificationInfo::uri() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.PlaylistModificationInfo.uri)
  return *uri_;
}
inline void PlaylistModificationInfo::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.PlaylistModificationInfo.uri)
}
inline void PlaylistModificationInfo::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.PlaylistModificationInfo.uri)
}
inline void PlaylistModificationInfo::set_uri(const void* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.PlaylistModificationInfo.uri)
}
inline ::std::string* PlaylistModificationInfo::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.PlaylistModificationInfo.uri)
  return uri_;
}
inline ::std::string* PlaylistModificationInfo::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlaylistModificationInfo::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.PlaylistModificationInfo.uri)
}

// optional bytes new_revision = 2;
inline bool PlaylistModificationInfo::has_new_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaylistModificationInfo::set_has_new_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaylistModificationInfo::clear_has_new_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaylistModificationInfo::clear_new_revision() {
  if (new_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_revision_->clear();
  }
  clear_has_new_revision();
}
inline const ::std::string& PlaylistModificationInfo::new_revision() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.PlaylistModificationInfo.new_revision)
  return *new_revision_;
}
inline void PlaylistModificationInfo::set_new_revision(const ::std::string& value) {
  set_has_new_revision();
  if (new_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_revision_ = new ::std::string;
  }
  new_revision_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.PlaylistModificationInfo.new_revision)
}
inline void PlaylistModificationInfo::set_new_revision(const char* value) {
  set_has_new_revision();
  if (new_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_revision_ = new ::std::string;
  }
  new_revision_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.playlist4.proto.PlaylistModificationInfo.new_revision)
}
inline void PlaylistModificationInfo::set_new_revision(const void* value, size_t size) {
  set_has_new_revision();
  if (new_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_revision_ = new ::std::string;
  }
  new_revision_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.playlist4.proto.PlaylistModificationInfo.new_revision)
}
inline ::std::string* PlaylistModificationInfo::mutable_new_revision() {
  set_has_new_revision();
  if (new_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_revision_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.playlist4.proto.PlaylistModificationInfo.new_revision)
  return new_revision_;
}
inline ::std::string* PlaylistModificationInfo::release_new_revision() {
  clear_has_new_revision();
  if (new_revision_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_revision_;
    new_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlaylistModificationInfo::set_allocated_new_revision(::std::string* new_revision) {
  if (new_revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_revision_;
  }
  if (new_revision) {
    set_has_new_revision();
    new_revision_ = new_revision;
  } else {
    clear_has_new_revision();
    new_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.playlist4.proto.PlaylistModificationInfo.new_revision)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spotify::playlist4::proto::Playlist4InboxErrorKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::Playlist4InboxErrorKind>() {
  return ::spotify::playlist4::proto::Playlist4InboxErrorKind_descriptor();
}
template <> struct is_proto_enum< ::spotify::playlist4::proto::Playlist4ServiceMethodKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::Playlist4ServiceMethodKind>() {
  return ::spotify::playlist4::proto::Playlist4ServiceMethodKind_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playlist4service_2eproto__INCLUDED
