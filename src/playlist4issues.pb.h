// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist4issues.proto

#ifndef PROTOBUF_playlist4issues_2eproto__INCLUDED
#define PROTOBUF_playlist4issues_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace playlist4 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playlist4issues_2eproto();
void protobuf_AssignDesc_playlist4issues_2eproto();
void protobuf_ShutdownFile_playlist4issues_2eproto();

class ClientIssue;
class ClientResolveAction;

enum ClientIssue_Level {
  ClientIssue_Level_LEVEL_UNKNOWN = 0,
  ClientIssue_Level_LEVEL_DEBUG = 1,
  ClientIssue_Level_LEVEL_INFO = 2,
  ClientIssue_Level_LEVEL_NOTICE = 3,
  ClientIssue_Level_LEVEL_WARNING = 4,
  ClientIssue_Level_LEVEL_ERROR = 5
};
bool ClientIssue_Level_IsValid(int value);
const ClientIssue_Level ClientIssue_Level_Level_MIN = ClientIssue_Level_LEVEL_UNKNOWN;
const ClientIssue_Level ClientIssue_Level_Level_MAX = ClientIssue_Level_LEVEL_ERROR;
const int ClientIssue_Level_Level_ARRAYSIZE = ClientIssue_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientIssue_Level_descriptor();
inline const ::std::string& ClientIssue_Level_Name(ClientIssue_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientIssue_Level_descriptor(), value);
}
inline bool ClientIssue_Level_Parse(
    const ::std::string& name, ClientIssue_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientIssue_Level>(
    ClientIssue_Level_descriptor(), name, value);
}
enum ClientIssue_Code {
  ClientIssue_Code_CODE_UNKNOWN = 0,
  ClientIssue_Code_CODE_INDEX_OUT_OF_BOUNDS = 1,
  ClientIssue_Code_CODE_VERSION_MISMATCH = 2,
  ClientIssue_Code_CODE_CACHED_CHANGE = 3,
  ClientIssue_Code_CODE_OFFLINE_CHANGE = 4,
  ClientIssue_Code_CODE_CONCURRENT_CHANGE = 5
};
bool ClientIssue_Code_IsValid(int value);
const ClientIssue_Code ClientIssue_Code_Code_MIN = ClientIssue_Code_CODE_UNKNOWN;
const ClientIssue_Code ClientIssue_Code_Code_MAX = ClientIssue_Code_CODE_CONCURRENT_CHANGE;
const int ClientIssue_Code_Code_ARRAYSIZE = ClientIssue_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientIssue_Code_descriptor();
inline const ::std::string& ClientIssue_Code_Name(ClientIssue_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientIssue_Code_descriptor(), value);
}
inline bool ClientIssue_Code_Parse(
    const ::std::string& name, ClientIssue_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientIssue_Code>(
    ClientIssue_Code_descriptor(), name, value);
}
enum ClientResolveAction_Code {
  ClientResolveAction_Code_CODE_UNKNOWN = 0,
  ClientResolveAction_Code_CODE_NO_ACTION = 1,
  ClientResolveAction_Code_CODE_RETRY = 2,
  ClientResolveAction_Code_CODE_RELOAD = 3,
  ClientResolveAction_Code_CODE_DISCARD_LOCAL_CHANGES = 4,
  ClientResolveAction_Code_CODE_SEND_DUMP = 5,
  ClientResolveAction_Code_CODE_DISPLAY_ERROR_MESSAGE = 6
};
bool ClientResolveAction_Code_IsValid(int value);
const ClientResolveAction_Code ClientResolveAction_Code_Code_MIN = ClientResolveAction_Code_CODE_UNKNOWN;
const ClientResolveAction_Code ClientResolveAction_Code_Code_MAX = ClientResolveAction_Code_CODE_DISPLAY_ERROR_MESSAGE;
const int ClientResolveAction_Code_Code_ARRAYSIZE = ClientResolveAction_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientResolveAction_Code_descriptor();
inline const ::std::string& ClientResolveAction_Code_Name(ClientResolveAction_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientResolveAction_Code_descriptor(), value);
}
inline bool ClientResolveAction_Code_Parse(
    const ::std::string& name, ClientResolveAction_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientResolveAction_Code>(
    ClientResolveAction_Code_descriptor(), name, value);
}
enum ClientResolveAction_Initiator {
  ClientResolveAction_Initiator_INITIATOR_UNKNOWN = 0,
  ClientResolveAction_Initiator_INITIATOR_SERVER = 1,
  ClientResolveAction_Initiator_INITIATOR_CLIENT = 2
};
bool ClientResolveAction_Initiator_IsValid(int value);
const ClientResolveAction_Initiator ClientResolveAction_Initiator_Initiator_MIN = ClientResolveAction_Initiator_INITIATOR_UNKNOWN;
const ClientResolveAction_Initiator ClientResolveAction_Initiator_Initiator_MAX = ClientResolveAction_Initiator_INITIATOR_CLIENT;
const int ClientResolveAction_Initiator_Initiator_ARRAYSIZE = ClientResolveAction_Initiator_Initiator_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientResolveAction_Initiator_descriptor();
inline const ::std::string& ClientResolveAction_Initiator_Name(ClientResolveAction_Initiator value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientResolveAction_Initiator_descriptor(), value);
}
inline bool ClientResolveAction_Initiator_Parse(
    const ::std::string& name, ClientResolveAction_Initiator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientResolveAction_Initiator>(
    ClientResolveAction_Initiator_descriptor(), name, value);
}
// ===================================================================

class ClientIssue : public ::google::protobuf::Message {
 public:
  ClientIssue();
  virtual ~ClientIssue();

  ClientIssue(const ClientIssue& from);

  inline ClientIssue& operator=(const ClientIssue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientIssue& default_instance();

  void Swap(ClientIssue* other);

  // implements Message ----------------------------------------------

  ClientIssue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientIssue& from);
  void MergeFrom(const ClientIssue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClientIssue_Level Level;
  static const Level LEVEL_UNKNOWN = ClientIssue_Level_LEVEL_UNKNOWN;
  static const Level LEVEL_DEBUG = ClientIssue_Level_LEVEL_DEBUG;
  static const Level LEVEL_INFO = ClientIssue_Level_LEVEL_INFO;
  static const Level LEVEL_NOTICE = ClientIssue_Level_LEVEL_NOTICE;
  static const Level LEVEL_WARNING = ClientIssue_Level_LEVEL_WARNING;
  static const Level LEVEL_ERROR = ClientIssue_Level_LEVEL_ERROR;
  static inline bool Level_IsValid(int value) {
    return ClientIssue_Level_IsValid(value);
  }
  static const Level Level_MIN =
    ClientIssue_Level_Level_MIN;
  static const Level Level_MAX =
    ClientIssue_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    ClientIssue_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return ClientIssue_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return ClientIssue_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return ClientIssue_Level_Parse(name, value);
  }

  typedef ClientIssue_Code Code;
  static const Code CODE_UNKNOWN = ClientIssue_Code_CODE_UNKNOWN;
  static const Code CODE_INDEX_OUT_OF_BOUNDS = ClientIssue_Code_CODE_INDEX_OUT_OF_BOUNDS;
  static const Code CODE_VERSION_MISMATCH = ClientIssue_Code_CODE_VERSION_MISMATCH;
  static const Code CODE_CACHED_CHANGE = ClientIssue_Code_CODE_CACHED_CHANGE;
  static const Code CODE_OFFLINE_CHANGE = ClientIssue_Code_CODE_OFFLINE_CHANGE;
  static const Code CODE_CONCURRENT_CHANGE = ClientIssue_Code_CODE_CONCURRENT_CHANGE;
  static inline bool Code_IsValid(int value) {
    return ClientIssue_Code_IsValid(value);
  }
  static const Code Code_MIN =
    ClientIssue_Code_Code_MIN;
  static const Code Code_MAX =
    ClientIssue_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    ClientIssue_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return ClientIssue_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return ClientIssue_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return ClientIssue_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .spotify.playlist4.proto.ClientIssue.Level level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::spotify::playlist4::proto::ClientIssue_Level level() const;
  inline void set_level(::spotify::playlist4::proto::ClientIssue_Level value);

  // optional .spotify.playlist4.proto.ClientIssue.Code code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::spotify::playlist4::proto::ClientIssue_Code code() const;
  inline void set_code(::spotify::playlist4::proto::ClientIssue_Code value);

  // optional int32 repeatCount = 3;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatCountFieldNumber = 3;
  inline ::google::protobuf::int32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ClientIssue)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int level_;
  int code_;
  ::google::protobuf::int32 repeatcount_;
  friend void  protobuf_AddDesc_playlist4issues_2eproto();
  friend void protobuf_AssignDesc_playlist4issues_2eproto();
  friend void protobuf_ShutdownFile_playlist4issues_2eproto();

  void InitAsDefaultInstance();
  static ClientIssue* default_instance_;
};
// -------------------------------------------------------------------

class ClientResolveAction : public ::google::protobuf::Message {
 public:
  ClientResolveAction();
  virtual ~ClientResolveAction();

  ClientResolveAction(const ClientResolveAction& from);

  inline ClientResolveAction& operator=(const ClientResolveAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientResolveAction& default_instance();

  void Swap(ClientResolveAction* other);

  // implements Message ----------------------------------------------

  ClientResolveAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientResolveAction& from);
  void MergeFrom(const ClientResolveAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClientResolveAction_Code Code;
  static const Code CODE_UNKNOWN = ClientResolveAction_Code_CODE_UNKNOWN;
  static const Code CODE_NO_ACTION = ClientResolveAction_Code_CODE_NO_ACTION;
  static const Code CODE_RETRY = ClientResolveAction_Code_CODE_RETRY;
  static const Code CODE_RELOAD = ClientResolveAction_Code_CODE_RELOAD;
  static const Code CODE_DISCARD_LOCAL_CHANGES = ClientResolveAction_Code_CODE_DISCARD_LOCAL_CHANGES;
  static const Code CODE_SEND_DUMP = ClientResolveAction_Code_CODE_SEND_DUMP;
  static const Code CODE_DISPLAY_ERROR_MESSAGE = ClientResolveAction_Code_CODE_DISPLAY_ERROR_MESSAGE;
  static inline bool Code_IsValid(int value) {
    return ClientResolveAction_Code_IsValid(value);
  }
  static const Code Code_MIN =
    ClientResolveAction_Code_Code_MIN;
  static const Code Code_MAX =
    ClientResolveAction_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    ClientResolveAction_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return ClientResolveAction_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return ClientResolveAction_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return ClientResolveAction_Code_Parse(name, value);
  }

  typedef ClientResolveAction_Initiator Initiator;
  static const Initiator INITIATOR_UNKNOWN = ClientResolveAction_Initiator_INITIATOR_UNKNOWN;
  static const Initiator INITIATOR_SERVER = ClientResolveAction_Initiator_INITIATOR_SERVER;
  static const Initiator INITIATOR_CLIENT = ClientResolveAction_Initiator_INITIATOR_CLIENT;
  static inline bool Initiator_IsValid(int value) {
    return ClientResolveAction_Initiator_IsValid(value);
  }
  static const Initiator Initiator_MIN =
    ClientResolveAction_Initiator_Initiator_MIN;
  static const Initiator Initiator_MAX =
    ClientResolveAction_Initiator_Initiator_MAX;
  static const int Initiator_ARRAYSIZE =
    ClientResolveAction_Initiator_Initiator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Initiator_descriptor() {
    return ClientResolveAction_Initiator_descriptor();
  }
  static inline const ::std::string& Initiator_Name(Initiator value) {
    return ClientResolveAction_Initiator_Name(value);
  }
  static inline bool Initiator_Parse(const ::std::string& name,
      Initiator* value) {
    return ClientResolveAction_Initiator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .spotify.playlist4.proto.ClientResolveAction.Code code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::spotify::playlist4::proto::ClientResolveAction_Code code() const;
  inline void set_code(::spotify::playlist4::proto::ClientResolveAction_Code value);

  // optional .spotify.playlist4.proto.ClientResolveAction.Initiator initiator = 2;
  inline bool has_initiator() const;
  inline void clear_initiator();
  static const int kInitiatorFieldNumber = 2;
  inline ::spotify::playlist4::proto::ClientResolveAction_Initiator initiator() const;
  inline void set_initiator(::spotify::playlist4::proto::ClientResolveAction_Initiator value);

  // @@protoc_insertion_point(class_scope:spotify.playlist4.proto.ClientResolveAction)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_initiator();
  inline void clear_has_initiator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int code_;
  int initiator_;
  friend void  protobuf_AddDesc_playlist4issues_2eproto();
  friend void protobuf_AssignDesc_playlist4issues_2eproto();
  friend void protobuf_ShutdownFile_playlist4issues_2eproto();

  void InitAsDefaultInstance();
  static ClientResolveAction* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientIssue

// optional .spotify.playlist4.proto.ClientIssue.Level level = 1;
inline bool ClientIssue::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientIssue::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientIssue::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientIssue::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::spotify::playlist4::proto::ClientIssue_Level ClientIssue::level() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ClientIssue.level)
  return static_cast< ::spotify::playlist4::proto::ClientIssue_Level >(level_);
}
inline void ClientIssue::set_level(::spotify::playlist4::proto::ClientIssue_Level value) {
  assert(::spotify::playlist4::proto::ClientIssue_Level_IsValid(value));
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ClientIssue.level)
}

// optional .spotify.playlist4.proto.ClientIssue.Code code = 2;
inline bool ClientIssue::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientIssue::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientIssue::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientIssue::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::spotify::playlist4::proto::ClientIssue_Code ClientIssue::code() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ClientIssue.code)
  return static_cast< ::spotify::playlist4::proto::ClientIssue_Code >(code_);
}
inline void ClientIssue::set_code(::spotify::playlist4::proto::ClientIssue_Code value) {
  assert(::spotify::playlist4::proto::ClientIssue_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ClientIssue.code)
}

// optional int32 repeatCount = 3;
inline bool ClientIssue::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientIssue::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientIssue::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientIssue::clear_repeatcount() {
  repeatcount_ = 0;
  clear_has_repeatcount();
}
inline ::google::protobuf::int32 ClientIssue::repeatcount() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ClientIssue.repeatCount)
  return repeatcount_;
}
inline void ClientIssue::set_repeatcount(::google::protobuf::int32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ClientIssue.repeatCount)
}

// -------------------------------------------------------------------

// ClientResolveAction

// optional .spotify.playlist4.proto.ClientResolveAction.Code code = 1;
inline bool ClientResolveAction::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientResolveAction::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientResolveAction::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientResolveAction::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::spotify::playlist4::proto::ClientResolveAction_Code ClientResolveAction::code() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ClientResolveAction.code)
  return static_cast< ::spotify::playlist4::proto::ClientResolveAction_Code >(code_);
}
inline void ClientResolveAction::set_code(::spotify::playlist4::proto::ClientResolveAction_Code value) {
  assert(::spotify::playlist4::proto::ClientResolveAction_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ClientResolveAction.code)
}

// optional .spotify.playlist4.proto.ClientResolveAction.Initiator initiator = 2;
inline bool ClientResolveAction::has_initiator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientResolveAction::set_has_initiator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientResolveAction::clear_has_initiator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientResolveAction::clear_initiator() {
  initiator_ = 0;
  clear_has_initiator();
}
inline ::spotify::playlist4::proto::ClientResolveAction_Initiator ClientResolveAction::initiator() const {
  // @@protoc_insertion_point(field_get:spotify.playlist4.proto.ClientResolveAction.initiator)
  return static_cast< ::spotify::playlist4::proto::ClientResolveAction_Initiator >(initiator_);
}
inline void ClientResolveAction::set_initiator(::spotify::playlist4::proto::ClientResolveAction_Initiator value) {
  assert(::spotify::playlist4::proto::ClientResolveAction_Initiator_IsValid(value));
  set_has_initiator();
  initiator_ = value;
  // @@protoc_insertion_point(field_set:spotify.playlist4.proto.ClientResolveAction.initiator)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace playlist4
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spotify::playlist4::proto::ClientIssue_Level> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::ClientIssue_Level>() {
  return ::spotify::playlist4::proto::ClientIssue_Level_descriptor();
}
template <> struct is_proto_enum< ::spotify::playlist4::proto::ClientIssue_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::ClientIssue_Code>() {
  return ::spotify::playlist4::proto::ClientIssue_Code_descriptor();
}
template <> struct is_proto_enum< ::spotify::playlist4::proto::ClientResolveAction_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::ClientResolveAction_Code>() {
  return ::spotify::playlist4::proto::ClientResolveAction_Code_descriptor();
}
template <> struct is_proto_enum< ::spotify::playlist4::proto::ClientResolveAction_Initiator> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::playlist4::proto::ClientResolveAction_Initiator>() {
  return ::spotify::playlist4::proto::ClientResolveAction_Initiator_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playlist4issues_2eproto__INCLUDED
