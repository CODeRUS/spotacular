// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bartender.proto

#ifndef PROTOBUF_bartender_2eproto__INCLUDED
#define PROTOBUF_bartender_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace bartender {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bartender_2eproto();
void protobuf_AssignDesc_bartender_2eproto();
void protobuf_ShutdownFile_bartender_2eproto();

class StoryRequest;
class StoryList;
class Story;
class RichText;
class RichTextField;
class Reason;
class SpotifyLink;
class SpotifyAudioPreview;
class SpotifyImage;
class Metadata;
class ConcertData;
class Location;
class DiscoveredPlaylist;
class DiscoverNux;

enum StoryType {
  TYPE_UNKNOWN_STORY = 0,
  TYPE_RECOMMENDATION = 1,
  TYPE_NEW_RELEASE = 2,
  TYPE_SHARED_ITEM = 3,
  TYPE_CREATED_ITEM = 4,
  TYPE_SUBSCRIBED_TO_ITEM = 5,
  TYPE_FOLLOWED_PROFILE = 6,
  TYPE_SOCIAL_LISTEN = 7,
  TYPE_RECENT_STREAM = 8
};
bool StoryType_IsValid(int value);
const StoryType StoryType_MIN = TYPE_UNKNOWN_STORY;
const StoryType StoryType_MAX = TYPE_RECENT_STREAM;
const int StoryType_ARRAYSIZE = StoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoryType_descriptor();
inline const ::std::string& StoryType_Name(StoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoryType_descriptor(), value);
}
inline bool StoryType_Parse(
    const ::std::string& name, StoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoryType>(
    StoryType_descriptor(), name, value);
}
enum ReasonType {
  TYPE_UNKNOWN_REASON = 0,
  TYPE_LISTENED_TO = 1,
  TYPE_LISTENED_TO2 = 2,
  TYPE_FOLLOW_USER = 3,
  TYPE_FOLLOW_ARTIST = 4,
  TYPE_POPULAR = 5
};
bool ReasonType_IsValid(int value);
const ReasonType ReasonType_MIN = TYPE_UNKNOWN_REASON;
const ReasonType ReasonType_MAX = TYPE_POPULAR;
const int ReasonType_ARRAYSIZE = ReasonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReasonType_descriptor();
inline const ::std::string& ReasonType_Name(ReasonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReasonType_descriptor(), value);
}
inline bool ReasonType_Parse(
    const ::std::string& name, ReasonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReasonType>(
    ReasonType_descriptor(), name, value);
}
enum MetadataType {
  TYPE_UNKNOWN_METADATA = 0,
  TYPE_SPOTIFY_DATA = 1,
  TYPE_REVIEW = 2,
  TYPE_NEWS = 3,
  TYPE_CONCERT = 4,
  TYPE_PLAYLIST = 5
};
bool MetadataType_IsValid(int value);
const MetadataType MetadataType_MIN = TYPE_UNKNOWN_METADATA;
const MetadataType MetadataType_MAX = TYPE_PLAYLIST;
const int MetadataType_ARRAYSIZE = MetadataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetadataType_descriptor();
inline const ::std::string& MetadataType_Name(MetadataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetadataType_descriptor(), value);
}
inline bool MetadataType_Parse(
    const ::std::string& name, MetadataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetadataType>(
    MetadataType_descriptor(), name, value);
}
enum ScoreType {
  TYPE_UNKNOWN_SCORE = 0,
  TYPE_FOLLOWER_COUNT = 1,
  TYPE_STAR_RATING = 2
};
bool ScoreType_IsValid(int value);
const ScoreType ScoreType_MIN = TYPE_UNKNOWN_SCORE;
const ScoreType ScoreType_MAX = TYPE_STAR_RATING;
const int ScoreType_ARRAYSIZE = ScoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScoreType_descriptor();
inline const ::std::string& ScoreType_Name(ScoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScoreType_descriptor(), value);
}
inline bool ScoreType_Parse(
    const ::std::string& name, ScoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScoreType>(
    ScoreType_descriptor(), name, value);
}
// ===================================================================

class StoryRequest : public ::google::protobuf::Message {
 public:
  StoryRequest();
  virtual ~StoryRequest();

  StoryRequest(const StoryRequest& from);

  inline StoryRequest& operator=(const StoryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoryRequest& default_instance();

  void Swap(StoryRequest* other);

  // implements Message ----------------------------------------------

  StoryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoryRequest& from);
  void MergeFrom(const StoryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string language = 2;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 2;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string device = 3;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 3;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.StoryRequest)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* country_;
  ::std::string* language_;
  ::std::string* device_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static StoryRequest* default_instance_;
};
// -------------------------------------------------------------------

class StoryList : public ::google::protobuf::Message {
 public:
  StoryList();
  virtual ~StoryList();

  StoryList(const StoryList& from);

  inline StoryList& operator=(const StoryList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoryList& default_instance();

  void Swap(StoryList* other);

  // implements Message ----------------------------------------------

  StoryList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoryList& from);
  void MergeFrom(const StoryList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .spotify.bartender.proto.Story stories = 1;
  inline int stories_size() const;
  inline void clear_stories();
  static const int kStoriesFieldNumber = 1;
  inline const ::spotify::bartender::proto::Story& stories(int index) const;
  inline ::spotify::bartender::proto::Story* mutable_stories(int index);
  inline ::spotify::bartender::proto::Story* add_stories();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::Story >&
      stories() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::Story >*
      mutable_stories();

  // optional bool has_fallback = 12;
  inline bool has_has_fallback() const;
  inline void clear_has_fallback();
  static const int kHasFallbackFieldNumber = 12;
  inline bool has_fallback() const;
  inline void set_has_fallback(bool value);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.StoryList)
 private:
  inline void set_has_has_fallback();
  inline void clear_has_has_fallback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::Story > stories_;
  bool has_fallback_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static StoryList* default_instance_;
};
// -------------------------------------------------------------------

class Story : public ::google::protobuf::Message {
 public:
  Story();
  virtual ~Story();

  Story(const Story& from);

  inline Story& operator=(const Story& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Story& default_instance();

  void Swap(Story* other);

  // implements Message ----------------------------------------------

  Story* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Story& from);
  void MergeFrom(const Story& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string story_id = 2;
  inline bool has_story_id() const;
  inline void clear_story_id();
  static const int kStoryIdFieldNumber = 2;
  inline const ::std::string& story_id() const;
  inline void set_story_id(const ::std::string& value);
  inline void set_story_id(const char* value);
  inline void set_story_id(const char* value, size_t size);
  inline ::std::string* mutable_story_id();
  inline ::std::string* release_story_id();
  inline void set_allocated_story_id(::std::string* story_id);

  // optional .spotify.bartender.proto.StoryType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::spotify::bartender::proto::StoryType type() const;
  inline void set_type(::spotify::bartender::proto::StoryType value);

  // optional .spotify.bartender.proto.SpotifyLink recommended_item = 5;
  inline bool has_recommended_item() const;
  inline void clear_recommended_item();
  static const int kRecommendedItemFieldNumber = 5;
  inline const ::spotify::bartender::proto::SpotifyLink& recommended_item() const;
  inline ::spotify::bartender::proto::SpotifyLink* mutable_recommended_item();
  inline ::spotify::bartender::proto::SpotifyLink* release_recommended_item();
  inline void set_allocated_recommended_item(::spotify::bartender::proto::SpotifyLink* recommended_item);

  // optional .spotify.bartender.proto.SpotifyLink recommended_item_parent = 6;
  inline bool has_recommended_item_parent() const;
  inline void clear_recommended_item_parent();
  static const int kRecommendedItemParentFieldNumber = 6;
  inline const ::spotify::bartender::proto::SpotifyLink& recommended_item_parent() const;
  inline ::spotify::bartender::proto::SpotifyLink* mutable_recommended_item_parent();
  inline ::spotify::bartender::proto::SpotifyLink* release_recommended_item_parent();
  inline void set_allocated_recommended_item_parent(::spotify::bartender::proto::SpotifyLink* recommended_item_parent);

  // repeated .spotify.bartender.proto.SpotifyImage hero_image = 8;
  inline int hero_image_size() const;
  inline void clear_hero_image();
  static const int kHeroImageFieldNumber = 8;
  inline const ::spotify::bartender::proto::SpotifyImage& hero_image(int index) const;
  inline ::spotify::bartender::proto::SpotifyImage* mutable_hero_image(int index);
  inline ::spotify::bartender::proto::SpotifyImage* add_hero_image();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >&
      hero_image() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >*
      mutable_hero_image();

  // optional .spotify.bartender.proto.Metadata metadata = 9;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 9;
  inline const ::spotify::bartender::proto::Metadata& metadata() const;
  inline ::spotify::bartender::proto::Metadata* mutable_metadata();
  inline ::spotify::bartender::proto::Metadata* release_metadata();
  inline void set_allocated_metadata(::spotify::bartender::proto::Metadata* metadata);

  // optional .spotify.bartender.proto.RichText reason_text = 10;
  inline bool has_reason_text() const;
  inline void clear_reason_text();
  static const int kReasonTextFieldNumber = 10;
  inline const ::spotify::bartender::proto::RichText& reason_text() const;
  inline ::spotify::bartender::proto::RichText* mutable_reason_text();
  inline ::spotify::bartender::proto::RichText* release_reason_text();
  inline void set_allocated_reason_text(::spotify::bartender::proto::RichText* reason_text);

  // repeated .spotify.bartender.proto.SpotifyImage reason_image = 11;
  inline int reason_image_size() const;
  inline void clear_reason_image();
  static const int kReasonImageFieldNumber = 11;
  inline const ::spotify::bartender::proto::SpotifyImage& reason_image(int index) const;
  inline ::spotify::bartender::proto::SpotifyImage* mutable_reason_image(int index);
  inline ::spotify::bartender::proto::SpotifyImage* add_reason_image();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >&
      reason_image() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >*
      mutable_reason_image();

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.Story)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_story_id();
  inline void clear_has_story_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_recommended_item();
  inline void clear_has_recommended_item();
  inline void set_has_recommended_item_parent();
  inline void clear_has_recommended_item_parent();
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_reason_text();
  inline void clear_has_reason_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* story_id_;
  ::google::protobuf::int32 version_;
  int type_;
  ::spotify::bartender::proto::SpotifyLink* recommended_item_;
  ::spotify::bartender::proto::SpotifyLink* recommended_item_parent_;
  ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage > hero_image_;
  ::spotify::bartender::proto::Metadata* metadata_;
  ::spotify::bartender::proto::RichText* reason_text_;
  ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage > reason_image_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static Story* default_instance_;
};
// -------------------------------------------------------------------

class RichText : public ::google::protobuf::Message {
 public:
  RichText();
  virtual ~RichText();

  RichText(const RichText& from);

  inline RichText& operator=(const RichText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RichText& default_instance();

  void Swap(RichText* other);

  // implements Message ----------------------------------------------

  RichText* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RichText& from);
  void MergeFrom(const RichText& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // repeated .spotify.bartender.proto.RichTextField fields = 2;
  inline int fields_size() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 2;
  inline const ::spotify::bartender::proto::RichTextField& fields(int index) const;
  inline ::spotify::bartender::proto::RichTextField* mutable_fields(int index);
  inline ::spotify::bartender::proto::RichTextField* add_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::RichTextField >&
      fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::RichTextField >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.RichText)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::RichTextField > fields_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static RichText* default_instance_;
};
// -------------------------------------------------------------------

class RichTextField : public ::google::protobuf::Message {
 public:
  RichTextField();
  virtual ~RichTextField();

  RichTextField(const RichTextField& from);

  inline RichTextField& operator=(const RichTextField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RichTextField& default_instance();

  void Swap(RichTextField* other);

  // implements Message ----------------------------------------------

  RichTextField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RichTextField& from);
  void MergeFrom(const RichTextField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string uri = 2;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 2;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional bool bold = 4;
  inline bool has_bold() const;
  inline void clear_bold();
  static const int kBoldFieldNumber = 4;
  inline bool bold() const;
  inline void set_bold(bool value);

  // optional bool italic = 5;
  inline bool has_italic() const;
  inline void clear_italic();
  static const int kItalicFieldNumber = 5;
  inline bool italic() const;
  inline void set_italic(bool value);

  // optional bool underline = 6;
  inline bool has_underline() const;
  inline void clear_underline();
  static const int kUnderlineFieldNumber = 6;
  inline bool underline() const;
  inline void set_underline(bool value);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.RichTextField)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_bold();
  inline void clear_has_bold();
  inline void set_has_italic();
  inline void clear_has_italic();
  inline void set_has_underline();
  inline void clear_has_underline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  ::std::string* uri_;
  ::std::string* url_;
  bool bold_;
  bool italic_;
  bool underline_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static RichTextField* default_instance_;
};
// -------------------------------------------------------------------

class Reason : public ::google::protobuf::Message {
 public:
  Reason();
  virtual ~Reason();

  Reason(const Reason& from);

  inline Reason& operator=(const Reason& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reason& default_instance();

  void Swap(Reason* other);

  // implements Message ----------------------------------------------

  Reason* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reason& from);
  void MergeFrom(const Reason& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .spotify.bartender.proto.ReasonType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::spotify::bartender::proto::ReasonType type() const;
  inline void set_type(::spotify::bartender::proto::ReasonType value);

  // repeated .spotify.bartender.proto.SpotifyLink sample_criteria = 2;
  inline int sample_criteria_size() const;
  inline void clear_sample_criteria();
  static const int kSampleCriteriaFieldNumber = 2;
  inline const ::spotify::bartender::proto::SpotifyLink& sample_criteria(int index) const;
  inline ::spotify::bartender::proto::SpotifyLink* mutable_sample_criteria(int index);
  inline ::spotify::bartender::proto::SpotifyLink* add_sample_criteria();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyLink >&
      sample_criteria() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyLink >*
      mutable_sample_criteria();

  // optional int32 criteria_count = 3;
  inline bool has_criteria_count() const;
  inline void clear_criteria_count();
  static const int kCriteriaCountFieldNumber = 3;
  inline ::google::protobuf::int32 criteria_count() const;
  inline void set_criteria_count(::google::protobuf::int32 value);

  // repeated .spotify.bartender.proto.ReasonType reason_type = 4;
  inline int reason_type_size() const;
  inline void clear_reason_type();
  static const int kReasonTypeFieldNumber = 4;
  inline ::spotify::bartender::proto::ReasonType reason_type(int index) const;
  inline void set_reason_type(int index, ::spotify::bartender::proto::ReasonType value);
  inline void add_reason_type(::spotify::bartender::proto::ReasonType value);
  inline const ::google::protobuf::RepeatedField<int>& reason_type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_reason_type();

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.Reason)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_criteria_count();
  inline void clear_has_criteria_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyLink > sample_criteria_;
  int type_;
  ::google::protobuf::int32 criteria_count_;
  ::google::protobuf::RepeatedField<int> reason_type_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static Reason* default_instance_;
};
// -------------------------------------------------------------------

class SpotifyLink : public ::google::protobuf::Message {
 public:
  SpotifyLink();
  virtual ~SpotifyLink();

  SpotifyLink(const SpotifyLink& from);

  inline SpotifyLink& operator=(const SpotifyLink& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpotifyLink& default_instance();

  void Swap(SpotifyLink* other);

  // implements Message ----------------------------------------------

  SpotifyLink* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpotifyLink& from);
  void MergeFrom(const SpotifyLink& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional string display_name = 2;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // optional .spotify.bartender.proto.SpotifyLink parent = 3;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 3;
  inline const ::spotify::bartender::proto::SpotifyLink& parent() const;
  inline ::spotify::bartender::proto::SpotifyLink* mutable_parent();
  inline ::spotify::bartender::proto::SpotifyLink* release_parent();
  inline void set_allocated_parent(::spotify::bartender::proto::SpotifyLink* parent);

  // repeated .spotify.bartender.proto.SpotifyAudioPreview preview = 6;
  inline int preview_size() const;
  inline void clear_preview();
  static const int kPreviewFieldNumber = 6;
  inline const ::spotify::bartender::proto::SpotifyAudioPreview& preview(int index) const;
  inline ::spotify::bartender::proto::SpotifyAudioPreview* mutable_preview(int index);
  inline ::spotify::bartender::proto::SpotifyAudioPreview* add_preview();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyAudioPreview >&
      preview() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyAudioPreview >*
      mutable_preview();

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.SpotifyLink)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_parent();
  inline void clear_has_parent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* display_name_;
  ::spotify::bartender::proto::SpotifyLink* parent_;
  ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyAudioPreview > preview_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static SpotifyLink* default_instance_;
};
// -------------------------------------------------------------------

class SpotifyAudioPreview : public ::google::protobuf::Message {
 public:
  SpotifyAudioPreview();
  virtual ~SpotifyAudioPreview();

  SpotifyAudioPreview(const SpotifyAudioPreview& from);

  inline SpotifyAudioPreview& operator=(const SpotifyAudioPreview& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpotifyAudioPreview& default_instance();

  void Swap(SpotifyAudioPreview* other);

  // implements Message ----------------------------------------------

  SpotifyAudioPreview* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpotifyAudioPreview& from);
  void MergeFrom(const SpotifyAudioPreview& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional string file_id = 2;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  inline const ::std::string& file_id() const;
  inline void set_file_id(const ::std::string& value);
  inline void set_file_id(const char* value);
  inline void set_file_id(const char* value, size_t size);
  inline ::std::string* mutable_file_id();
  inline ::std::string* release_file_id();
  inline void set_allocated_file_id(::std::string* file_id);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.SpotifyAudioPreview)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_file_id();
  inline void clear_has_file_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* file_id_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static SpotifyAudioPreview* default_instance_;
};
// -------------------------------------------------------------------

class SpotifyImage : public ::google::protobuf::Message {
 public:
  SpotifyImage();
  virtual ~SpotifyImage();

  SpotifyImage(const SpotifyImage& from);

  inline SpotifyImage& operator=(const SpotifyImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpotifyImage& default_instance();

  void Swap(SpotifyImage* other);

  // implements Message ----------------------------------------------

  SpotifyImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpotifyImage& from);
  void MergeFrom(const SpotifyImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional string file_id = 2;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  inline const ::std::string& file_id() const;
  inline void set_file_id(const ::std::string& value);
  inline void set_file_id(const char* value);
  inline void set_file_id(const char* value, size_t size);
  inline ::std::string* mutable_file_id();
  inline ::std::string* release_file_id();
  inline void set_allocated_file_id(::std::string* file_id);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.SpotifyImage)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_file_id();
  inline void clear_has_file_id();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* file_id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static SpotifyImage* default_instance_;
};
// -------------------------------------------------------------------

class Metadata : public ::google::protobuf::Message {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();

  void Swap(Metadata* other);

  // implements Message ----------------------------------------------

  Metadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string app = 2;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 2;
  inline const ::std::string& app() const;
  inline void set_app(const ::std::string& value);
  inline void set_app(const char* value);
  inline void set_app(const char* value, size_t size);
  inline ::std::string* mutable_app();
  inline ::std::string* release_app();
  inline void set_allocated_app(::std::string* app);

  // optional .spotify.bartender.proto.MetadataType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::spotify::bartender::proto::MetadataType type() const;
  inline void set_type(::spotify::bartender::proto::MetadataType value);

  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string summary = 5;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 5;
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // optional string favicon_url = 6;
  inline bool has_favicon_url() const;
  inline void clear_favicon_url();
  static const int kFaviconUrlFieldNumber = 6;
  inline const ::std::string& favicon_url() const;
  inline void set_favicon_url(const ::std::string& value);
  inline void set_favicon_url(const char* value);
  inline void set_favicon_url(const char* value, size_t size);
  inline ::std::string* mutable_favicon_url();
  inline ::std::string* release_favicon_url();
  inline void set_allocated_favicon_url(::std::string* favicon_url);

  // optional string external_url = 7;
  inline bool has_external_url() const;
  inline void clear_external_url();
  static const int kExternalUrlFieldNumber = 7;
  inline const ::std::string& external_url() const;
  inline void set_external_url(const ::std::string& value);
  inline void set_external_url(const char* value);
  inline void set_external_url(const char* value, size_t size);
  inline ::std::string* mutable_external_url();
  inline ::std::string* release_external_url();
  inline void set_allocated_external_url(::std::string* external_url);

  // optional string internal_uri = 8;
  inline bool has_internal_uri() const;
  inline void clear_internal_uri();
  static const int kInternalUriFieldNumber = 8;
  inline const ::std::string& internal_uri() const;
  inline void set_internal_uri(const ::std::string& value);
  inline void set_internal_uri(const char* value);
  inline void set_internal_uri(const char* value, size_t size);
  inline ::std::string* mutable_internal_uri();
  inline ::std::string* release_internal_uri();
  inline void set_allocated_internal_uri(::std::string* internal_uri);

  // optional int32 dtpublished = 9;
  inline bool has_dtpublished() const;
  inline void clear_dtpublished();
  static const int kDtpublishedFieldNumber = 9;
  inline ::google::protobuf::int32 dtpublished() const;
  inline void set_dtpublished(::google::protobuf::int32 value);

  // optional int32 dtexpiry = 10;
  inline bool has_dtexpiry() const;
  inline void clear_dtexpiry();
  static const int kDtexpiryFieldNumber = 10;
  inline ::google::protobuf::int32 dtexpiry() const;
  inline void set_dtexpiry(::google::protobuf::int32 value);

  // optional .spotify.bartender.proto.SpotifyLink author = 11;
  inline bool has_author() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 11;
  inline const ::spotify::bartender::proto::SpotifyLink& author() const;
  inline ::spotify::bartender::proto::SpotifyLink* mutable_author();
  inline ::spotify::bartender::proto::SpotifyLink* release_author();
  inline void set_allocated_author(::spotify::bartender::proto::SpotifyLink* author);

  // repeated int32 score = 12;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 12;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // repeated .spotify.bartender.proto.ScoreType score_type = 13;
  inline int score_type_size() const;
  inline void clear_score_type();
  static const int kScoreTypeFieldNumber = 13;
  inline ::spotify::bartender::proto::ScoreType score_type(int index) const;
  inline void set_score_type(int index, ::spotify::bartender::proto::ScoreType value);
  inline void add_score_type(::spotify::bartender::proto::ScoreType value);
  inline const ::google::protobuf::RepeatedField<int>& score_type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_score_type();

  // optional .spotify.bartender.proto.ConcertData concert_data = 14;
  inline bool has_concert_data() const;
  inline void clear_concert_data();
  static const int kConcertDataFieldNumber = 14;
  inline const ::spotify::bartender::proto::ConcertData& concert_data() const;
  inline ::spotify::bartender::proto::ConcertData* mutable_concert_data();
  inline ::spotify::bartender::proto::ConcertData* release_concert_data();
  inline void set_allocated_concert_data(::spotify::bartender::proto::ConcertData* concert_data);

  // repeated string item_uri = 15;
  inline int item_uri_size() const;
  inline void clear_item_uri();
  static const int kItemUriFieldNumber = 15;
  inline const ::std::string& item_uri(int index) const;
  inline ::std::string* mutable_item_uri(int index);
  inline void set_item_uri(int index, const ::std::string& value);
  inline void set_item_uri(int index, const char* value);
  inline void set_item_uri(int index, const char* value, size_t size);
  inline ::std::string* add_item_uri();
  inline void add_item_uri(const ::std::string& value);
  inline void add_item_uri(const char* value);
  inline void add_item_uri(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& item_uri() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_uri();

  // repeated .spotify.bartender.proto.SpotifyImage image = 16;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 16;
  inline const ::spotify::bartender::proto::SpotifyImage& image(int index) const;
  inline ::spotify::bartender::proto::SpotifyImage* mutable_image(int index);
  inline ::spotify::bartender::proto::SpotifyImage* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >*
      mutable_image();

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.Metadata)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_favicon_url();
  inline void clear_has_favicon_url();
  inline void set_has_external_url();
  inline void clear_has_external_url();
  inline void set_has_internal_uri();
  inline void clear_has_internal_uri();
  inline void set_has_dtpublished();
  inline void clear_has_dtpublished();
  inline void set_has_dtexpiry();
  inline void clear_has_dtexpiry();
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_concert_data();
  inline void clear_has_concert_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* app_;
  ::std::string* title_;
  ::std::string* summary_;
  ::std::string* favicon_url_;
  int type_;
  ::google::protobuf::int32 dtpublished_;
  ::std::string* external_url_;
  ::std::string* internal_uri_;
  ::spotify::bartender::proto::SpotifyLink* author_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  ::google::protobuf::RepeatedField<int> score_type_;
  ::spotify::bartender::proto::ConcertData* concert_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_uri_;
  ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage > image_;
  ::google::protobuf::int32 dtexpiry_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static Metadata* default_instance_;
};
// -------------------------------------------------------------------

class ConcertData : public ::google::protobuf::Message {
 public:
  ConcertData();
  virtual ~ConcertData();

  ConcertData(const ConcertData& from);

  inline ConcertData& operator=(const ConcertData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcertData& default_instance();

  void Swap(ConcertData* other);

  // implements Message ----------------------------------------------

  ConcertData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcertData& from);
  void MergeFrom(const ConcertData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dtstart = 1;
  inline bool has_dtstart() const;
  inline void clear_dtstart();
  static const int kDtstartFieldNumber = 1;
  inline ::google::protobuf::int32 dtstart() const;
  inline void set_dtstart(::google::protobuf::int32 value);

  // optional int32 dtend = 2;
  inline bool has_dtend() const;
  inline void clear_dtend();
  static const int kDtendFieldNumber = 2;
  inline ::google::protobuf::int32 dtend() const;
  inline void set_dtend(::google::protobuf::int32 value);

  // optional .spotify.bartender.proto.Location location = 3;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 3;
  inline const ::spotify::bartender::proto::Location& location() const;
  inline ::spotify::bartender::proto::Location* mutable_location();
  inline ::spotify::bartender::proto::Location* release_location();
  inline void set_allocated_location(::spotify::bartender::proto::Location* location);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.ConcertData)
 private:
  inline void set_has_dtstart();
  inline void clear_has_dtstart();
  inline void set_has_dtend();
  inline void clear_has_dtend();
  inline void set_has_location();
  inline void clear_has_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 dtstart_;
  ::google::protobuf::int32 dtend_;
  ::spotify::bartender::proto::Location* location_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static ConcertData* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string city = 2;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional double lat = 3;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 3;
  inline double lat() const;
  inline void set_lat(double value);

  // optional double lng = 4;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 4;
  inline double lng() const;
  inline void set_lng(double value);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.Location)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* city_;
  double lat_;
  double lng_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class DiscoveredPlaylist : public ::google::protobuf::Message {
 public:
  DiscoveredPlaylist();
  virtual ~DiscoveredPlaylist();

  DiscoveredPlaylist(const DiscoveredPlaylist& from);

  inline DiscoveredPlaylist& operator=(const DiscoveredPlaylist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoveredPlaylist& default_instance();

  void Swap(DiscoveredPlaylist* other);

  // implements Message ----------------------------------------------

  DiscoveredPlaylist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiscoveredPlaylist& from);
  void MergeFrom(const DiscoveredPlaylist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.DiscoveredPlaylist)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static DiscoveredPlaylist* default_instance_;
};
// -------------------------------------------------------------------

class DiscoverNux : public ::google::protobuf::Message {
 public:
  DiscoverNux();
  virtual ~DiscoverNux();

  DiscoverNux(const DiscoverNux& from);

  inline DiscoverNux& operator=(const DiscoverNux& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoverNux& default_instance();

  void Swap(DiscoverNux* other);

  // implements Message ----------------------------------------------

  DiscoverNux* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiscoverNux& from);
  void MergeFrom(const DiscoverNux& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seen = 1;
  inline bool has_seen() const;
  inline void clear_seen();
  static const int kSeenFieldNumber = 1;
  inline ::google::protobuf::int32 seen() const;
  inline void set_seen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spotify.bartender.proto.DiscoverNux)
 private:
  inline void set_has_seen();
  inline void clear_has_seen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seen_;
  friend void  protobuf_AddDesc_bartender_2eproto();
  friend void protobuf_AssignDesc_bartender_2eproto();
  friend void protobuf_ShutdownFile_bartender_2eproto();

  void InitAsDefaultInstance();
  static DiscoverNux* default_instance_;
};
// ===================================================================


// ===================================================================

// StoryRequest

// optional string country = 1;
inline bool StoryRequest::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoryRequest::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoryRequest::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoryRequest::clear_country() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& StoryRequest::country() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.StoryRequest.country)
  return *country_;
}
inline void StoryRequest::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.StoryRequest.country)
}
inline void StoryRequest::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.StoryRequest.country)
}
inline void StoryRequest::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.StoryRequest.country)
}
inline ::std::string* StoryRequest::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.StoryRequest.country)
  return country_;
}
inline ::std::string* StoryRequest::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoryRequest::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.StoryRequest.country)
}

// optional string language = 2;
inline bool StoryRequest::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoryRequest::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoryRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoryRequest::clear_language() {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& StoryRequest::language() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.StoryRequest.language)
  return *language_;
}
inline void StoryRequest::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.StoryRequest.language)
}
inline void StoryRequest::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.StoryRequest.language)
}
inline void StoryRequest::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.StoryRequest.language)
}
inline ::std::string* StoryRequest::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    language_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.StoryRequest.language)
  return language_;
}
inline ::std::string* StoryRequest::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoryRequest::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.StoryRequest.language)
}

// optional string device = 3;
inline bool StoryRequest::has_device() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoryRequest::set_has_device() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoryRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoryRequest::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& StoryRequest::device() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.StoryRequest.device)
  return *device_;
}
inline void StoryRequest::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.StoryRequest.device)
}
inline void StoryRequest::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.StoryRequest.device)
}
inline void StoryRequest::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.StoryRequest.device)
}
inline ::std::string* StoryRequest::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.StoryRequest.device)
  return device_;
}
inline ::std::string* StoryRequest::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoryRequest::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.StoryRequest.device)
}

// -------------------------------------------------------------------

// StoryList

// repeated .spotify.bartender.proto.Story stories = 1;
inline int StoryList::stories_size() const {
  return stories_.size();
}
inline void StoryList::clear_stories() {
  stories_.Clear();
}
inline const ::spotify::bartender::proto::Story& StoryList::stories(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.StoryList.stories)
  return stories_.Get(index);
}
inline ::spotify::bartender::proto::Story* StoryList::mutable_stories(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.StoryList.stories)
  return stories_.Mutable(index);
}
inline ::spotify::bartender::proto::Story* StoryList::add_stories() {
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.StoryList.stories)
  return stories_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::Story >&
StoryList::stories() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.StoryList.stories)
  return stories_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::Story >*
StoryList::mutable_stories() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.StoryList.stories)
  return &stories_;
}

// optional bool has_fallback = 12;
inline bool StoryList::has_has_fallback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoryList::set_has_has_fallback() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoryList::clear_has_has_fallback() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoryList::clear_has_fallback() {
  has_fallback_ = false;
  clear_has_has_fallback();
}
inline bool StoryList::has_fallback() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.StoryList.has_fallback)
  return has_fallback_;
}
inline void StoryList::set_has_fallback(bool value) {
  set_has_has_fallback();
  has_fallback_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.StoryList.has_fallback)
}

// -------------------------------------------------------------------

// Story

// optional int32 version = 1;
inline bool Story::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Story::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Story::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Story::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Story::version() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.version)
  return version_;
}
inline void Story::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Story.version)
}

// optional string story_id = 2;
inline bool Story::has_story_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Story::set_has_story_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Story::clear_has_story_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Story::clear_story_id() {
  if (story_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    story_id_->clear();
  }
  clear_has_story_id();
}
inline const ::std::string& Story::story_id() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.story_id)
  return *story_id_;
}
inline void Story::set_story_id(const ::std::string& value) {
  set_has_story_id();
  if (story_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    story_id_ = new ::std::string;
  }
  story_id_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Story.story_id)
}
inline void Story::set_story_id(const char* value) {
  set_has_story_id();
  if (story_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    story_id_ = new ::std::string;
  }
  story_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Story.story_id)
}
inline void Story::set_story_id(const char* value, size_t size) {
  set_has_story_id();
  if (story_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    story_id_ = new ::std::string;
  }
  story_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Story.story_id)
}
inline ::std::string* Story::mutable_story_id() {
  set_has_story_id();
  if (story_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    story_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Story.story_id)
  return story_id_;
}
inline ::std::string* Story::release_story_id() {
  clear_has_story_id();
  if (story_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = story_id_;
    story_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Story::set_allocated_story_id(::std::string* story_id) {
  if (story_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete story_id_;
  }
  if (story_id) {
    set_has_story_id();
    story_id_ = story_id;
  } else {
    clear_has_story_id();
    story_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Story.story_id)
}

// optional .spotify.bartender.proto.StoryType type = 3;
inline bool Story::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Story::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Story::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Story::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::spotify::bartender::proto::StoryType Story::type() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.type)
  return static_cast< ::spotify::bartender::proto::StoryType >(type_);
}
inline void Story::set_type(::spotify::bartender::proto::StoryType value) {
  assert(::spotify::bartender::proto::StoryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Story.type)
}

// optional .spotify.bartender.proto.SpotifyLink recommended_item = 5;
inline bool Story::has_recommended_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Story::set_has_recommended_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Story::clear_has_recommended_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Story::clear_recommended_item() {
  if (recommended_item_ != NULL) recommended_item_->::spotify::bartender::proto::SpotifyLink::Clear();
  clear_has_recommended_item();
}
inline const ::spotify::bartender::proto::SpotifyLink& Story::recommended_item() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.recommended_item)
  return recommended_item_ != NULL ? *recommended_item_ : *default_instance_->recommended_item_;
}
inline ::spotify::bartender::proto::SpotifyLink* Story::mutable_recommended_item() {
  set_has_recommended_item();
  if (recommended_item_ == NULL) recommended_item_ = new ::spotify::bartender::proto::SpotifyLink;
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Story.recommended_item)
  return recommended_item_;
}
inline ::spotify::bartender::proto::SpotifyLink* Story::release_recommended_item() {
  clear_has_recommended_item();
  ::spotify::bartender::proto::SpotifyLink* temp = recommended_item_;
  recommended_item_ = NULL;
  return temp;
}
inline void Story::set_allocated_recommended_item(::spotify::bartender::proto::SpotifyLink* recommended_item) {
  delete recommended_item_;
  recommended_item_ = recommended_item;
  if (recommended_item) {
    set_has_recommended_item();
  } else {
    clear_has_recommended_item();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Story.recommended_item)
}

// optional .spotify.bartender.proto.SpotifyLink recommended_item_parent = 6;
inline bool Story::has_recommended_item_parent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Story::set_has_recommended_item_parent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Story::clear_has_recommended_item_parent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Story::clear_recommended_item_parent() {
  if (recommended_item_parent_ != NULL) recommended_item_parent_->::spotify::bartender::proto::SpotifyLink::Clear();
  clear_has_recommended_item_parent();
}
inline const ::spotify::bartender::proto::SpotifyLink& Story::recommended_item_parent() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.recommended_item_parent)
  return recommended_item_parent_ != NULL ? *recommended_item_parent_ : *default_instance_->recommended_item_parent_;
}
inline ::spotify::bartender::proto::SpotifyLink* Story::mutable_recommended_item_parent() {
  set_has_recommended_item_parent();
  if (recommended_item_parent_ == NULL) recommended_item_parent_ = new ::spotify::bartender::proto::SpotifyLink;
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Story.recommended_item_parent)
  return recommended_item_parent_;
}
inline ::spotify::bartender::proto::SpotifyLink* Story::release_recommended_item_parent() {
  clear_has_recommended_item_parent();
  ::spotify::bartender::proto::SpotifyLink* temp = recommended_item_parent_;
  recommended_item_parent_ = NULL;
  return temp;
}
inline void Story::set_allocated_recommended_item_parent(::spotify::bartender::proto::SpotifyLink* recommended_item_parent) {
  delete recommended_item_parent_;
  recommended_item_parent_ = recommended_item_parent;
  if (recommended_item_parent) {
    set_has_recommended_item_parent();
  } else {
    clear_has_recommended_item_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Story.recommended_item_parent)
}

// repeated .spotify.bartender.proto.SpotifyImage hero_image = 8;
inline int Story::hero_image_size() const {
  return hero_image_.size();
}
inline void Story::clear_hero_image() {
  hero_image_.Clear();
}
inline const ::spotify::bartender::proto::SpotifyImage& Story::hero_image(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.hero_image)
  return hero_image_.Get(index);
}
inline ::spotify::bartender::proto::SpotifyImage* Story::mutable_hero_image(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Story.hero_image)
  return hero_image_.Mutable(index);
}
inline ::spotify::bartender::proto::SpotifyImage* Story::add_hero_image() {
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.Story.hero_image)
  return hero_image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >&
Story::hero_image() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.Story.hero_image)
  return hero_image_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >*
Story::mutable_hero_image() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.Story.hero_image)
  return &hero_image_;
}

// optional .spotify.bartender.proto.Metadata metadata = 9;
inline bool Story::has_metadata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Story::set_has_metadata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Story::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Story::clear_metadata() {
  if (metadata_ != NULL) metadata_->::spotify::bartender::proto::Metadata::Clear();
  clear_has_metadata();
}
inline const ::spotify::bartender::proto::Metadata& Story::metadata() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::spotify::bartender::proto::Metadata* Story::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::spotify::bartender::proto::Metadata;
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Story.metadata)
  return metadata_;
}
inline ::spotify::bartender::proto::Metadata* Story::release_metadata() {
  clear_has_metadata();
  ::spotify::bartender::proto::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Story::set_allocated_metadata(::spotify::bartender::proto::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Story.metadata)
}

// optional .spotify.bartender.proto.RichText reason_text = 10;
inline bool Story::has_reason_text() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Story::set_has_reason_text() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Story::clear_has_reason_text() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Story::clear_reason_text() {
  if (reason_text_ != NULL) reason_text_->::spotify::bartender::proto::RichText::Clear();
  clear_has_reason_text();
}
inline const ::spotify::bartender::proto::RichText& Story::reason_text() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.reason_text)
  return reason_text_ != NULL ? *reason_text_ : *default_instance_->reason_text_;
}
inline ::spotify::bartender::proto::RichText* Story::mutable_reason_text() {
  set_has_reason_text();
  if (reason_text_ == NULL) reason_text_ = new ::spotify::bartender::proto::RichText;
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Story.reason_text)
  return reason_text_;
}
inline ::spotify::bartender::proto::RichText* Story::release_reason_text() {
  clear_has_reason_text();
  ::spotify::bartender::proto::RichText* temp = reason_text_;
  reason_text_ = NULL;
  return temp;
}
inline void Story::set_allocated_reason_text(::spotify::bartender::proto::RichText* reason_text) {
  delete reason_text_;
  reason_text_ = reason_text;
  if (reason_text) {
    set_has_reason_text();
  } else {
    clear_has_reason_text();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Story.reason_text)
}

// repeated .spotify.bartender.proto.SpotifyImage reason_image = 11;
inline int Story::reason_image_size() const {
  return reason_image_.size();
}
inline void Story::clear_reason_image() {
  reason_image_.Clear();
}
inline const ::spotify::bartender::proto::SpotifyImage& Story::reason_image(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Story.reason_image)
  return reason_image_.Get(index);
}
inline ::spotify::bartender::proto::SpotifyImage* Story::mutable_reason_image(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Story.reason_image)
  return reason_image_.Mutable(index);
}
inline ::spotify::bartender::proto::SpotifyImage* Story::add_reason_image() {
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.Story.reason_image)
  return reason_image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >&
Story::reason_image() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.Story.reason_image)
  return reason_image_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >*
Story::mutable_reason_image() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.Story.reason_image)
  return &reason_image_;
}

// -------------------------------------------------------------------

// RichText

// optional string text = 1;
inline bool RichText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RichText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RichText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RichText::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& RichText::text() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.RichText.text)
  return *text_;
}
inline void RichText::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.RichText.text)
}
inline void RichText::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.RichText.text)
}
inline void RichText::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.RichText.text)
}
inline ::std::string* RichText::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.RichText.text)
  return text_;
}
inline ::std::string* RichText::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RichText::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.RichText.text)
}

// repeated .spotify.bartender.proto.RichTextField fields = 2;
inline int RichText::fields_size() const {
  return fields_.size();
}
inline void RichText::clear_fields() {
  fields_.Clear();
}
inline const ::spotify::bartender::proto::RichTextField& RichText::fields(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.RichText.fields)
  return fields_.Get(index);
}
inline ::spotify::bartender::proto::RichTextField* RichText::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.RichText.fields)
  return fields_.Mutable(index);
}
inline ::spotify::bartender::proto::RichTextField* RichText::add_fields() {
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.RichText.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::RichTextField >&
RichText::fields() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.RichText.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::RichTextField >*
RichText::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.RichText.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// RichTextField

// optional string text = 1;
inline bool RichTextField::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RichTextField::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RichTextField::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RichTextField::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& RichTextField::text() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.RichTextField.text)
  return *text_;
}
inline void RichTextField::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.RichTextField.text)
}
inline void RichTextField::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.RichTextField.text)
}
inline void RichTextField::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.RichTextField.text)
}
inline ::std::string* RichTextField::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.RichTextField.text)
  return text_;
}
inline ::std::string* RichTextField::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RichTextField::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.RichTextField.text)
}

// optional string uri = 2;
inline bool RichTextField::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RichTextField::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RichTextField::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RichTextField::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& RichTextField::uri() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.RichTextField.uri)
  return *uri_;
}
inline void RichTextField::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.RichTextField.uri)
}
inline void RichTextField::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.RichTextField.uri)
}
inline void RichTextField::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.RichTextField.uri)
}
inline ::std::string* RichTextField::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.RichTextField.uri)
  return uri_;
}
inline ::std::string* RichTextField::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RichTextField::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.RichTextField.uri)
}

// optional string url = 3;
inline bool RichTextField::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RichTextField::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RichTextField::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RichTextField::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& RichTextField::url() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.RichTextField.url)
  return *url_;
}
inline void RichTextField::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.RichTextField.url)
}
inline void RichTextField::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.RichTextField.url)
}
inline void RichTextField::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.RichTextField.url)
}
inline ::std::string* RichTextField::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.RichTextField.url)
  return url_;
}
inline ::std::string* RichTextField::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RichTextField::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.RichTextField.url)
}

// optional bool bold = 4;
inline bool RichTextField::has_bold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RichTextField::set_has_bold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RichTextField::clear_has_bold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RichTextField::clear_bold() {
  bold_ = false;
  clear_has_bold();
}
inline bool RichTextField::bold() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.RichTextField.bold)
  return bold_;
}
inline void RichTextField::set_bold(bool value) {
  set_has_bold();
  bold_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.RichTextField.bold)
}

// optional bool italic = 5;
inline bool RichTextField::has_italic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RichTextField::set_has_italic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RichTextField::clear_has_italic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RichTextField::clear_italic() {
  italic_ = false;
  clear_has_italic();
}
inline bool RichTextField::italic() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.RichTextField.italic)
  return italic_;
}
inline void RichTextField::set_italic(bool value) {
  set_has_italic();
  italic_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.RichTextField.italic)
}

// optional bool underline = 6;
inline bool RichTextField::has_underline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RichTextField::set_has_underline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RichTextField::clear_has_underline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RichTextField::clear_underline() {
  underline_ = false;
  clear_has_underline();
}
inline bool RichTextField::underline() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.RichTextField.underline)
  return underline_;
}
inline void RichTextField::set_underline(bool value) {
  set_has_underline();
  underline_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.RichTextField.underline)
}

// -------------------------------------------------------------------

// Reason

// optional .spotify.bartender.proto.ReasonType type = 1;
inline bool Reason::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reason::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reason::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reason::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::spotify::bartender::proto::ReasonType Reason::type() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Reason.type)
  return static_cast< ::spotify::bartender::proto::ReasonType >(type_);
}
inline void Reason::set_type(::spotify::bartender::proto::ReasonType value) {
  assert(::spotify::bartender::proto::ReasonType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Reason.type)
}

// repeated .spotify.bartender.proto.SpotifyLink sample_criteria = 2;
inline int Reason::sample_criteria_size() const {
  return sample_criteria_.size();
}
inline void Reason::clear_sample_criteria() {
  sample_criteria_.Clear();
}
inline const ::spotify::bartender::proto::SpotifyLink& Reason::sample_criteria(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Reason.sample_criteria)
  return sample_criteria_.Get(index);
}
inline ::spotify::bartender::proto::SpotifyLink* Reason::mutable_sample_criteria(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Reason.sample_criteria)
  return sample_criteria_.Mutable(index);
}
inline ::spotify::bartender::proto::SpotifyLink* Reason::add_sample_criteria() {
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.Reason.sample_criteria)
  return sample_criteria_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyLink >&
Reason::sample_criteria() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.Reason.sample_criteria)
  return sample_criteria_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyLink >*
Reason::mutable_sample_criteria() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.Reason.sample_criteria)
  return &sample_criteria_;
}

// optional int32 criteria_count = 3;
inline bool Reason::has_criteria_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reason::set_has_criteria_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reason::clear_has_criteria_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reason::clear_criteria_count() {
  criteria_count_ = 0;
  clear_has_criteria_count();
}
inline ::google::protobuf::int32 Reason::criteria_count() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Reason.criteria_count)
  return criteria_count_;
}
inline void Reason::set_criteria_count(::google::protobuf::int32 value) {
  set_has_criteria_count();
  criteria_count_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Reason.criteria_count)
}

// repeated .spotify.bartender.proto.ReasonType reason_type = 4;
inline int Reason::reason_type_size() const {
  return reason_type_.size();
}
inline void Reason::clear_reason_type() {
  reason_type_.Clear();
}
inline ::spotify::bartender::proto::ReasonType Reason::reason_type(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Reason.reason_type)
  return static_cast< ::spotify::bartender::proto::ReasonType >(reason_type_.Get(index));
}
inline void Reason::set_reason_type(int index, ::spotify::bartender::proto::ReasonType value) {
  assert(::spotify::bartender::proto::ReasonType_IsValid(value));
  reason_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Reason.reason_type)
}
inline void Reason::add_reason_type(::spotify::bartender::proto::ReasonType value) {
  assert(::spotify::bartender::proto::ReasonType_IsValid(value));
  reason_type_.Add(value);
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.Reason.reason_type)
}
inline const ::google::protobuf::RepeatedField<int>&
Reason::reason_type() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.Reason.reason_type)
  return reason_type_;
}
inline ::google::protobuf::RepeatedField<int>*
Reason::mutable_reason_type() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.Reason.reason_type)
  return &reason_type_;
}

// -------------------------------------------------------------------

// SpotifyLink

// optional string uri = 1;
inline bool SpotifyLink::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpotifyLink::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpotifyLink::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpotifyLink::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& SpotifyLink::uri() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyLink.uri)
  return *uri_;
}
inline void SpotifyLink::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.SpotifyLink.uri)
}
inline void SpotifyLink::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.SpotifyLink.uri)
}
inline void SpotifyLink::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.SpotifyLink.uri)
}
inline ::std::string* SpotifyLink::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.SpotifyLink.uri)
  return uri_;
}
inline ::std::string* SpotifyLink::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpotifyLink::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.SpotifyLink.uri)
}

// optional string display_name = 2;
inline bool SpotifyLink::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpotifyLink::set_has_display_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpotifyLink::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpotifyLink::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& SpotifyLink::display_name() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyLink.display_name)
  return *display_name_;
}
inline void SpotifyLink::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.SpotifyLink.display_name)
}
inline void SpotifyLink::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.SpotifyLink.display_name)
}
inline void SpotifyLink::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.SpotifyLink.display_name)
}
inline ::std::string* SpotifyLink::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.SpotifyLink.display_name)
  return display_name_;
}
inline ::std::string* SpotifyLink::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpotifyLink::set_allocated_display_name(::std::string* display_name) {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.SpotifyLink.display_name)
}

// optional .spotify.bartender.proto.SpotifyLink parent = 3;
inline bool SpotifyLink::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpotifyLink::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpotifyLink::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpotifyLink::clear_parent() {
  if (parent_ != NULL) parent_->::spotify::bartender::proto::SpotifyLink::Clear();
  clear_has_parent();
}
inline const ::spotify::bartender::proto::SpotifyLink& SpotifyLink::parent() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyLink.parent)
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::spotify::bartender::proto::SpotifyLink* SpotifyLink::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::spotify::bartender::proto::SpotifyLink;
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.SpotifyLink.parent)
  return parent_;
}
inline ::spotify::bartender::proto::SpotifyLink* SpotifyLink::release_parent() {
  clear_has_parent();
  ::spotify::bartender::proto::SpotifyLink* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline void SpotifyLink::set_allocated_parent(::spotify::bartender::proto::SpotifyLink* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.SpotifyLink.parent)
}

// repeated .spotify.bartender.proto.SpotifyAudioPreview preview = 6;
inline int SpotifyLink::preview_size() const {
  return preview_.size();
}
inline void SpotifyLink::clear_preview() {
  preview_.Clear();
}
inline const ::spotify::bartender::proto::SpotifyAudioPreview& SpotifyLink::preview(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyLink.preview)
  return preview_.Get(index);
}
inline ::spotify::bartender::proto::SpotifyAudioPreview* SpotifyLink::mutable_preview(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.SpotifyLink.preview)
  return preview_.Mutable(index);
}
inline ::spotify::bartender::proto::SpotifyAudioPreview* SpotifyLink::add_preview() {
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.SpotifyLink.preview)
  return preview_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyAudioPreview >&
SpotifyLink::preview() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.SpotifyLink.preview)
  return preview_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyAudioPreview >*
SpotifyLink::mutable_preview() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.SpotifyLink.preview)
  return &preview_;
}

// -------------------------------------------------------------------

// SpotifyAudioPreview

// optional string uri = 1;
inline bool SpotifyAudioPreview::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpotifyAudioPreview::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpotifyAudioPreview::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpotifyAudioPreview::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& SpotifyAudioPreview::uri() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyAudioPreview.uri)
  return *uri_;
}
inline void SpotifyAudioPreview::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.SpotifyAudioPreview.uri)
}
inline void SpotifyAudioPreview::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.SpotifyAudioPreview.uri)
}
inline void SpotifyAudioPreview::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.SpotifyAudioPreview.uri)
}
inline ::std::string* SpotifyAudioPreview::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.SpotifyAudioPreview.uri)
  return uri_;
}
inline ::std::string* SpotifyAudioPreview::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpotifyAudioPreview::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.SpotifyAudioPreview.uri)
}

// optional string file_id = 2;
inline bool SpotifyAudioPreview::has_file_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpotifyAudioPreview::set_has_file_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpotifyAudioPreview::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpotifyAudioPreview::clear_file_id() {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_->clear();
  }
  clear_has_file_id();
}
inline const ::std::string& SpotifyAudioPreview::file_id() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyAudioPreview.file_id)
  return *file_id_;
}
inline void SpotifyAudioPreview::set_file_id(const ::std::string& value) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.SpotifyAudioPreview.file_id)
}
inline void SpotifyAudioPreview::set_file_id(const char* value) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.SpotifyAudioPreview.file_id)
}
inline void SpotifyAudioPreview::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.SpotifyAudioPreview.file_id)
}
inline ::std::string* SpotifyAudioPreview::mutable_file_id() {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.SpotifyAudioPreview.file_id)
  return file_id_;
}
inline ::std::string* SpotifyAudioPreview::release_file_id() {
  clear_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_id_;
    file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpotifyAudioPreview::set_allocated_file_id(::std::string* file_id) {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_id_;
  }
  if (file_id) {
    set_has_file_id();
    file_id_ = file_id;
  } else {
    clear_has_file_id();
    file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.SpotifyAudioPreview.file_id)
}

// -------------------------------------------------------------------

// SpotifyImage

// optional string uri = 1;
inline bool SpotifyImage::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpotifyImage::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpotifyImage::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpotifyImage::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& SpotifyImage::uri() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyImage.uri)
  return *uri_;
}
inline void SpotifyImage::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.SpotifyImage.uri)
}
inline void SpotifyImage::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.SpotifyImage.uri)
}
inline void SpotifyImage::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.SpotifyImage.uri)
}
inline ::std::string* SpotifyImage::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.SpotifyImage.uri)
  return uri_;
}
inline ::std::string* SpotifyImage::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpotifyImage::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.SpotifyImage.uri)
}

// optional string file_id = 2;
inline bool SpotifyImage::has_file_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpotifyImage::set_has_file_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpotifyImage::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpotifyImage::clear_file_id() {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_->clear();
  }
  clear_has_file_id();
}
inline const ::std::string& SpotifyImage::file_id() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyImage.file_id)
  return *file_id_;
}
inline void SpotifyImage::set_file_id(const ::std::string& value) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.SpotifyImage.file_id)
}
inline void SpotifyImage::set_file_id(const char* value) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.SpotifyImage.file_id)
}
inline void SpotifyImage::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  file_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.SpotifyImage.file_id)
}
inline ::std::string* SpotifyImage::mutable_file_id() {
  set_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.SpotifyImage.file_id)
  return file_id_;
}
inline ::std::string* SpotifyImage::release_file_id() {
  clear_has_file_id();
  if (file_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_id_;
    file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpotifyImage::set_allocated_file_id(::std::string* file_id) {
  if (file_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_id_;
  }
  if (file_id) {
    set_has_file_id();
    file_id_ = file_id;
  } else {
    clear_has_file_id();
    file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.SpotifyImage.file_id)
}

// optional int32 width = 3;
inline bool SpotifyImage::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpotifyImage::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpotifyImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpotifyImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 SpotifyImage::width() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyImage.width)
  return width_;
}
inline void SpotifyImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.SpotifyImage.width)
}

// optional int32 height = 4;
inline bool SpotifyImage::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpotifyImage::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpotifyImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpotifyImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 SpotifyImage::height() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.SpotifyImage.height)
  return height_;
}
inline void SpotifyImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.SpotifyImage.height)
}

// -------------------------------------------------------------------

// Metadata

// optional string id = 1;
inline bool Metadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metadata::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Metadata::id() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.id)
  return *id_;
}
inline void Metadata::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.id)
}
inline void Metadata::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Metadata.id)
}
inline void Metadata::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Metadata.id)
}
inline ::std::string* Metadata::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.id)
  return id_;
}
inline ::std::string* Metadata::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Metadata::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.id)
}

// optional string app = 2;
inline bool Metadata::has_app() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metadata::set_has_app() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metadata::clear_has_app() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metadata::clear_app() {
  if (app_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_->clear();
  }
  clear_has_app();
}
inline const ::std::string& Metadata::app() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.app)
  return *app_;
}
inline void Metadata::set_app(const ::std::string& value) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ = new ::std::string;
  }
  app_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.app)
}
inline void Metadata::set_app(const char* value) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ = new ::std::string;
  }
  app_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Metadata.app)
}
inline void Metadata::set_app(const char* value, size_t size) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ = new ::std::string;
  }
  app_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Metadata.app)
}
inline ::std::string* Metadata::mutable_app() {
  set_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.app)
  return app_;
}
inline ::std::string* Metadata::release_app() {
  clear_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_;
    app_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Metadata::set_allocated_app(::std::string* app) {
  if (app_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_;
  }
  if (app) {
    set_has_app();
    app_ = app;
  } else {
    clear_has_app();
    app_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.app)
}

// optional .spotify.bartender.proto.MetadataType type = 3;
inline bool Metadata::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Metadata::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Metadata::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Metadata::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::spotify::bartender::proto::MetadataType Metadata::type() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.type)
  return static_cast< ::spotify::bartender::proto::MetadataType >(type_);
}
inline void Metadata::set_type(::spotify::bartender::proto::MetadataType value) {
  assert(::spotify::bartender::proto::MetadataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.type)
}

// optional string title = 4;
inline bool Metadata::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Metadata::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Metadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Metadata::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Metadata::title() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.title)
  return *title_;
}
inline void Metadata::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.title)
}
inline void Metadata::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Metadata.title)
}
inline void Metadata::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Metadata.title)
}
inline ::std::string* Metadata::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.title)
  return title_;
}
inline ::std::string* Metadata::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Metadata::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.title)
}

// optional string summary = 5;
inline bool Metadata::has_summary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Metadata::set_has_summary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Metadata::clear_has_summary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Metadata::clear_summary() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& Metadata::summary() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.summary)
  return *summary_;
}
inline void Metadata::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.summary)
}
inline void Metadata::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Metadata.summary)
}
inline void Metadata::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Metadata.summary)
}
inline ::std::string* Metadata::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.summary)
  return summary_;
}
inline ::std::string* Metadata::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Metadata::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.summary)
}

// optional string favicon_url = 6;
inline bool Metadata::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Metadata::set_has_favicon_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Metadata::clear_has_favicon_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Metadata::clear_favicon_url() {
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    favicon_url_->clear();
  }
  clear_has_favicon_url();
}
inline const ::std::string& Metadata::favicon_url() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.favicon_url)
  return *favicon_url_;
}
inline void Metadata::set_favicon_url(const ::std::string& value) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.favicon_url)
}
inline void Metadata::set_favicon_url(const char* value) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Metadata.favicon_url)
}
inline void Metadata::set_favicon_url(const char* value, size_t size) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Metadata.favicon_url)
}
inline ::std::string* Metadata::mutable_favicon_url() {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    favicon_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.favicon_url)
  return favicon_url_;
}
inline ::std::string* Metadata::release_favicon_url() {
  clear_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = favicon_url_;
    favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Metadata::set_allocated_favicon_url(::std::string* favicon_url) {
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete favicon_url_;
  }
  if (favicon_url) {
    set_has_favicon_url();
    favicon_url_ = favicon_url;
  } else {
    clear_has_favicon_url();
    favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.favicon_url)
}

// optional string external_url = 7;
inline bool Metadata::has_external_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Metadata::set_has_external_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Metadata::clear_has_external_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Metadata::clear_external_url() {
  if (external_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    external_url_->clear();
  }
  clear_has_external_url();
}
inline const ::std::string& Metadata::external_url() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.external_url)
  return *external_url_;
}
inline void Metadata::set_external_url(const ::std::string& value) {
  set_has_external_url();
  if (external_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    external_url_ = new ::std::string;
  }
  external_url_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.external_url)
}
inline void Metadata::set_external_url(const char* value) {
  set_has_external_url();
  if (external_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    external_url_ = new ::std::string;
  }
  external_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Metadata.external_url)
}
inline void Metadata::set_external_url(const char* value, size_t size) {
  set_has_external_url();
  if (external_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    external_url_ = new ::std::string;
  }
  external_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Metadata.external_url)
}
inline ::std::string* Metadata::mutable_external_url() {
  set_has_external_url();
  if (external_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    external_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.external_url)
  return external_url_;
}
inline ::std::string* Metadata::release_external_url() {
  clear_has_external_url();
  if (external_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = external_url_;
    external_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Metadata::set_allocated_external_url(::std::string* external_url) {
  if (external_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete external_url_;
  }
  if (external_url) {
    set_has_external_url();
    external_url_ = external_url;
  } else {
    clear_has_external_url();
    external_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.external_url)
}

// optional string internal_uri = 8;
inline bool Metadata::has_internal_uri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Metadata::set_has_internal_uri() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Metadata::clear_has_internal_uri() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Metadata::clear_internal_uri() {
  if (internal_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internal_uri_->clear();
  }
  clear_has_internal_uri();
}
inline const ::std::string& Metadata::internal_uri() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.internal_uri)
  return *internal_uri_;
}
inline void Metadata::set_internal_uri(const ::std::string& value) {
  set_has_internal_uri();
  if (internal_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internal_uri_ = new ::std::string;
  }
  internal_uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.internal_uri)
}
inline void Metadata::set_internal_uri(const char* value) {
  set_has_internal_uri();
  if (internal_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internal_uri_ = new ::std::string;
  }
  internal_uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Metadata.internal_uri)
}
inline void Metadata::set_internal_uri(const char* value, size_t size) {
  set_has_internal_uri();
  if (internal_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internal_uri_ = new ::std::string;
  }
  internal_uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Metadata.internal_uri)
}
inline ::std::string* Metadata::mutable_internal_uri() {
  set_has_internal_uri();
  if (internal_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internal_uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.internal_uri)
  return internal_uri_;
}
inline ::std::string* Metadata::release_internal_uri() {
  clear_has_internal_uri();
  if (internal_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = internal_uri_;
    internal_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Metadata::set_allocated_internal_uri(::std::string* internal_uri) {
  if (internal_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete internal_uri_;
  }
  if (internal_uri) {
    set_has_internal_uri();
    internal_uri_ = internal_uri;
  } else {
    clear_has_internal_uri();
    internal_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.internal_uri)
}

// optional int32 dtpublished = 9;
inline bool Metadata::has_dtpublished() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Metadata::set_has_dtpublished() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Metadata::clear_has_dtpublished() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Metadata::clear_dtpublished() {
  dtpublished_ = 0;
  clear_has_dtpublished();
}
inline ::google::protobuf::int32 Metadata::dtpublished() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.dtpublished)
  return dtpublished_;
}
inline void Metadata::set_dtpublished(::google::protobuf::int32 value) {
  set_has_dtpublished();
  dtpublished_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.dtpublished)
}

// optional int32 dtexpiry = 10;
inline bool Metadata::has_dtexpiry() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Metadata::set_has_dtexpiry() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Metadata::clear_has_dtexpiry() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Metadata::clear_dtexpiry() {
  dtexpiry_ = 0;
  clear_has_dtexpiry();
}
inline ::google::protobuf::int32 Metadata::dtexpiry() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.dtexpiry)
  return dtexpiry_;
}
inline void Metadata::set_dtexpiry(::google::protobuf::int32 value) {
  set_has_dtexpiry();
  dtexpiry_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.dtexpiry)
}

// optional .spotify.bartender.proto.SpotifyLink author = 11;
inline bool Metadata::has_author() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Metadata::set_has_author() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Metadata::clear_has_author() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Metadata::clear_author() {
  if (author_ != NULL) author_->::spotify::bartender::proto::SpotifyLink::Clear();
  clear_has_author();
}
inline const ::spotify::bartender::proto::SpotifyLink& Metadata::author() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.author)
  return author_ != NULL ? *author_ : *default_instance_->author_;
}
inline ::spotify::bartender::proto::SpotifyLink* Metadata::mutable_author() {
  set_has_author();
  if (author_ == NULL) author_ = new ::spotify::bartender::proto::SpotifyLink;
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.author)
  return author_;
}
inline ::spotify::bartender::proto::SpotifyLink* Metadata::release_author() {
  clear_has_author();
  ::spotify::bartender::proto::SpotifyLink* temp = author_;
  author_ = NULL;
  return temp;
}
inline void Metadata::set_allocated_author(::spotify::bartender::proto::SpotifyLink* author) {
  delete author_;
  author_ = author;
  if (author) {
    set_has_author();
  } else {
    clear_has_author();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.author)
}

// repeated int32 score = 12;
inline int Metadata::score_size() const {
  return score_.size();
}
inline void Metadata::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 Metadata::score(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.score)
  return score_.Get(index);
}
inline void Metadata::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.score)
}
inline void Metadata::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.Metadata.score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Metadata::score() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.Metadata.score)
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Metadata::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.Metadata.score)
  return &score_;
}

// repeated .spotify.bartender.proto.ScoreType score_type = 13;
inline int Metadata::score_type_size() const {
  return score_type_.size();
}
inline void Metadata::clear_score_type() {
  score_type_.Clear();
}
inline ::spotify::bartender::proto::ScoreType Metadata::score_type(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.score_type)
  return static_cast< ::spotify::bartender::proto::ScoreType >(score_type_.Get(index));
}
inline void Metadata::set_score_type(int index, ::spotify::bartender::proto::ScoreType value) {
  assert(::spotify::bartender::proto::ScoreType_IsValid(value));
  score_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.score_type)
}
inline void Metadata::add_score_type(::spotify::bartender::proto::ScoreType value) {
  assert(::spotify::bartender::proto::ScoreType_IsValid(value));
  score_type_.Add(value);
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.Metadata.score_type)
}
inline const ::google::protobuf::RepeatedField<int>&
Metadata::score_type() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.Metadata.score_type)
  return score_type_;
}
inline ::google::protobuf::RepeatedField<int>*
Metadata::mutable_score_type() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.Metadata.score_type)
  return &score_type_;
}

// optional .spotify.bartender.proto.ConcertData concert_data = 14;
inline bool Metadata::has_concert_data() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Metadata::set_has_concert_data() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Metadata::clear_has_concert_data() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Metadata::clear_concert_data() {
  if (concert_data_ != NULL) concert_data_->::spotify::bartender::proto::ConcertData::Clear();
  clear_has_concert_data();
}
inline const ::spotify::bartender::proto::ConcertData& Metadata::concert_data() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.concert_data)
  return concert_data_ != NULL ? *concert_data_ : *default_instance_->concert_data_;
}
inline ::spotify::bartender::proto::ConcertData* Metadata::mutable_concert_data() {
  set_has_concert_data();
  if (concert_data_ == NULL) concert_data_ = new ::spotify::bartender::proto::ConcertData;
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.concert_data)
  return concert_data_;
}
inline ::spotify::bartender::proto::ConcertData* Metadata::release_concert_data() {
  clear_has_concert_data();
  ::spotify::bartender::proto::ConcertData* temp = concert_data_;
  concert_data_ = NULL;
  return temp;
}
inline void Metadata::set_allocated_concert_data(::spotify::bartender::proto::ConcertData* concert_data) {
  delete concert_data_;
  concert_data_ = concert_data;
  if (concert_data) {
    set_has_concert_data();
  } else {
    clear_has_concert_data();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Metadata.concert_data)
}

// repeated string item_uri = 15;
inline int Metadata::item_uri_size() const {
  return item_uri_.size();
}
inline void Metadata::clear_item_uri() {
  item_uri_.Clear();
}
inline const ::std::string& Metadata::item_uri(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.item_uri)
  return item_uri_.Get(index);
}
inline ::std::string* Metadata::mutable_item_uri(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.item_uri)
  return item_uri_.Mutable(index);
}
inline void Metadata::set_item_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Metadata.item_uri)
  item_uri_.Mutable(index)->assign(value);
}
inline void Metadata::set_item_uri(int index, const char* value) {
  item_uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Metadata.item_uri)
}
inline void Metadata::set_item_uri(int index, const char* value, size_t size) {
  item_uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Metadata.item_uri)
}
inline ::std::string* Metadata::add_item_uri() {
  return item_uri_.Add();
}
inline void Metadata::add_item_uri(const ::std::string& value) {
  item_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.Metadata.item_uri)
}
inline void Metadata::add_item_uri(const char* value) {
  item_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spotify.bartender.proto.Metadata.item_uri)
}
inline void Metadata::add_item_uri(const char* value, size_t size) {
  item_uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spotify.bartender.proto.Metadata.item_uri)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Metadata::item_uri() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.Metadata.item_uri)
  return item_uri_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Metadata::mutable_item_uri() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.Metadata.item_uri)
  return &item_uri_;
}

// repeated .spotify.bartender.proto.SpotifyImage image = 16;
inline int Metadata::image_size() const {
  return image_.size();
}
inline void Metadata::clear_image() {
  image_.Clear();
}
inline const ::spotify::bartender::proto::SpotifyImage& Metadata::image(int index) const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Metadata.image)
  return image_.Get(index);
}
inline ::spotify::bartender::proto::SpotifyImage* Metadata::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Metadata.image)
  return image_.Mutable(index);
}
inline ::spotify::bartender::proto::SpotifyImage* Metadata::add_image() {
  // @@protoc_insertion_point(field_add:spotify.bartender.proto.Metadata.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >&
Metadata::image() const {
  // @@protoc_insertion_point(field_list:spotify.bartender.proto.Metadata.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::spotify::bartender::proto::SpotifyImage >*
Metadata::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:spotify.bartender.proto.Metadata.image)
  return &image_;
}

// -------------------------------------------------------------------

// ConcertData

// optional int32 dtstart = 1;
inline bool ConcertData::has_dtstart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcertData::set_has_dtstart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcertData::clear_has_dtstart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcertData::clear_dtstart() {
  dtstart_ = 0;
  clear_has_dtstart();
}
inline ::google::protobuf::int32 ConcertData::dtstart() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.ConcertData.dtstart)
  return dtstart_;
}
inline void ConcertData::set_dtstart(::google::protobuf::int32 value) {
  set_has_dtstart();
  dtstart_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.ConcertData.dtstart)
}

// optional int32 dtend = 2;
inline bool ConcertData::has_dtend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcertData::set_has_dtend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcertData::clear_has_dtend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcertData::clear_dtend() {
  dtend_ = 0;
  clear_has_dtend();
}
inline ::google::protobuf::int32 ConcertData::dtend() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.ConcertData.dtend)
  return dtend_;
}
inline void ConcertData::set_dtend(::google::protobuf::int32 value) {
  set_has_dtend();
  dtend_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.ConcertData.dtend)
}

// optional .spotify.bartender.proto.Location location = 3;
inline bool ConcertData::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConcertData::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConcertData::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConcertData::clear_location() {
  if (location_ != NULL) location_->::spotify::bartender::proto::Location::Clear();
  clear_has_location();
}
inline const ::spotify::bartender::proto::Location& ConcertData::location() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.ConcertData.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::spotify::bartender::proto::Location* ConcertData::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::spotify::bartender::proto::Location;
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.ConcertData.location)
  return location_;
}
inline ::spotify::bartender::proto::Location* ConcertData::release_location() {
  clear_has_location();
  ::spotify::bartender::proto::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void ConcertData::set_allocated_location(::spotify::bartender::proto::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.ConcertData.location)
}

// -------------------------------------------------------------------

// Location

// optional string name = 1;
inline bool Location::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Location::name() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Location.name)
  return *name_;
}
inline void Location::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Location.name)
}
inline void Location::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Location.name)
}
inline void Location::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Location.name)
}
inline ::std::string* Location::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Location.name)
  return name_;
}
inline ::std::string* Location::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Location::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Location.name)
}

// optional string city = 2;
inline bool Location::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& Location::city() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Location.city)
  return *city_;
}
inline void Location::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Location.city)
}
inline void Location::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.Location.city)
}
inline void Location::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.Location.city)
}
inline ::std::string* Location::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.Location.city)
  return city_;
}
inline ::std::string* Location::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Location::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.Location.city)
}

// optional double lat = 3;
inline bool Location::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Location::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Location::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Location::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double Location::lat() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Location.lat)
  return lat_;
}
inline void Location::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Location.lat)
}

// optional double lng = 4;
inline bool Location::has_lng() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Location::set_has_lng() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Location::clear_has_lng() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Location::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline double Location::lng() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.Location.lng)
  return lng_;
}
inline void Location::set_lng(double value) {
  set_has_lng();
  lng_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.Location.lng)
}

// -------------------------------------------------------------------

// DiscoveredPlaylist

// optional string uri = 1;
inline bool DiscoveredPlaylist::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiscoveredPlaylist::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiscoveredPlaylist::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiscoveredPlaylist::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& DiscoveredPlaylist::uri() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.DiscoveredPlaylist.uri)
  return *uri_;
}
inline void DiscoveredPlaylist::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.DiscoveredPlaylist.uri)
}
inline void DiscoveredPlaylist::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:spotify.bartender.proto.DiscoveredPlaylist.uri)
}
inline void DiscoveredPlaylist::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spotify.bartender.proto.DiscoveredPlaylist.uri)
}
inline ::std::string* DiscoveredPlaylist::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:spotify.bartender.proto.DiscoveredPlaylist.uri)
  return uri_;
}
inline ::std::string* DiscoveredPlaylist::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DiscoveredPlaylist::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:spotify.bartender.proto.DiscoveredPlaylist.uri)
}

// -------------------------------------------------------------------

// DiscoverNux

// optional int32 seen = 1;
inline bool DiscoverNux::has_seen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiscoverNux::set_has_seen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiscoverNux::clear_has_seen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiscoverNux::clear_seen() {
  seen_ = 0;
  clear_has_seen();
}
inline ::google::protobuf::int32 DiscoverNux::seen() const {
  // @@protoc_insertion_point(field_get:spotify.bartender.proto.DiscoverNux.seen)
  return seen_;
}
inline void DiscoverNux::set_seen(::google::protobuf::int32 value) {
  set_has_seen();
  seen_ = value;
  // @@protoc_insertion_point(field_set:spotify.bartender.proto.DiscoverNux.seen)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace bartender
}  // namespace spotify

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spotify::bartender::proto::StoryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::bartender::proto::StoryType>() {
  return ::spotify::bartender::proto::StoryType_descriptor();
}
template <> struct is_proto_enum< ::spotify::bartender::proto::ReasonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::bartender::proto::ReasonType>() {
  return ::spotify::bartender::proto::ReasonType_descriptor();
}
template <> struct is_proto_enum< ::spotify::bartender::proto::MetadataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::bartender::proto::MetadataType>() {
  return ::spotify::bartender::proto::MetadataType_descriptor();
}
template <> struct is_proto_enum< ::spotify::bartender::proto::ScoreType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spotify::bartender::proto::ScoreType>() {
  return ::spotify::bartender::proto::ScoreType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bartender_2eproto__INCLUDED
