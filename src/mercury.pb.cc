// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mercury.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mercury.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spotify {
namespace mercury {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* MercuryMultiGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercuryMultiGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercuryMultiGetReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercuryMultiGetReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercuryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercuryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercuryReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercuryReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MercuryReply_CachePolicy_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserField_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mercury_2eproto() {
  protobuf_AddDesc_mercury_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mercury.proto");
  GOOGLE_CHECK(file != NULL);
  MercuryMultiGetRequest_descriptor_ = file->message_type(0);
  static const int MercuryMultiGetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryMultiGetRequest, request_),
  };
  MercuryMultiGetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercuryMultiGetRequest_descriptor_,
      MercuryMultiGetRequest::default_instance_,
      MercuryMultiGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryMultiGetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryMultiGetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercuryMultiGetRequest));
  MercuryMultiGetReply_descriptor_ = file->message_type(1);
  static const int MercuryMultiGetReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryMultiGetReply, reply_),
  };
  MercuryMultiGetReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercuryMultiGetReply_descriptor_,
      MercuryMultiGetReply::default_instance_,
      MercuryMultiGetReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryMultiGetReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryMultiGetReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercuryMultiGetReply));
  MercuryRequest_descriptor_ = file->message_type(2);
  static const int MercuryRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryRequest, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryRequest, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryRequest, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryRequest, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryRequest, user_fields_),
  };
  MercuryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercuryRequest_descriptor_,
      MercuryRequest::default_instance_,
      MercuryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercuryRequest));
  MercuryReply_descriptor_ = file->message_type(3);
  static const int MercuryReply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, status_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, cache_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, etag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, body_),
  };
  MercuryReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercuryReply_descriptor_,
      MercuryReply::default_instance_,
      MercuryReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercuryReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercuryReply));
  MercuryReply_CachePolicy_descriptor_ = MercuryReply_descriptor_->enum_type(0);
  UserField_descriptor_ = file->message_type(4);
  static const int UserField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserField, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserField, value_),
  };
  UserField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserField_descriptor_,
      UserField::default_instance_,
      UserField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserField));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mercury_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercuryMultiGetRequest_descriptor_, &MercuryMultiGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercuryMultiGetReply_descriptor_, &MercuryMultiGetReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercuryRequest_descriptor_, &MercuryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercuryReply_descriptor_, &MercuryReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserField_descriptor_, &UserField::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mercury_2eproto() {
  delete MercuryMultiGetRequest::default_instance_;
  delete MercuryMultiGetRequest_reflection_;
  delete MercuryMultiGetReply::default_instance_;
  delete MercuryMultiGetReply_reflection_;
  delete MercuryRequest::default_instance_;
  delete MercuryRequest_reflection_;
  delete MercuryReply::default_instance_;
  delete MercuryReply_reflection_;
  delete UserField::default_instance_;
  delete UserField_reflection_;
}

void protobuf_AddDesc_mercury_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmercury.proto\022\025spotify.mercury.proto\"P"
    "\n\026MercuryMultiGetRequest\0226\n\007request\030\001 \003("
    "\0132%.spotify.mercury.proto.MercuryRequest"
    "\"J\n\024MercuryMultiGetReply\0222\n\005reply\030\001 \003(\0132"
    "#.spotify.mercury.proto.MercuryReply\"\237\001\n"
    "\016MercuryRequest\022\013\n\003uri\030\001 \001(\t\022\024\n\014content_"
    "type\030\002 \001(\t\022\016\n\006method\030\003 \001(\t\022\023\n\013status_cod"
    "e\030\004 \001(\021\022\016\n\006source\030\005 \001(\t\0225\n\013user_fields\030\006"
    " \003(\0132 .spotify.mercury.proto.UserField\"\203"
    "\002\n\014MercuryReply\022\023\n\013status_code\030\001 \001(\021\022\026\n\016"
    "status_message\030\002 \001(\t\022E\n\014cache_policy\030\003 \001"
    "(\0162/.spotify.mercury.proto.MercuryReply."
    "CachePolicy\022\013\n\003ttl\030\004 \001(\021\022\014\n\004etag\030\005 \001(\014\022\024"
    "\n\014content_type\030\006 \001(\014\022\014\n\004body\030\007 \001(\014\"@\n\013Ca"
    "chePolicy\022\014\n\010CACHE_NO\020\001\022\021\n\rCACHE_PRIVATE"
    "\020\002\022\020\n\014CACHE_PUBLIC\020\003\"(\n\tUserField\022\014\n\004nam"
    "e\030\001 \001(\t\022\r\n\005value\030\002 \001(\014", 662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mercury.proto", &protobuf_RegisterTypes);
  MercuryMultiGetRequest::default_instance_ = new MercuryMultiGetRequest();
  MercuryMultiGetReply::default_instance_ = new MercuryMultiGetReply();
  MercuryRequest::default_instance_ = new MercuryRequest();
  MercuryReply::default_instance_ = new MercuryReply();
  UserField::default_instance_ = new UserField();
  MercuryMultiGetRequest::default_instance_->InitAsDefaultInstance();
  MercuryMultiGetReply::default_instance_->InitAsDefaultInstance();
  MercuryRequest::default_instance_->InitAsDefaultInstance();
  MercuryReply::default_instance_->InitAsDefaultInstance();
  UserField::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mercury_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mercury_2eproto {
  StaticDescriptorInitializer_mercury_2eproto() {
    protobuf_AddDesc_mercury_2eproto();
  }
} static_descriptor_initializer_mercury_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MercuryMultiGetRequest::kRequestFieldNumber;
#endif  // !_MSC_VER

MercuryMultiGetRequest::MercuryMultiGetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.mercury.proto.MercuryMultiGetRequest)
}

void MercuryMultiGetRequest::InitAsDefaultInstance() {
}

MercuryMultiGetRequest::MercuryMultiGetRequest(const MercuryMultiGetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.mercury.proto.MercuryMultiGetRequest)
}

void MercuryMultiGetRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercuryMultiGetRequest::~MercuryMultiGetRequest() {
  // @@protoc_insertion_point(destructor:spotify.mercury.proto.MercuryMultiGetRequest)
  SharedDtor();
}

void MercuryMultiGetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercuryMultiGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercuryMultiGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercuryMultiGetRequest_descriptor_;
}

const MercuryMultiGetRequest& MercuryMultiGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercury_2eproto();
  return *default_instance_;
}

MercuryMultiGetRequest* MercuryMultiGetRequest::default_instance_ = NULL;

MercuryMultiGetRequest* MercuryMultiGetRequest::New() const {
  return new MercuryMultiGetRequest;
}

void MercuryMultiGetRequest::Clear() {
  request_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercuryMultiGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.mercury.proto.MercuryMultiGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spotify.mercury.proto.MercuryRequest request = 1;
      case 1: {
        if (tag == 10) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_request;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.mercury.proto.MercuryMultiGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.mercury.proto.MercuryMultiGetRequest)
  return false;
#undef DO_
}

void MercuryMultiGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.mercury.proto.MercuryMultiGetRequest)
  // repeated .spotify.mercury.proto.MercuryRequest request = 1;
  for (int i = 0; i < this->request_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.mercury.proto.MercuryMultiGetRequest)
}

::google::protobuf::uint8* MercuryMultiGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.mercury.proto.MercuryMultiGetRequest)
  // repeated .spotify.mercury.proto.MercuryRequest request = 1;
  for (int i = 0; i < this->request_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.mercury.proto.MercuryMultiGetRequest)
  return target;
}

int MercuryMultiGetRequest::ByteSize() const {
  int total_size = 0;

  // repeated .spotify.mercury.proto.MercuryRequest request = 1;
  total_size += 1 * this->request_size();
  for (int i = 0; i < this->request_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->request(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercuryMultiGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercuryMultiGetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercuryMultiGetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercuryMultiGetRequest::MergeFrom(const MercuryMultiGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  request_.MergeFrom(from.request_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercuryMultiGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercuryMultiGetRequest::CopyFrom(const MercuryMultiGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercuryMultiGetRequest::IsInitialized() const {

  return true;
}

void MercuryMultiGetRequest::Swap(MercuryMultiGetRequest* other) {
  if (other != this) {
    request_.Swap(&other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercuryMultiGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercuryMultiGetRequest_descriptor_;
  metadata.reflection = MercuryMultiGetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MercuryMultiGetReply::kReplyFieldNumber;
#endif  // !_MSC_VER

MercuryMultiGetReply::MercuryMultiGetReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.mercury.proto.MercuryMultiGetReply)
}

void MercuryMultiGetReply::InitAsDefaultInstance() {
}

MercuryMultiGetReply::MercuryMultiGetReply(const MercuryMultiGetReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.mercury.proto.MercuryMultiGetReply)
}

void MercuryMultiGetReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercuryMultiGetReply::~MercuryMultiGetReply() {
  // @@protoc_insertion_point(destructor:spotify.mercury.proto.MercuryMultiGetReply)
  SharedDtor();
}

void MercuryMultiGetReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercuryMultiGetReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercuryMultiGetReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercuryMultiGetReply_descriptor_;
}

const MercuryMultiGetReply& MercuryMultiGetReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercury_2eproto();
  return *default_instance_;
}

MercuryMultiGetReply* MercuryMultiGetReply::default_instance_ = NULL;

MercuryMultiGetReply* MercuryMultiGetReply::New() const {
  return new MercuryMultiGetReply;
}

void MercuryMultiGetReply::Clear() {
  reply_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercuryMultiGetReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.mercury.proto.MercuryMultiGetReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spotify.mercury.proto.MercuryReply reply = 1;
      case 1: {
        if (tag == 10) {
         parse_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_reply;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.mercury.proto.MercuryMultiGetReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.mercury.proto.MercuryMultiGetReply)
  return false;
#undef DO_
}

void MercuryMultiGetReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.mercury.proto.MercuryMultiGetReply)
  // repeated .spotify.mercury.proto.MercuryReply reply = 1;
  for (int i = 0; i < this->reply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reply(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.mercury.proto.MercuryMultiGetReply)
}

::google::protobuf::uint8* MercuryMultiGetReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.mercury.proto.MercuryMultiGetReply)
  // repeated .spotify.mercury.proto.MercuryReply reply = 1;
  for (int i = 0; i < this->reply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reply(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.mercury.proto.MercuryMultiGetReply)
  return target;
}

int MercuryMultiGetReply::ByteSize() const {
  int total_size = 0;

  // repeated .spotify.mercury.proto.MercuryReply reply = 1;
  total_size += 1 * this->reply_size();
  for (int i = 0; i < this->reply_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reply(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercuryMultiGetReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercuryMultiGetReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercuryMultiGetReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercuryMultiGetReply::MergeFrom(const MercuryMultiGetReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  reply_.MergeFrom(from.reply_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercuryMultiGetReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercuryMultiGetReply::CopyFrom(const MercuryMultiGetReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercuryMultiGetReply::IsInitialized() const {

  return true;
}

void MercuryMultiGetReply::Swap(MercuryMultiGetReply* other) {
  if (other != this) {
    reply_.Swap(&other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercuryMultiGetReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercuryMultiGetReply_descriptor_;
  metadata.reflection = MercuryMultiGetReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MercuryRequest::kUriFieldNumber;
const int MercuryRequest::kContentTypeFieldNumber;
const int MercuryRequest::kMethodFieldNumber;
const int MercuryRequest::kStatusCodeFieldNumber;
const int MercuryRequest::kSourceFieldNumber;
const int MercuryRequest::kUserFieldsFieldNumber;
#endif  // !_MSC_VER

MercuryRequest::MercuryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.mercury.proto.MercuryRequest)
}

void MercuryRequest::InitAsDefaultInstance() {
}

MercuryRequest::MercuryRequest(const MercuryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.mercury.proto.MercuryRequest)
}

void MercuryRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercuryRequest::~MercuryRequest() {
  // @@protoc_insertion_point(destructor:spotify.mercury.proto.MercuryRequest)
  SharedDtor();
}

void MercuryRequest::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_type_;
  }
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void MercuryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercuryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercuryRequest_descriptor_;
}

const MercuryRequest& MercuryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercury_2eproto();
  return *default_instance_;
}

MercuryRequest* MercuryRequest::default_instance_ = NULL;

MercuryRequest* MercuryRequest::New() const {
  return new MercuryRequest;
}

void MercuryRequest::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_content_type()) {
      if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_type_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
    status_code_ = 0;
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
  }
  user_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercuryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.mercury.proto.MercuryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content_type;
        break;
      }

      // optional string content_type = 2;
      case 2: {
        if (tag == 18) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_type().data(), this->content_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_method;
        break;
      }

      // optional string method = 3;
      case 3: {
        if (tag == 26) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status_code;
        break;
      }

      // optional sint32 status_code = 4;
      case 4: {
        if (tag == 32) {
         parse_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source;
        break;
      }

      // optional string source = 5;
      case 5: {
        if (tag == 42) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_fields;
        break;
      }

      // repeated .spotify.mercury.proto.UserField user_fields = 6;
      case 6: {
        if (tag == 50) {
         parse_user_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_fields;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.mercury.proto.MercuryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.mercury.proto.MercuryRequest)
  return false;
#undef DO_
}

void MercuryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.mercury.proto.MercuryRequest)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content_type(), output);
  }

  // optional string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method(), output);
  }

  // optional sint32 status_code = 4;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->status_code(), output);
  }

  // optional string source = 5;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source(), output);
  }

  // repeated .spotify.mercury.proto.UserField user_fields = 6;
  for (int i = 0; i < this->user_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->user_fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.mercury.proto.MercuryRequest)
}

::google::protobuf::uint8* MercuryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.mercury.proto.MercuryRequest)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content_type(), target);
  }

  // optional string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // optional sint32 status_code = 4;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->status_code(), target);
  }

  // optional string source = 5;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source(), target);
  }

  // repeated .spotify.mercury.proto.UserField user_fields = 6;
  for (int i = 0; i < this->user_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->user_fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.mercury.proto.MercuryRequest)
  return target;
}

int MercuryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_type());
    }

    // optional string method = 3;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional sint32 status_code = 4;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status_code());
    }

    // optional string source = 5;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  // repeated .spotify.mercury.proto.UserField user_fields = 6;
  total_size += 1 * this->user_fields_size();
  for (int i = 0; i < this->user_fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercuryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercuryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercuryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercuryRequest::MergeFrom(const MercuryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_fields_.MergeFrom(from.user_fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercuryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercuryRequest::CopyFrom(const MercuryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercuryRequest::IsInitialized() const {

  return true;
}

void MercuryRequest::Swap(MercuryRequest* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(content_type_, other->content_type_);
    std::swap(method_, other->method_);
    std::swap(status_code_, other->status_code_);
    std::swap(source_, other->source_);
    user_fields_.Swap(&other->user_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercuryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercuryRequest_descriptor_;
  metadata.reflection = MercuryRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MercuryReply_CachePolicy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercuryReply_CachePolicy_descriptor_;
}
bool MercuryReply_CachePolicy_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MercuryReply_CachePolicy MercuryReply::CACHE_NO;
const MercuryReply_CachePolicy MercuryReply::CACHE_PRIVATE;
const MercuryReply_CachePolicy MercuryReply::CACHE_PUBLIC;
const MercuryReply_CachePolicy MercuryReply::CachePolicy_MIN;
const MercuryReply_CachePolicy MercuryReply::CachePolicy_MAX;
const int MercuryReply::CachePolicy_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MercuryReply::kStatusCodeFieldNumber;
const int MercuryReply::kStatusMessageFieldNumber;
const int MercuryReply::kCachePolicyFieldNumber;
const int MercuryReply::kTtlFieldNumber;
const int MercuryReply::kEtagFieldNumber;
const int MercuryReply::kContentTypeFieldNumber;
const int MercuryReply::kBodyFieldNumber;
#endif  // !_MSC_VER

MercuryReply::MercuryReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.mercury.proto.MercuryReply)
}

void MercuryReply::InitAsDefaultInstance() {
}

MercuryReply::MercuryReply(const MercuryReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.mercury.proto.MercuryReply)
}

void MercuryReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_code_ = 0;
  status_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_policy_ = 1;
  ttl_ = 0;
  etag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercuryReply::~MercuryReply() {
  // @@protoc_insertion_point(destructor:spotify.mercury.proto.MercuryReply)
  SharedDtor();
}

void MercuryReply::SharedDtor() {
  if (status_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_message_;
  }
  if (etag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete etag_;
  }
  if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_type_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void MercuryReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercuryReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercuryReply_descriptor_;
}

const MercuryReply& MercuryReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercury_2eproto();
  return *default_instance_;
}

MercuryReply* MercuryReply::default_instance_ = NULL;

MercuryReply* MercuryReply::New() const {
  return new MercuryReply;
}

void MercuryReply::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    status_code_ = 0;
    if (has_status_message()) {
      if (status_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        status_message_->clear();
      }
    }
    cache_policy_ = 1;
    ttl_ = 0;
    if (has_etag()) {
      if (etag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        etag_->clear();
      }
    }
    if (has_content_type()) {
      if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_type_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercuryReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.mercury.proto.MercuryReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 status_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status_message;
        break;
      }

      // optional string status_message = 2;
      case 2: {
        if (tag == 18) {
         parse_status_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_message().data(), this->status_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cache_policy;
        break;
      }

      // optional .spotify.mercury.proto.MercuryReply.CachePolicy cache_policy = 3;
      case 3: {
        if (tag == 24) {
         parse_cache_policy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spotify::mercury::proto::MercuryReply_CachePolicy_IsValid(value)) {
            set_cache_policy(static_cast< ::spotify::mercury::proto::MercuryReply_CachePolicy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ttl;
        break;
      }

      // optional sint32 ttl = 4;
      case 4: {
        if (tag == 32) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_etag;
        break;
      }

      // optional bytes etag = 5;
      case 5: {
        if (tag == 42) {
         parse_etag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_etag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content_type;
        break;
      }

      // optional bytes content_type = 6;
      case 6: {
        if (tag == 50) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_body;
        break;
      }

      // optional bytes body = 7;
      case 7: {
        if (tag == 58) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.mercury.proto.MercuryReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.mercury.proto.MercuryReply)
  return false;
#undef DO_
}

void MercuryReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.mercury.proto.MercuryReply)
  // optional sint32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status_code(), output);
  }

  // optional string status_message = 2;
  if (has_status_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status_message(), output);
  }

  // optional .spotify.mercury.proto.MercuryReply.CachePolicy cache_policy = 3;
  if (has_cache_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cache_policy(), output);
  }

  // optional sint32 ttl = 4;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->ttl(), output);
  }

  // optional bytes etag = 5;
  if (has_etag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->etag(), output);
  }

  // optional bytes content_type = 6;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->content_type(), output);
  }

  // optional bytes body = 7;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.mercury.proto.MercuryReply)
}

::google::protobuf::uint8* MercuryReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.mercury.proto.MercuryReply)
  // optional sint32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->status_code(), target);
  }

  // optional string status_message = 2;
  if (has_status_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status_message(), target);
  }

  // optional .spotify.mercury.proto.MercuryReply.CachePolicy cache_policy = 3;
  if (has_cache_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cache_policy(), target);
  }

  // optional sint32 ttl = 4;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->ttl(), target);
  }

  // optional bytes etag = 5;
  if (has_etag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->etag(), target);
  }

  // optional bytes content_type = 6;
  if (has_content_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->content_type(), target);
  }

  // optional bytes body = 7;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.mercury.proto.MercuryReply)
  return target;
}

int MercuryReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status_code());
    }

    // optional string status_message = 2;
    if (has_status_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_message());
    }

    // optional .spotify.mercury.proto.MercuryReply.CachePolicy cache_policy = 3;
    if (has_cache_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cache_policy());
    }

    // optional sint32 ttl = 4;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ttl());
    }

    // optional bytes etag = 5;
    if (has_etag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->etag());
    }

    // optional bytes content_type = 6;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_type());
    }

    // optional bytes body = 7;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercuryReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercuryReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercuryReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercuryReply::MergeFrom(const MercuryReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_status_message()) {
      set_status_message(from.status_message());
    }
    if (from.has_cache_policy()) {
      set_cache_policy(from.cache_policy());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_etag()) {
      set_etag(from.etag());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercuryReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercuryReply::CopyFrom(const MercuryReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercuryReply::IsInitialized() const {

  return true;
}

void MercuryReply::Swap(MercuryReply* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    std::swap(status_message_, other->status_message_);
    std::swap(cache_policy_, other->cache_policy_);
    std::swap(ttl_, other->ttl_);
    std::swap(etag_, other->etag_);
    std::swap(content_type_, other->content_type_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercuryReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercuryReply_descriptor_;
  metadata.reflection = MercuryReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserField::kNameFieldNumber;
const int UserField::kValueFieldNumber;
#endif  // !_MSC_VER

UserField::UserField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spotify.mercury.proto.UserField)
}

void UserField::InitAsDefaultInstance() {
}

UserField::UserField(const UserField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spotify.mercury.proto.UserField)
}

void UserField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserField::~UserField() {
  // @@protoc_insertion_point(destructor:spotify.mercury.proto.UserField)
  SharedDtor();
}

void UserField::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void UserField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserField_descriptor_;
}

const UserField& UserField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mercury_2eproto();
  return *default_instance_;
}

UserField* UserField::default_instance_ = NULL;

UserField* UserField::New() const {
  return new UserField;
}

void UserField::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spotify.mercury.proto.UserField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spotify.mercury.proto.UserField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spotify.mercury.proto.UserField)
  return false;
#undef DO_
}

void UserField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spotify.mercury.proto.UserField)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spotify.mercury.proto.UserField)
}

::google::protobuf::uint8* UserField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spotify.mercury.proto.UserField)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spotify.mercury.proto.UserField)
  return target;
}

int UserField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserField::MergeFrom(const UserField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserField::CopyFrom(const UserField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserField::IsInitialized() const {

  return true;
}

void UserField::Swap(UserField* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserField_descriptor_;
  metadata.reflection = UserField_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mercury
}  // namespace spotify

// @@protoc_insertion_point(global_scope)
